{"version":3,"file":"7768.dbc7ab4d645e6aad0aad.js","mappings":"geAOA,MAAMA,EAAoB,GAAKC,EAAAA,EACzBC,EAA0B,KAAOD,EAAAA,EAC1BE,EAAwB,KAAOF,EAAAA,EAC/BG,EAAwB,GAAKH,EAAAA,EACpCI,EAAqB,OAASJ,EAAAA,E,qCCuB7B,SAASK,EAA6BC,EAAqBC,GAEhE,OAAOA,IADUC,EAAAA,EAAAA,KAAeF,GACVG,qBAAsBC,EAAAA,EAAAA,MACxCJ,EAAOK,mBArBeC,EAqBuBC,EAAAA,EAAWC,MAAMC,OApBhDC,EAAAA,IACTC,KAAKC,IACVD,KAAKE,IAAkB,IAAdP,EAAoBT,GACf,IAAdS,GAIAA,EAAcQ,EAAAA,IACTH,KAAKC,IACVD,KAAKE,IAAkB,IAAdP,EAAoBT,GACf,GAAdS,GAIGV,GAOH,GAtBN,IAA4BU,CAuB5B,CAEO,SAASS,EACdf,EAAWgB,EAAqBC,GAEhC,MAAMC,GAAoBC,EAAAA,EAAAA,KAAqBnB,EAAQgB,EAAQI,QACzDC,EAAmBL,EAAQM,WAAa,CAAEC,QAAS,GAAIC,QAASN,GAChEO,GAAgBC,EAAAA,EAAAA,KAAa1B,EAAQgB,EAAQI,QAG7CG,GAAUI,EAAAA,EAAAA,IAAoBN,EAAiBE,QAASN,GAE9D,IAAI,gBAAEW,EAAkB,IAAOP,EAiB/B,OAfIO,EAAgBC,SAClBD,EAAkBA,EAAgBE,OAAO,EAAGC,QAAOC,aAAcD,GAASC,IAAWhC,EAAOiC,gBAG9FhB,EAAciB,QAASC,IACrB,MAAM,cAAEF,GAAkBjC,EACJ,SAAlBmC,EAASC,MACbR,EAAgBS,QAAQ,CACtBL,OAAQP,GAAea,IAAML,EAC7BE,WACAI,UAAW5B,KAAK6B,MAAMC,KAAKC,MAAQ,KACnCX,OAAO,OAIJY,EAAAA,EAAAA,IAAkB3C,EAAQgB,EAAQI,OAAQJ,EAAQsB,GAAI,CAC3DhB,UAAW,IACND,EACHE,UACAK,oBAGN,CAEO,SAASgB,EACd5C,EAAWoB,EAAgByB,GAE3B,OAAOC,EAAAA,EAAAA,IAAW9C,EAAQoB,EAAQyB,GAAQ,EAC5C,CCaA,MAAME,EAAkB,IAClBC,EAAuB,IAE7B,IAAIC,EAAsC,EA8wB1C,SAASC,EACPlD,EACAmD,EACA/B,EACAkB,EACAhB,EACA8B,EACAC,EACArC,GAEA,MAAMK,EAAmBL,GAASM,UAGlC,GAAID,IAAoBiC,EAAAA,EAAAA,GAAahC,EAAWD,GAC9C,OAAOrB,EAGT,MAAMuD,EAAoBlC,GAAkBE,QAAQiC,KAAMC,GAAMA,EAAEC,aAElE,GAAIH,GAAmBG,YAAa,CAClC,MAAQC,eAAgBC,EAAS,YAAEF,EAAW,YAAEG,GAAgBN,EAChEjC,EAAUC,SAAUuC,EAAAA,EAAAA,IAAgBxC,EAAUC,QAASmC,EAAaE,EAAWC,EACjF,CAIA,GAFA7D,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAAEhB,eAE5C+B,EACH,OAAOrD,EAGT,MAAM,SAAEmC,EAAQ,MAAEJ,EAAK,SAAEgC,GAAazC,EAAUM,kBAAkB,IAAM,CAAC,EAEzE,IAD+BoC,EAAAA,EAAAA,KAA+BhE,EAAQ,oBACxCgB,GAAWmB,GAAY4B,IAAahC,EAAO,CACvE,MAAMkC,GAAaC,EAAAA,EAAAA,IAAclD,GAEjCmC,EAAQgB,oBAAoB,CAAEC,YAAaH,EAAY9B,WAAUkC,OAAOC,EAAAA,EAAAA,OAC1E,CAEA,MAAMC,EAAqCnB,EAAKoB,iBAAiBC,SAASnC,GACpEoC,GAAmCC,EAAAA,EAAAA,IAA0B3E,EAAQsB,GAG3E,GAAIoD,IAAqCH,EAAoC,CAC3EvE,EAAS4C,EAAsB5C,EAAQoB,EAAQ,CAC7CwD,sBAAuBxB,GAAMwB,sBAAwB,GAAK,EAC1DJ,gBAAiB,IAAKpB,GAAMoB,iBAAmB,GAAKlC,GAAIuC,KAAK,CAACC,EAAGC,IAAMA,EAAID,KAG7E,MAAME,GAAaC,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAErD,IAAKc,IAAS4B,EAAY,OAAOhF,GAEjCkF,EAAAA,EAAAA,IAAU,MACRC,EAAAA,EAAAA,IAAmB,CACjB/B,OACApC,QAASgE,EACTI,YAAY,KAGlB,CASA,OAPKV,GAAoCH,IACvCvE,EAAS4C,EAAsB5C,EAAQoB,EAAQ,CAC7CwD,sBAAuBxB,GAAMwB,sBAAwB,GAAK,EAC1DJ,gBAAiBpB,GAAMoB,iBAAiB1C,OAAQuD,GAAMA,IAAM/C,MAIzDtC,CACT,CAEO,SAASsF,EACdtF,EACAoB,EACAkB,EACAiD,EACAC,GAAc,GAEd,MAAMC,EAAiBD,GACnBE,EAAAA,EAAAA,KAAuB1F,EAAQoB,EAAQkB,IACvC2C,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAGtC,GAAImD,GAAkBF,EAAcI,WAAYC,EAAAA,EAAAA,IAAiBtD,GAAK,CACpE,MAAM,MACJuD,EAAK,MAAEC,EAAK,QAAEC,EAAO,SAAEC,IACrBC,EAAAA,EAAAA,IAAkBR,GAElBI,GAASN,EAAcI,QAAQE,OACjCN,EAAcI,QAAQE,MAAMK,UAAYL,EAAMK,QAC9CX,EAAcI,QAAQE,MAAMM,YAAcN,EAAMM,WACvCL,GAASP,EAAcI,QAAQG,MACxCP,EAAcI,QAAQG,MAAMI,UAAYJ,EAAMI,QACrCH,GAAWR,EAAcI,QAAQI,QAC1CR,EAAcI,QAAQI,QAAQK,sBAAwBL,EAAQK,oBACrDJ,GAAYT,EAAcI,QAAQK,WAC3CT,EAAcI,QAAQK,SAASK,iBAAmBL,EAASK,eAE/D,CAEA,MAAMrB,EAAaS,EAAiB,IAAKA,KAAmBF,GAAkBA,EAE9E,OAAOC,GACHc,EAAAA,EAAAA,KAAuBtG,EAAQoB,EAAQkB,EAAI0C,IAC3CrC,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI0C,EAC5C,CAEA,SAASuB,EACPvG,EAAWmD,EAAgCnC,EAAqBwF,GAEhE,MAAM,OAAEpF,GAAWJ,EAEbyF,GAAYC,EAAAA,EAAAA,GAAoB1F,IAEhC,WAAE2F,IAAeC,EAAAA,EAAAA,KAAsB5G,EAAQgB,IAAY,CAAC,EAElE,IAAK2F,GAAcF,GAAWI,aAAc,CAC1C,MAAMC,GAAgB7B,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQqF,EAAUI,cAC9DC,EACF9G,GAAS+G,EAAAA,EAAAA,KAAuC/G,EAAQ8G,EAAe1F,EAAQJ,EAAQsB,GAAIkE,GAE3FrD,EAAQ6D,YAAY,CAClB5F,SACA6F,UAAWR,EAAUI,aACrBK,aAAc,CACZV,aACAW,cAAenG,EAAQsB,KAI/B,CAEA,OAAOtC,CACT,CAEA,SAASoH,EACPpH,EAAWmD,EAAgCnC,GAE3C,MAAM,GAAEsB,EAAE,OAAElB,GAAWJ,EAEjBqG,GAAgBC,EAAAA,EAAAA,KAA+BtH,EAAQgB,IAEvD,WAAE2F,IAAeC,EAAAA,EAAAA,KAAsB5G,EAAQgB,IAAY,CAAC,EAE5DoC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BoG,EAAwBpE,GAAMqE,eAAgBC,EAAAA,EAAAA,KAAgB1H,EAAQoB,EAAQuG,EAAAA,IAEpF3H,EAASuG,EAAmBvG,EAAQmD,EAASnC,GAC7C,MAAM,SAAE4G,GAAajB,GAAc,CAAEiB,SAAUP,GAgC/C,OA9BIO,IACF5H,GAAS6H,EAAAA,EAAAA,KAAgB7H,EAAQoB,EAAQwG,EAAU,CAACtF,IAEpDwF,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3C,IAAI4D,EAAAA,EAAAA,KAAuBjI,EAAQoB,EAAQwG,EAAUvD,GAAQ,CAE3D,MAAM6D,GAAgBC,EAAAA,EAAAA,KAAoBnI,EAAQoB,EAAQwG,GACpDQ,GAAkBC,EAAAA,EAAAA,KAAcrI,EAAQoB,EAAQwG,EAAUtF,EAAI+B,GAC9DiE,GAAiBC,EAAAA,EAAAA,KAAkBH,EAAiBhH,EAAQwG,EAAUvD,GAEvE6D,IAAiBI,EAAgB7D,SAASyD,KAC7ClI,EAASoI,EAEb,IAGEzB,IACF3G,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwG,EAAU,aAAc,IAC/DjB,EACHQ,cAAenG,EAAQsB,MAGpBmG,EAAAA,EAAAA,IAAezH,KAAa0H,EAAAA,EAAAA,IAAgB1H,KAC/ChB,GAAS2I,EAAAA,EAAAA,KAAiB3I,EAAQoB,EAAQwG,EAAU,CAClDgB,eAAgBjC,EAAWiC,eAAiB,GAAK,OAMrDpB,IAIJxH,GAAS6H,EAAAA,EAAAA,KAAgB7H,EAAQoB,EAAQuG,EAAAA,GAAgB,CAACrF,IAE1DwF,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3C,IAAI4D,EAAAA,EAAAA,KAAuBjI,EAAQoB,EAAQuG,EAAAA,GAAgBtD,GAAQ,CAEjE,MAAM6D,GAAgBC,EAAAA,EAAAA,KAAoBnI,EAAQoB,EAAQuG,EAAAA,IACpDS,GAAkBC,EAAAA,EAAAA,KAAcrI,EAAQoB,EAAQuG,EAAAA,GAAgBrF,EAAI+B,GACpEiE,GAAiBC,EAAAA,EAAAA,KAAkBH,EAAiBhH,EAAQuG,EAAAA,GAAgBtD,GAE7E6D,IAAiBI,EAAgB7D,SAASyD,KAC7ClI,EAASoI,EAEb,KAfOpI,CAmBX,CAEA,SAAS6I,EACP7I,EACAoB,EACAJ,EACA8H,GAAQ,GAER,MAAM,MAAEC,GAAU/I,EACZoD,EAAO2F,EAAMC,KAAK5H,GAClB6H,GAAuBC,EAAAA,EAAAA,KAAwBlJ,EAAQoB,GAEvD+H,EAAQ/F,GAAMgG,SAAUC,EAAAA,EAAAA,KAAuBrJ,EAAQgB,QAAWsI,EACpEH,IACFnJ,GAASuJ,EAAAA,EAAAA,KAAYvJ,EAAQoB,EAAQ+H,EAAM7G,GAAI,CAC7C6E,cAAenG,EAAQsB,MAI3B,MAAMsF,GAAW4B,EAAAA,EAAAA,KAA0BxJ,EAAQgB,GACnDhB,GAAS2I,EAAAA,EAAAA,KAAiB3I,EAAQoB,EAAQwG,EAAU,CAClDT,cAAenG,EAAQsB,KAGzB,MAAM+E,GAAgBC,EAAAA,EAAAA,KAA+BtH,EAAQgB,GAK7D,OAJIqG,IACFrH,GAASyJ,EAAAA,EAAAA,KAAwBzJ,EAAQqH,EAAerG,EAAQsB,GAAI,WAGlE2G,GAAyBH,GAEzBG,IAAyBjI,EAAQsB,IAAM2G,IAAyBjI,EAAQ0I,iBACrE1I,EAAQsB,GAAK2G,GAOXQ,EAAAA,EAAAA,KAAwBzJ,EAAQoB,EAAQJ,EAAQsB,IAJ9CtC,CAOb,CAEA,SAAS2J,EAAuC3J,EAAWoB,EAAgBwG,EAAqBD,EAAAA,IAC9F,MAAMqB,GAAOY,EAAAA,EAAAA,KAAmB5J,EAAQoB,GAClCyI,GAAYnC,EAAAA,EAAAA,KAAgB1H,EAAQoB,EAAQwG,GAElD,IAAKoB,IAASa,EACZ,OAGF,IAAIxE,EAAIwE,EAAUhI,OAClB,KAAOwD,KAAK,CACV,MAAMrE,EAAUgI,EAAKa,EAAUxE,IAC/B,GAAIrE,IAAYA,EAAQwF,WACtB,OAAOxF,CAEX,CAGF,CA4CO,SAAS8I,EACd9J,EAAWoB,EAA4B2I,EAAe5G,GAItD,GAAI/B,EAAQ,CACV,MAAMgC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAM4G,EAAoB,IAAIC,IAC9BD,EAAkBE,IAAIvC,EAAAA,IAEtBoC,EAAI7H,QAASI,IACXtC,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAC7CkE,YAAY,KAGV2D,EAAAA,EAAAA,KAAYnK,EAAQoB,EAAQkB,KAC9BtC,GAASoK,EAAAA,EAAAA,KAAYpK,EAAQoB,EAAQkB,IAGvC,MAAMtB,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAClD,IAAKtB,EACH,OAGmC,kBAAjCA,EAAQ2E,QAAQ0E,QAAQjI,MAA4BpB,EAAQ2E,QAAQ0E,OAAOxE,QAC7E7F,GAASsK,EAAAA,EAAAA,KAAgBtK,EAAQoB,EAAQJ,EAAQ2E,QAAQ0E,OAAOxE,MAAMvD,IAAI,IAG5EtC,EAASuG,EAAmBvG,EAAQmD,EAASnC,GAAS,GAEtD,MAAM4G,GAAW4B,EAAAA,EAAAA,KAA0BxJ,EAAQgB,GAC/C4G,GACFoC,EAAkBE,IAAItC,KAI1BzE,EAAQoH,kBAAkB,CAAEnJ,WAE5B,MAAMoJ,EAAS,IAAIP,IAAIF,GAEvBC,EAAkB9H,QAAS0F,IACzB,MAAMjB,GAAa8D,EAAAA,EAAAA,KAAiBzK,EAAQoB,EAAQwG,GACpD,IAAKjB,GAAYQ,gBAAkBqD,EAAOE,IAAI/D,EAAWQ,eAAgB,OAEzE,MAAMwD,EAAiBhB,EAAgB3J,EAAQoB,EAAQwG,GAClD+C,GAOD/C,IAAaD,EAAAA,KACf3H,EAAS6I,EAAsB7I,EAAQoB,EAAQuJ,GAAgB,IAGjE3K,GAAS2I,EAAAA,EAAAA,KAAiB3I,EAAQoB,EAAQwG,EAAU,CAClDT,cAAewD,EAAerI,KAG5Bc,EAAKgG,UACPpJ,GAASuJ,EAAAA,EAAAA,KAAYvJ,EAAQoB,EAAQwJ,OAAOhD,GAAW,CACrDT,cAAewD,EAAerI,OAhB5Bc,EAAKgG,SAAWxB,IAAaD,EAAAA,IAC/BxE,EAAQ0H,cAAc,CAAEzJ,SAAQ0J,QAASF,OAAOhD,QAoBtDmD,EAAAA,EAAAA,IAAU/K,GAEV,MAAMgL,GAAoBC,EAAAA,EAAAA,KAA2BjL,GAUrD,YARAkL,WAAW,KACTlL,GAASmL,EAAAA,EAAAA,MAET,MAAMC,EAAkBrB,EAAIjI,OAAQQ,IAAO2C,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,IAAKkE,YAClFxG,GAASqL,EAAAA,EAAAA,KAAmBrL,EAAQoB,EAAQgK,IAC5CL,EAAAA,EAAAA,IAAU/K,IACTgL,EAAoBhI,EAAuBD,EAGhD,CAIA,MAAMuI,EAA4B,GAElCvB,EAAI7H,QAASI,IACX,MAAMiJ,GAAkBC,EAAAA,EAAAA,KAAsBxL,EAAQsC,GACtD,GAAIiJ,EAAiB,CACnBD,EAAgBG,KAAKF,GAMrB,MAAMZ,EAAiBhB,EAJvB3J,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQuL,EAAiBjJ,EAAI,CACtDkE,YAAY,IAGiC+E,GAC3CZ,IACF3K,EAAS6I,EAAsB7I,EAAQuL,EAAiBZ,GAAgB,IAG1E,MAAM3J,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQuL,EAAiBjJ,GAC3D,IAAInB,EAAAA,EAAAA,KAAqBnB,EAAQuL,IAAoBvK,EAAS,CAC5D,MAAM4G,GAAW4B,EAAAA,EAAAA,KAA0BxJ,EAAQgB,GACnD,IAAI0K,EAAAA,EAAAA,IAAiBH,EAAiB3D,EAAU5H,EAAOiC,eAAgB,CACrE,MAAM0J,EAA4BhC,EAAgB3J,EAAQuL,EAAiB3D,GAC3EzE,EAAQyI,yBAAyB,CAAExK,OAAQyK,OAAOjE,KAC9C+D,IACF3L,GAASyJ,EAAAA,EAAAA,KAAwBzJ,EAAQuL,EAAiBI,EAA0BrJ,GAAI,SAE5F,CACF,CAEsC,kBAAlCtB,GAAS2E,QAAQ0E,QAAQjI,MAA4BpB,EAAQ2E,QAAQ0E,OAAOxE,QAC9E7F,GAASsK,EAAAA,EAAAA,KAAgBtK,EAAQuL,EAAiBvK,EAAQ2E,QAAQ0E,OAAOxE,MAAMvD,IAAI,IAGrF,MAAM0I,GAAoBC,EAAAA,EAAAA,KAA2BjL,GAErDkL,WAAW,KACTlL,GAASmL,EAAAA,EAAAA,MACTnL,GAASqL,EAAAA,EAAAA,KAAmBrL,EAAQuL,EAAiB,CAACjJ,KACtDyI,EAAAA,EAAAA,IAAU/K,IACTgL,EAAoBhI,EAAuBD,EAChD,KAGFgI,EAAAA,EAAAA,IAAU/K,IAEV8L,EAAAA,EAAAA,IAAOR,GAAiBpJ,QAASI,IAC/Ba,EAAQoH,kBAAkB,CAAEnJ,OAAQkB,KAExC,EAlsCAyJ,EAAAA,EAAAA,IAAiB,YAAa,CAAC/L,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAM,OACJzB,EAAM,GAAEkB,EAAE,QAAEtB,EAAO,iBAAEgL,EAAgB,WAAEC,EAAU,KAAEC,GACjDrJ,EAEJ7C,EAASoH,EADTpH,EAASsF,EAAqBtF,EAAQoB,EAAQkB,EAAItB,GACNmC,EAASnC,GAErD,MAAMgE,GAAaC,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAC/CmE,GAAYC,EAAAA,EAAAA,GAAoB1B,GAChCmH,GAAiBC,EAAAA,EAAAA,GAAkBpH,GACnC5B,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC5BgC,GAAMgG,SACL3C,GAAW4F,gBACVhD,EAAAA,EAAAA,KAAuBrJ,EAAQgF,IAChCyB,EAAUI,cACb1D,EAAQ0H,cAAc,CAAEzJ,SAAQ0J,QAASrE,EAAUI,eAGrD,MAAMyF,GAAU7D,EAAAA,EAAAA,IAAezH,GA+D/B,GA7DA8G,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAEvCiI,GAAWL,IACbjM,EAAS6I,EAAsB7I,EAAQoB,EAAQ4D,IAGjD,MAAM4C,GAAW4B,EAAAA,EAAAA,KAA0BxJ,EAAQgF,GAGnD,GAFAhF,GAASuM,EAAAA,EAAAA,KAA4BvM,EAAQgF,EAAY5D,EAAQwG,EAAUvD,IAEvEmI,EAAAA,EAAAA,KAAoCxM,EAAQoB,EAAQJ,EAAuBqD,GAAQ,CACrF,GAAIiI,GAAWtL,EAAQqC,aAAgBrC,EAAQ2E,SAAS0E,SAAY8B,GAAgBM,UAC9EzL,EAAQ2E,SAAS+G,UAAW,CAChC,MAAMC,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GACxDsI,GAEFxJ,EAAQ0J,aAAa,CACnBzL,SACAwG,SAAU+E,EAAmB/E,SAC7BX,UAAWjG,EAAQsB,GACnBwK,aAAa,EACbC,qBAAqB,EACrB1I,SAGN,CAIKiI,GACHpB,WAAW,KACTlL,GAASmL,EAAAA,EAAAA,MACLa,GACF7I,EAAQ6J,qBAAqB,CAC3BnG,aAAcvE,EACd+B,UAGJrE,EAAS6I,EAAsB7I,EAAQoB,EAAQ4D,IAC/C+F,EAAAA,EAAAA,IAAU/K,IACT+C,EAEP,MACE/C,EAAS6I,EAAsB7I,EAAQoB,EAAQ4D,KAI/CkH,IACFlM,GAASiN,EAAAA,EAAAA,KAAWjN,EAAQkM,EAAK5J,GAAI4J,IAGnClL,EAAQkM,yBAA2BlM,EAAQkM,yBAA0BC,EAAAA,EAAAA,OACvEhK,EAAQiK,sBAAsB,CAAEhM,SAAQ6F,UAAW3E,KAGrDyI,EAAAA,EAAAA,IAAU/K,GAGLsM,GAAYlJ,GAAMiK,cAAgBC,EAAAA,EAAAA,KAAmBtN,EAAQoB,IAChE+B,EAAQoK,gBAGLjB,IAAWnL,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAAS,CACpD,MAAMiG,GAAgBC,EAAAA,EAAAA,KAA+BtH,EAAQgF,GACzDqC,KAAkBiG,EAAAA,EAAAA,KAAmBtN,EAAQqH,EAAe,UAC9DlE,EAAQyI,yBAAyB,CAAExK,OAAQiG,GAE/C,CAEA,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,GAAE/E,EAAE,YAAEkL,GAAgB3K,EAE5B7C,EAAS6I,EAAsB7I,EAAQsC,EAAIkL,GAAa,GACxDxN,GAASyN,EAAAA,EAAAA,KAAYzN,EAAQ,CAACwN,KAC9BzC,EAAAA,EAAAA,IAAU/K,GACV,KACF,CAEA,IAAK,8BACH8H,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAQjD,OAAQsM,IAAkBd,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EAE9E,GAAIqJ,IAAkB7K,EAAOP,GAAI,OACjC,MAAMtB,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQ0N,EAAe7K,EAAOoE,WAEhE,IAAKjG,EAAS,OAGd,IAAI2M,EAAAA,EAAAA,IAAe3M,IAAU4M,OAAS/K,EAAOgL,MAAO,OAEpD,MAAMC,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxCrE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BgO,wBAAyB,IAAKF,EAASE,yBAA2B,GAAK,CACrE1L,GAAI3B,KAAKsN,SACTC,eAAgBrL,EAAOgL,MACvB5G,UAAWpE,EAAOoE,aAEnB5C,MAGL0G,EAAAA,EAAAA,IAAU/K,GAEV,MAGF,IAAK,sBAAuB,CAC1B,MAAM,OACJoB,EAAM,GAAEkB,EAAE,QAAEtB,EAAO,KAAEkL,GACnBrJ,EAEJ7C,EAASsF,EAAqBtF,EAAQoB,EAAQkB,EAAItB,GAAS,GAE3D,MAAMmN,GAAeC,EAAAA,EAAAA,KAAmBpO,EAAQoB,EAAQuG,EAAAA,KAAmB,GAC3E3H,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQuG,EAAAA,GAAgB,gBAAgBmE,EAAAA,EAAAA,IAAO,IAAIqC,EAAc7L,KAErG,MAAMsF,GAAW4B,EAAAA,EAAAA,KAA0BxJ,EAAQgB,GACnD,GAAI4G,IAAaD,EAAAA,GAAgB,CAC/B,MAAM0G,GAAqBD,EAAAA,EAAAA,KAAmBpO,EAAQoB,EAAQwG,IAAa,GAC3E5H,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwG,EAAU,gBAAgBkE,EAAAA,EAAAA,IAAO,IAAIuC,EAAoB/L,IACvG,CAEI4J,IACFlM,GAASiN,EAAAA,EAAAA,KAAWjN,EAAQkM,EAAK5J,GAAI4J,IAGvClM,GAASsO,EAAAA,EAAAA,KAAmBtO,EAAQoB,EAAQ,CAC1CmN,sBAAsB,KAGxBxD,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OACJoB,EAAM,GAAEkB,EAAE,QAAEtB,EAAO,KAAEkL,EAAI,UAAEsC,GACzB3L,EAEE4C,GAAiBC,EAAAA,EAAAA,KAAuB1F,EAAQoB,EAAQkB,GAC9D,IAAKmD,EAUH,YATI+I,GACFrL,EAAQsL,UAAU,CAChB,QAAS,sBACTnM,GAAIO,EAAOP,GACXlB,OAAQyB,EAAOzB,OACfJ,QAAS6B,EAAO7B,QAChBkL,KAAMrJ,EAAOqJ,QAMnBlM,EAASsF,EAAqBtF,EAAQoB,EAAQkB,EAAItB,GAAS,GAC3D,MAAM+I,EAAMjC,OAAO4G,MAAKC,EAAAA,EAAAA,KAA4B3O,EAAQoB,IAAW,CAAC,GAAGwN,IAAIhE,QAAQ/F,KAAK,CAACC,EAAGC,IAAMA,EAAID,GAC1G9E,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQuG,EAAAA,GAAgB,eAAgBoC,GAE5E,MAAMnC,GAAW4B,EAAAA,EAAAA,KAA0BxJ,EAAQyF,GACnD,GAAImC,IAAaD,EAAAA,GAAgB,CAC/B,MAAM0G,GAAqBD,EAAAA,EAAAA,KAAmBpO,EAAQoB,EAAQwG,IAAa,GAC3E5H,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwG,EAAU,eAAgByG,EAAmBxJ,KAAK,CAACC,EAAGC,IAAMA,EAAID,GAC9G,CACIoH,IACFlM,GAASiN,EAAAA,EAAAA,KAAWjN,EAAQkM,EAAK5J,GAAI4J,KAGvCnB,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OACJoB,EAAM,GAAEkB,EAAE,QAAEtB,EAAO,KAAEkL,EAAI,UAAEsC,EAAS,iBAAExC,GACpCnJ,EAEE4C,GAAiBR,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAEzD,IAAKmD,EAWH,YAVI+I,GACFrL,EAAQsL,UAAU,CAChB,QAAS,aACTnM,GAAIO,EAAOP,GACXlB,OAAQyB,EAAOzB,OACfJ,QAAS6B,EAAO7B,QAChBkL,KAAMrJ,EAAOqJ,KACbF,sBAMN,MAAM5I,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAEhCpB,EAASsF,EAAqBtF,EAAQoB,EAAQkB,EAAItB,GAElD,MAAMgE,GAAaC,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAEjDtB,EAAQM,WAAa8B,IACvBpD,EAASkD,EACPlD,EAAQmD,EAAS/B,EAAQkB,EAAItB,EAAQM,UAAW8B,EAAM4B,EAAW3B,WAAYoC,IAI7EzE,EAAQ2E,SAASiI,MAAMA,OAASnI,GAAgBE,SAASiI,MAAMA,OACjE5N,GAAS6O,EAAAA,EAAAA,KAAwB7O,EAAQoB,EAAQkB,IAG/C4J,IACFlM,GAASiN,EAAAA,EAAAA,KAAWjN,EAAQkM,EAAK5J,GAAI4J,KAGvCnB,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,GAAEsC,EAAE,QAAEtB,EAAO,KAAEkL,GAASrJ,EAE9B7C,GAAS8O,EAAAA,EAAAA,KAAwB9O,EAAQsC,EAAItB,GAEzCkL,IACFlM,GAASiN,EAAAA,EAAAA,KAAWjN,EAAQkM,EAAK5J,GAAI4J,KAGvCnB,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,2BAA4B,CAC/B,MAAM,WAAE+O,GAAelM,EAEvB7C,GAASgP,EAAAA,EAAAA,KAAyBhP,EAAQ+O,IAC1ChE,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,qBAAsB,CACzB,MAAM,aAAEiP,GAAiBpM,EACnBmG,GAAOkG,EAAAA,EAAAA,IAAqBD,EAAc,MAEhDjP,GAASmP,EAAAA,EAAAA,KAAmBnP,EAAQgJ,IACpC+B,EAAAA,EAAAA,IAAU/K,GACV,KACF,CAEA,IAAK,mBACHA,GAASoP,EAAAA,EAAAA,KAAiBpP,EAAQ6C,EAAOwM,eACzCtE,EAAAA,EAAAA,IAAU/K,GACV,MAGF,IAAK,+BAAgC,CACnC,MAAM,OACJoB,EAAM,QAAEkO,EAAO,sBAAEC,GACf1M,EAEJ7C,GAASqL,EAAAA,EAAAA,KAAmBrL,EAAQoB,EAAQ,CAACkO,IAC7CtP,GAASsO,EAAAA,EAAAA,KAAmBtO,EAAQoB,EAAQ,CAC1CmN,sBAAsB,KAGxBxD,EAAAA,EAAAA,IAAU/K,GAEV8H,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAMsI,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAC5D,GAAIsI,GAAoBvL,SAAWA,EAAQ,OAE3C,MAAMsB,EAAMD,KAAKC,MACbA,EAAMO,EA3S0B,MA8SpCA,EAAsCP,EAEtCS,EAAQqM,iBAAiB,CACvBxO,QAAS,CACPyO,IAAK,uBAEPC,MAAO,CACLD,IAAK,wBAEPpL,UAGFlB,EAAQ0J,aAAa,CACnBzL,SACA6F,UAAWsI,EACXI,gBAAiB,YACjBtL,aAIJ,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OACJjD,EAAM,QAAEkO,EAAO,QAAEtO,EAAO,KAAEkL,GACxBrJ,EAEJ7C,EAASoH,EAA2BpH,EAAQmD,EAASnC,GAErD,MAAMyE,GAAiBR,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkO,GAEzDtP,GAASqL,EAAAA,EAAAA,KAAmBrL,EAAQoB,EAAQ,CAACkO,IAGzCtO,EAAQwE,cACVxF,GAAS4P,EAAAA,EAAAA,KAA4B5P,EAAQoB,EAAQ,CAACkO,KAGxDtP,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQJ,EAAQsB,GAAI,IAClDmD,KACAzE,EACH0I,gBAAiB4F,EACjB9I,gBAAY8C,IAGV4C,IACFlM,GAASiN,EAAAA,EAAAA,KAAWjN,EAAQkM,EAAK5J,GAAI4J,IAGvClM,EAAS,IACJA,EACH6P,YAAa,CACXC,cAAcC,EAAAA,EAAAA,IAAK/P,EAAO6P,YAAYC,aAAc,EAAC5L,EAAAA,EAAAA,IAAclD,OAIvE,MAAMgE,GAAaC,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQJ,EAAQsB,IAC7DtC,EAAS6I,EAAsB7I,EAAQoB,EAAQ4D,GAE/C,MAAMgL,GAASpJ,EAAAA,EAAAA,KAAsB5G,EAAQgB,GAE7C8G,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAQjD,OAAQsM,EAAe9F,SAAUqI,IAAoBrD,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EACrGqJ,IAAkBtM,IAChB4O,GAAQrJ,YAAYiB,UAAYD,EAAAA,MAAoBsI,GAI1D9M,EAAQ+M,oBAAoB,CAAEC,MAAOnP,EAAQsB,GAAI+B,YAE/C2L,GAAQrJ,YAAYiB,WACtB5H,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQ4O,EAAOrJ,WAAWiB,SAAU,aAAc,IACjFoI,EAAOrJ,WACVQ,cAAenG,EAAQsB,GACvB8N,uBAAwBpP,EAAQsB,MAIpCtC,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCgP,uBAAwBpP,EAAQsB,KAGlC,MAAMc,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAMhC,GAJKgC,GAAMiK,cAAgBC,EAAAA,EAAAA,KAAmBtN,EAAQoB,IACpD+B,EAAQoK,gBAGNpM,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAAS,CACxC,MAAMiG,GAAgBC,EAAAA,EAAAA,KAA+BtH,EAAQgF,GACzDqC,KAAkBiG,EAAAA,EAAAA,KAAmBtN,EAAQqH,EAAe,UAC9DlE,EAAQyI,yBAAyB,CAAExK,OAAQiG,GAE/C,EAEA0D,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,sCAAuC,CAC1C,MAAM,OACJoB,EAAM,QAAEkO,EAAO,QAAEtO,EAAO,KAAEkL,GACxBrJ,EACEsL,GAAeC,EAAAA,EAAAA,KAAmBpO,EAAQoB,EAAQuG,EAAAA,KAAmB,GAC3E3H,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQuG,EAAAA,GAAgB,eAAgB,IAAIwG,EAAcnN,EAAQsB,KAEtG,MAAMsF,GAAW4B,EAAAA,EAAAA,KAA0BxJ,EAAQgB,GACnD,GAAI4G,IAAaD,EAAAA,GAAgB,CAC/B,MAAM0G,GAAqBD,EAAAA,EAAAA,KAAmBpO,EAAQoB,EAAQwG,IAAa,GAC3E5H,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwG,EAAU,eAAgB,IAAIyG,EAAoBrN,EAAQsB,IACxG,CAEA,MAAMmD,GAAiBC,EAAAA,EAAAA,KAAuB1F,EAAQoB,EAAQkO,GAE9DtP,GAAS4P,EAAAA,EAAAA,KAA4B5P,EAAQoB,EAAQ,CAACkO,IACtDtP,GAASsG,EAAAA,EAAAA,KAAuBtG,EAAQoB,EAAQJ,EAAQsB,GAAI,IACvDmD,KACAzE,EACH0I,gBAAiB4F,EACjB9I,gBAAY8C,IAGV4C,IACFlM,GAASiN,EAAAA,EAAAA,KAAWjN,EAAQkM,EAAK5J,GAAI4J,KAGvCnB,EAAAA,EAAAA,IAAU/K,GACV,KACF,CAEA,IAAK,kBAAmB,CACtB,MAAM,OAAEoB,EAAM,SAAEiP,EAAQ,WAAEtB,GAAelM,EAEnCyN,GAAWC,EAAAA,EAAAA,KAAW3G,EAAAA,EAAAA,KAAmB5J,EAAQoB,GAAS2N,GAC1DyB,EAA8C,CAClD,CAAC7I,EAAAA,IAAiBoH,GAEpBjH,OAAOC,OAAOuI,GAAUpO,QAASlB,IAC/B,MAAM4G,GAAW4B,EAAAA,EAAAA,KAA0BxJ,EAAQgB,GAInD,GAHAhB,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQJ,EAAQsB,GAAI,CACrD+N,aAEEzI,IAAaD,EAAAA,GAAgB,OACjC,MAAM8I,EAAyBD,EAAgB5I,IAAa,GAC5D6I,EAAuBhF,KAAKzK,EAAQsB,IACpCkO,EAAgB5I,GAAY6I,IAG9B3I,OAAO4I,QAAQF,GAAiBtO,QAAQ,EAAE0F,EAAUmC,MAClD,MAAM4G,GAAYC,EAAAA,EAAAA,KAAgB5Q,EAAQoB,EAAQuG,EAAAA,KAAmB,GAC/DkJ,EAAeR,GACjBvE,EAAAA,EAAAA,IAAO6E,EAAUG,OAAO/G,IAAMlF,KAAK,CAACC,EAAGC,IAAMA,EAAID,GACjD6L,EAAU7O,OAAQQ,IAAQyH,EAAItF,SAASnC,IAC3CtC,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwJ,OAAOhD,GAAW,YAAaiJ,MAE7E9F,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,mBAAoB,CACvB,MAAM,WACJ2G,GACE9D,EAEJ7C,GAAS+Q,EAAAA,EAAAA,KAAkB/Q,EAAQ,CAAC2G,IACpC,MAAM,OAAEvF,EAAM,SAAEwG,GAAajB,EAC7B,IAAKvF,IAAWwG,EAAU,OAE1B,MAAMxE,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1B4P,GAAoBvG,EAAAA,EAAAA,KAAiBzK,EAAQoB,EAAQwG,GACrDuB,GAAQgB,EAAAA,EAAAA,KAAYnK,EAAQoB,EAAQwG,GAY1C,GAXIxE,GAAMgG,UACHD,GAASA,EAAMhC,gBAAkB6J,GAAmBZ,uBAGvDpQ,GAASuJ,EAAAA,EAAAA,KAAYvJ,EAAQoB,EAAQwJ,OAAOhD,GAAW,CACrDH,YAAa,IAHftE,EAAQ0H,cAAc,CAAEzJ,SAAQ0J,QAASF,OAAOhD,OAS/CxE,GAAMgG,QAAS,CAClB,MAAMgH,EAAyBhN,GAAMgN,uBAC/Ba,EAAiCtK,EAAWyJ,wBAA0BA,EACxEA,GAA0Ba,IAC5BjR,GAAS2I,EAAAA,EAAAA,KAAiB3I,EAAQoB,EAAQwG,EAAU,CAClDwI,uBAAwBzP,KAAKE,IAAIoQ,EAAgCb,KAGvE,EACArF,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAQsC,GAAIlB,GAAWyB,EACjBqO,GAAetH,EAAAA,EAAAA,KAAmB5J,EAAQoB,GAEhD,GAAI8P,KAAiBC,EAAAA,EAAAA,IAAS/P,GAAS,CACrC,MAAMiD,GAAQC,EAAAA,EAAAA,MACdtE,GAASqL,EAAAA,EAAAA,KAAmBrL,EAAQoB,EAAQ0G,OAAO4G,KAAKwC,GAActC,IAAIhE,UAC1EG,EAAAA,EAAAA,IAAU/K,GACVmD,EAAQiO,aAAa,CAAEhQ,SAAQ0H,OAAO,IACtC3F,EAAQkO,qBAAqB,CAAEjQ,SAAQwG,SAAUD,EAAAA,GAAgBtD,SACnE,CAEA,KACF,CAEA,IAAK,iBAAkB,CACrB,MAAM,IAAE0F,EAAG,OAAE3I,GAAWyB,EAExBiH,EAAe9J,EAAQoB,EAAQ2I,EAAK5G,GACpC,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAE4G,EAAG,OAAEuH,EAAM,OAAElQ,GAAWyB,EAE1B0O,EAAqBxH,GAAKyH,KAAMlP,IACpCoD,EAAAA,EAAAA,KAAuB1F,EAAQoB,EAAQkB,IAAKmP,0BAExCC,EAAmBJ,GAAQ9N,KAAMlB,IACrC,MAAMtB,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAClD,OAAOtB,GAAS2E,QAAQG,QAGtByL,GAAsBG,GACxB5J,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3ClB,EAAQqM,iBAAiB,CACvBxO,QAAS,CACPyO,IAAK,uBAEPkC,WAAY,CACVlC,IAAK,uBAEPpF,OAAQ,CACNA,OAAQ,eACRuH,QAAS,CACPxQ,SACA6F,UAAWyK,EACXrN,UAGJA,YAgqBZ,SACEjD,EAAgB2I,EAAe5G,EAAgCnD,GAE/D+J,EAAI7H,QAASI,IACXtC,GAASsG,EAAAA,EAAAA,KAAuBtG,EAAQoB,EAAQkB,EAAI,CAClDkE,YAAY,OAIhBuE,EAAAA,EAAAA,IAAU/K,GAEV,MAAMgL,GAAoBC,EAAAA,EAAAA,KAA2BjL,GAErDkL,WAAW,KACTlL,GAASmL,EAAAA,EAAAA,MACTnL,GAAS4P,EAAAA,EAAAA,KAA4B5P,EAAQoB,EAAQ2I,GACrD,MAAM8H,GAAoBlD,EAAAA,EAAAA,KAA4B3O,EAAQoB,GAC9DpB,GAASwI,EAAAA,EAAAA,KACPxI,EAAQoB,EAAQuG,EAAAA,GAAgB,eAAgBG,OAAO4G,KAAKmD,GAAqB,CAAC,GAAGjD,IAAIhE,UAE3FG,EAAAA,EAAAA,IAAU/K,IACTgL,EAAoBhI,EAAuBD,EAChD,CAjrBM+O,CAAwB1Q,EAAQ2I,EAAK5G,EAASnD,GAC9C,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAEoB,GAAWyB,EACbkP,EAAe/R,EAAOsQ,SAAS0B,SAAS5Q,GAY9C,GAXIA,IAAW6Q,EAAAA,MACbjS,EAAS,IACJA,EACHkS,qBAAsBlS,EAAOkS,qBAAqBtD,IAAKuD,IAAY,IAC9DA,EACHC,WAAW,OAGfrH,EAAAA,EAAAA,IAAU/K,IAGR+R,EAAc,CAChB,MAAMhI,EAAMjC,OAAO4G,KAAKqD,EAAa/I,MAAM4F,IAAIhE,QAE/Cd,EADA9J,GAASmL,EAAAA,EAAAA,MACc/J,EAAQ2I,EAAK5G,EACtC,MACEA,EAAQoH,kBAAkB,CAAEnJ,WAG9BpB,GAASmL,EAAAA,EAAAA,MACTnL,GAASqS,EAAAA,EAAAA,KAAwBrS,EAAQoB,IACzC2J,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,qBAAsB,CACzB,MAAM,OAAEoB,GAAWyB,EACbZ,EAAgBjC,EAAOiC,cAC7BjC,GAASqS,EAAAA,EAAAA,KAAwBrS,EAAQoB,EAAQ,UACjD2J,EAAAA,EAAAA,IAAU/K,GAwdT,SACLA,EACAoB,EACAwG,EACAzE,GAEA,MAAM6F,GAAOY,EAAAA,EAAAA,KAAmB5J,EAAQoB,GACxC,IAAK4H,EACH,OAGF,MAAM+F,EAAajH,OAAOC,OAAOiB,GAAMlH,OAAQd,IACrBwI,EAAAA,EAAAA,KAA0BxJ,EAAQgB,KAC/B4G,GAC1BgH,IAAK5N,GAAYA,EAAQsB,IAEvByM,EAAWlN,QAIhBiI,EAAe9J,EAAQoB,EAAQ2N,EAAY5L,EAC7C,CA1eMmP,CADAtS,GAASmL,EAAAA,EAAAA,MACYlJ,EAAeb,EAAQ+B,GAE5C,KACF,CAEA,IAAK,2BAA4B,CAC/B,MAAM,OAAE/B,EAAM,OAAEY,GAAWa,GA4b1B,SACL7C,EACAoB,EACAY,EACAmB,GAEA,MAAM6F,GAAOY,EAAAA,EAAAA,KAAmB5J,EAAQoB,GAElC2N,EAAajH,OAAOC,OAAOiB,GAAMlH,OAAQd,GACtCA,EAAQuR,WAAavQ,GAC3B4M,IAAK5N,GAAYA,EAAQsB,IAEvByM,EAAWlN,QAIhBiI,EAAe9J,EAAQoB,EAAQ2N,EAAY5L,EAC7C,CA1cMqP,CADAxS,GAASmL,EAAAA,EAAAA,MACwB/J,EAAQY,EAAQmB,GAEjD,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAE4G,EAAG,cAAExE,GAAkB1C,EAE/BkH,EAAI7H,QAASI,IACX,MAAMlB,GAASoK,EAAAA,EAAAA,KAAsBxL,EAAQsC,GACzClB,IACFpB,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAIiD,OAInDwF,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,UAAEyS,EAAS,IAAE1I,EAAG,cAAExE,GAAkB1C,EAE1CkH,EAAI7H,QAASI,IACXtC,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQyS,EAAWnQ,EAAIiD,MAGpDwF,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAE0S,EAAM,WAAEC,GAAe9P,EAE/B7C,GAASiN,EAAAA,EAAAA,KAAWjN,EAAQ0S,EAAQC,IAEpC5H,EAAAA,EAAAA,IAAU/K,GACV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAE0S,EAAM,OAAE1Q,EAAM,QAAE4Q,GAAY/P,EACpC7C,GAAS6S,EAAAA,EAAAA,KAAe7S,EAAQ0S,EAAQ1Q,EAAQ4Q,IAChD7H,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,QAAEgB,GAAY6B,GAEhBiQ,EAAAA,EAAAA,KAAyB9S,IAC3BmD,EAAQ4P,0BAA0B,CAAE/R,YAGtC,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAEI,EAAM,GAAEkB,EAAE,UAAEhB,GAAcuB,EAC5B7B,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAC5Cc,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQ6C,EAAOzB,QAEvC,IAAKgC,IAASpC,EAAS,OAEvBhB,EAASkD,EAAgBlD,EAAQmD,EAAS/B,EAAQkB,EAAIhB,EAAW8B,EAAMpC,EAAQqC,WAAYrC,IAC3F+J,EAAAA,EAAAA,IAAU/K,GACV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OACJoB,EAAM,GAAEkB,EAAE,cAAE0Q,EAAa,SAAEC,GACzBpQ,EACE7B,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAGlD,KAFaiF,EAAAA,EAAAA,KAAWvH,EAAQ6C,EAAOzB,UAEzBJ,EAAS,OAEvB,GAAIA,EAAQ2E,QAAQuN,QAAS,CAC3B,MAAMC,EAAQH,EAAc,GAC5B,GAAI,cAAeG,GAA6B,yBAApBA,EAAMC,UAAsC,CACtE,IAAKpS,EAAQ2E,QAAQuN,QAAS,OAC9BlT,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAC7CqD,QAAS,IACJ3E,EAAQ2E,QACXuN,QAAS,IACJlS,EAAQ2E,QAAQuN,QACnBF,cAAeG,OAIrBpI,EAAAA,EAAAA,IAAU/K,EACZ,KAAO,CACL,MAAM2F,EAAUwN,EAChBnT,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAC7CqD,QAAS,IACJA,MAGPoF,EAAAA,EAAAA,IAAU/K,EACZ,CACF,CAEA,GAAIgB,EAAQ2E,QAAQ0N,UAAW,CAC7B,MAAMC,EAAkBL,EAAW,CAAEA,WAAUD,iBAC3C,CAAEA,cAAeA,EAA4CC,cAAU3J,GAE3EtJ,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAC7CqD,QAAS,IACJ3E,EAAQ2E,QACX0N,UAAW,IACNrS,EAAQ2E,QAAQ0N,aAChBC,OAITvI,EAAAA,EAAAA,IAAU/K,EACZ,CAEA,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,gBAAEuT,EAAe,KAAE3F,EAAI,UAAE4F,GAAc3Q,EAE7C7C,EAAS,IACJA,EACHyT,eAAgB,IACXzT,EAAOyT,eACV,CAACF,GAAkB,IACbvT,EAAOyT,eAAeF,IAAoB,CAAC,EAC/CA,kBACA3F,OACA4F,gBAINzI,EAAAA,EAAAA,IAAU/K,GACV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAEoB,EAAM,QAAEkO,EAAO,MAAEoE,GAAU7Q,EAE/B6Q,EAAMC,MAAM,2BACd7L,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3ClB,EAAQyQ,oCAAoC,CAAExS,SAAQiD,YAI1DrE,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkO,EAAS,CAAEuE,aAAc,+BACpE9I,EAAAA,EAAAA,IAAU/K,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OACJoB,EAAM,WAAE2N,EAAU,eAAE+E,EAAc,aAAEC,GAClClR,EAEJ7C,GAASgU,EAAAA,EAAAA,KAA0BhU,EAAQoB,EAAQ2N,EAAY+E,EAAgBC,IAE/EhJ,EAAAA,EAAAA,IAAU/K,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAEoB,EAAM,WAAE2N,EAAU,eAAE+E,GAAmBjR,EAE/C7C,GAASgU,EAAAA,EAAAA,KAA0BhU,EAAQoB,EAAQ2N,EAAY+E,EAAgB,KAE/E/I,EAAAA,EAAAA,IAAU/K,EACZ,K,eCltBJ,MAEMiU,GAA0B,IAAIC,IAE9BC,IAA0BC,EAAAA,EAAAA,IAAUC,GAAOA,IAAM,KAAK,GAyjB5DC,eAAeC,IAAiC,OAC9CvU,EAAM,OAAEoB,EAAM,SAAEwG,EAAQ,MAAE4M,EAAK,YAAEC,EAAW,kBAAEC,IAI9C,MAAMtR,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BuT,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQoB,GAChC,IAAKgC,GAASuR,IAAQE,EAAAA,EAAAA,IAAcF,GAAQ,OAE5C,MAAMlO,GAAYqO,EAAAA,EAAAA,KAAuB9U,EAAQoB,EAAQwG,EAAU4M,GAAO/N,WAEpEsO,EAAiCP,EAAQ,IAC1CA,EACH/N,YACAuO,KAAMrU,KAAK6B,MAAMC,KAAKC,MAAQ,KAC9B4J,SAAS,QACPhD,EAEJtJ,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwG,EAAU,QAASmN,GAC1DL,IACH1U,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAE6T,UAAWF,GAAUC,SAG7DjK,EAAAA,EAAAA,IAAU/K,GAENyU,UAEiBS,EAAAA,EAAAA,IAAQ,YAAa,CACxC9R,OACAoR,MAAOO,KAGKA,IACZA,EAASzI,SAAU,GAGrBtM,GAASmL,EAAAA,EAAAA,MACTnL,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwG,EAAU,QAASmN,GAC/D/U,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAE6T,UAAWF,GAAUC,QAE3DjK,EAAAA,EAAAA,IAAU/K,GACZ,CAkpBAsU,eAAea,GAAuBnV,EAAqBoV,EAA+B/Q,GACxF,MAAM,WACJgR,EAAU,WAAEtG,EAAU,SAAEuG,EAAQ,YAAEC,EAAW,UAAEC,EAAS,WAAEC,EAAU,WAAEC,EAAa/N,EAAAA,KACjFzH,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOsR,iBAC5B,oBAAEC,EAAmB,SAAEC,EAAQ,YAAEC,GAAgBV,EAEjDW,GAAuBC,EAAAA,EAAAA,KAA2BhW,GAClDiW,EAAiBP,IAAe/N,EAAAA,GAEhCuO,EAAWb,GAAa9N,EAAAA,EAAAA,KAAWvH,EAAQqV,QAAc/L,EACzD6M,EAASb,GAAW/N,EAAAA,EAAAA,KAAWvH,EAAQsV,QAAYhM,EAEnDgH,EAAW+E,GAActG,EAC3BA,EACClK,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GACnB6J,IAAKtM,IAAO2C,EAAAA,EAAAA,KAAkBjF,EAAQqV,EAAY/S,IAAKR,OAAOsU,cAC/D9M,EAEJ,IAAK4M,IAAaC,IAAW7F,GAAaoF,IAAeO,IAAmBE,EAAO/M,QACjF,OAGF,MAAMiN,GAAS3U,EAAAA,EAAAA,KAAa1B,EAAQsV,GAC9Bd,GAAQ8B,EAAAA,EAAAA,KAAYtW,EAAQsV,EAAWI,GAAc/N,EAAAA,IACrDR,GAAgB+B,EAAAA,EAAAA,KAAwBlJ,EAAQmW,EAAO7T,IACvDiU,EAAqC,IAEpCC,EAAcC,IAAmBC,EAAAA,EAAAA,IAAUpG,EAAWqG,KAAOC,EAAAA,EAAAA,IAA6BD,IAC3FE,EAA0BL,EAAa1U,OAAQd,IAAY8V,EAAAA,EAAAA,KAAwB9W,EAAQgB,IACjG,GAAI6V,EAAwBhV,OAAQ,CAClC,MAAMkV,EAAgB/W,EAAOgX,QAAQC,mBACjCC,EAAAA,EAAAA,IAA2BL,EAAyB7W,EAAOgX,OAAOC,mBAClE,CAACJ,GACL,IAAK,MAAMM,KAASJ,EAAe,CACjC,MAAMK,EAAuC,CAC3ClB,WACAC,SACAT,aACApF,SAAU6G,EACVtB,WACAC,cACAO,SACAd,cACAC,YACAC,aACAM,uBACA9J,WAAYmK,QAAQ5B,GACpBrN,gBACAyO,uBAGF,GAAKA,EAEE,CACL,MAAMyB,QAAoCnC,EAAAA,EAAAA,IAAQ,uBAAwBkC,GAC1Eb,EAAc9K,KAAK,IACd2J,EACHgC,cAAe,IAAKA,EAAeC,+BACnCA,+BAEJ,MAREnC,EAAAA,EAAAA,IAAQ,kBAAmBkC,EAS/B,CACF,CAEA,IAAK,MAAMpW,KAAWyV,EAAiB,CACrC,MAAM,KAAE7I,EAAI,SAAE0J,GAAatW,EAAQ2E,QAAQiI,MAAQ,CAAC,GAC9C,QAAE7H,GAAY/E,EAAQ2E,QAItB4R,EAA4B,CAChCnU,KAAM+S,EACN1P,WAJgBqO,EAAAA,EAAAA,KAAuB9U,EAAQmW,EAAO7T,GAAIoT,GAK1D9H,OACA0J,WACAvR,UACA8P,WACAC,cACAO,SACAlP,uBAGIqQ,GAAyBxX,EAAQuX,EAAQhB,EACjD,CAQA,OANAvW,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B2V,gBAAiB,CAAC,EAClB8B,0BAA0B,GACzBpT,IACH0G,EAAAA,EAAAA,IAAU/K,GACHuW,CACT,CAEAjC,eAAejD,GACbrR,EACAoD,EACAwE,EACA8P,EACAC,EACAC,GAAa,EACbC,GAAkB,EAClBC,MACIzT,GAAQC,EAAAA,EAAAA,QAEZ,MAAMlD,EAASgC,EAAKd,GAEpB,IAAIyV,EACAC,EAAYC,EAAAA,IAChB,OAAQN,GACN,KAAKO,EAAAA,GAAkBC,UACjBT,GACFK,GAAa,EACbC,GAAa,GAEbD,OAAYzO,EAEd,MACF,KAAK4O,EAAAA,GAAkBE,OACrBL,IAAcpX,KAAK0X,MAAMJ,EAAAA,IAAqB,GAAK,GACnD,MACF,KAAKC,EAAAA,GAAkBI,SACrBP,IAAcE,EAAAA,IAAqB,GAC/BP,IACFM,GAAa,GAOnB,MAAM/V,GAFNjC,GAASmL,EAAAA,EAAAA,OAEoBlJ,cACvBsW,GAAgB7M,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU3F,GACnDuW,EAAaD,EAAgB1M,OAAOjE,GAAYxG,EAEhDqX,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C9R,MAAMmE,EAAAA,EAAAA,KAAWvH,EAAQwY,GACzBd,WACAK,YACAW,MAAOV,EACPpQ,WACA2Q,kBAGF,IAAKE,EACH,OAGF,MAAM,SACJnI,EAAQ,MAAEqI,GACRF,EAEJzY,GAASmL,EAAAA,EAAAA,MAET,MAAMoL,EAAgBnV,IAAW6Q,EAAAA,IAC7BjS,EAAOkS,qBAAqBpQ,OAAO,EAAGsQ,gBAAiBA,GAAWxD,IAAI,EAAG5N,aAAcA,GACvF,GACE4X,EAAe,GAAoB9H,OAAOR,EAAUiG,GACpDvN,GAAOkG,EAAAA,EAAAA,IAAqB0J,EAAa,MACzC7O,EAAMjC,OAAO4G,KAAK1F,GAAM4F,IAAIhE,QAElC,GAAIhD,IAAaD,EAAAA,MAAmB+D,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU5H,EAAOiC,eAAgB,CAC5F,MAAM4W,GAAuBC,EAAAA,EAAAA,KAAqB9Y,EAAQoB,EAAQwG,GAC5DmC,EAAI,IAAM8O,IAAyB9O,EAAI,IAAO8O,IAAyBjR,GAC3EmC,EAAI1H,QAAQuI,OAAOhD,GAEvB,CAEA5H,GAAS+Y,EAAAA,EAAAA,KAAoB/Y,EAAQoB,EAAQ4H,GAC7ChJ,EAAS4X,GACLoB,EAAAA,EAAAA,KAAoBhZ,EAAQoB,EAAQwG,EAAUmC,IAC9ClC,EAAAA,EAAAA,KAAgB7H,EAAQoB,EAAQwG,EAAUmC,GAE9C,IAAIF,GAAYnC,EAAAA,EAAAA,KAAgB1H,EAAQoB,EAAQwG,GAChD,MAAMqR,EAAevB,GAAWwB,EAAAA,EAAAA,KAA8BlZ,EAAQoB,EAAQwG,EAAU8P,QAAYpO,EAWpG,GATIsO,GAAc/N,GAAaoP,IACxBA,EAAapX,UAAUsX,EAAAA,EAAAA,IAA4BtP,EAAWoP,KACjEjZ,GAAS6H,EAAAA,EAAAA,KAAgB7H,EAAQoB,EAAQwG,EAAUqR,GACnDpP,GAAYnC,EAAAA,EAAAA,KAAgB1H,EAAQoB,EAAQwG,GAC5C5H,GAASoZ,EAAAA,EAAAA,KAAmBpZ,EAAQoB,EAAQwG,EAAUqR,GACtDrB,GAAa,KAIZC,EAAiB,CACpB,MAAMwB,EAAazB,GAAcqB,EAAeA,EAAepP,EAC/D,GAAIwP,EAAY,CACd,MAAM,eAAE/Q,GAAmBgR,GAAiBD,EAAY3B,EAAUC,GAClE3X,GAASuZ,EAAAA,EAAAA,KAAuBvZ,EAAQoB,EAAQwG,EAAUU,EAAgBjE,EAC5E,CACF,CAEIsU,IACF3Y,GAAS2I,EAAAA,EAAAA,KAAiB3I,EAAQoD,EAAKd,GAAIsF,EAAU,CACnDgB,cAAe+P,MAInB5N,EAAAA,EAAAA,IAAU/K,GACV8X,KACF,CA8CA,SAASwB,GACPE,EACA9B,EACAC,GAEA,MAAM,OAAE9V,GAAW2X,EACbC,EAAQ/B,EArBhB,SAA0B8B,EAAqB9B,GAC7C,OAAIA,EAAW8B,EAAU,GAChB,EAGL9B,EAAW8B,EAAUA,EAAU3X,OAAS,GACnC2X,EAAU3X,OAAS,EAGrB2X,EAAUE,UAAU,CAACpX,EAAI+C,IAC9B/C,IAAOoV,GACHpV,EAAKoV,GAAY8B,EAAUnU,EAAI,GAAKqS,EAE5C,CAQ2BiC,CAAiBH,EAAW9B,IAAa,EAG5DkC,EAFcjC,IAAcO,EAAAA,GAAkBC,UAEZsB,EAASA,EAAQ,GAAM5X,EACzDmW,EAFWL,IAAcO,EAAAA,GAAkBE,OAEpBzX,KAAK0X,MAAMJ,EAAAA,IAAqB,GAAKA,EAAAA,IAC5D4B,EAAOD,EAAoB5B,EAC3B8B,EAAKF,EAAoB5B,EAAY,EACrC1P,EAAiBkR,EAAUrC,MAAMxW,KAAKE,IAAI,EAAGgZ,GAAOC,EAAK,GAE/D,IAAIC,EACAC,EACJ,OAAQrC,GACN,KAAKO,EAAAA,GAAkBC,UACrB4B,EAAeH,GAAqB,EACpCI,EAAcH,GAAQ,EACtB,MACF,KAAK3B,EAAAA,GAAkBI,SACrByB,EAAeH,EAAoB/X,EACnCmY,EAAcF,GAAMjY,EAAS,EAC7B,MACF,KAAKqW,EAAAA,GAAkBE,OACvB,QACE2B,EAAezR,EAAezG,OAAS,EACvCmY,EAAc1R,EAAezG,SAAWoW,EAAAA,IAI5C,MAAO,CAAE3P,iBAAgByR,eAAcC,cACzC,CAEO1F,eAAe2F,GACpBja,EACAgC,GAEA,MAAMkY,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EAAM,OAEX,IAAIE,EAAAA,EAAAA,IAAcF,GAChB,OAAOA,EAAKG,kBAGd,IAAKH,GAAMG,kBAAmB,OAE9B,MAAMC,GAAWC,EAAAA,EAAAA,KAAmBva,EAAQka,EAAK5X,IACjD,OAAIgY,EACKA,EAASD,wBAGGnF,EAAAA,EAAAA,IAAQ,+BAAgCgF,EAE/D,CAEA5F,eAAekD,GACbxX,EACAoV,EACAmB,GAGA,GADAiE,QAAQC,IAAIrF,GACPpV,EAAO0a,WAAWC,iBAkBrBC,MAAM5a,EAAO0a,WAAWG,cAAgB,8CAhBxC,SADqBC,EAAAA,EAAIC,aAAa/a,EAAQoV,GAc5CwF,MAAM5a,EAAO0a,WAAWG,cAAgB,8CAZxC,GAAKzF,EAAWQ,oBAET,CACL,MAAM5U,QAAgBkU,EAAAA,EAAAA,IAAQ,mBAAoBE,GAC9CpU,GACFuV,EAAc9K,KAAK,IACd2J,EACH4F,aAAcha,GAGpB,MATEia,GAAYjb,EAAQoV,EAgB5B,CAEAd,eAAe2G,GAAmCjb,EAAWuX,GAM3D,IAAI2D,GAJA3D,EAAO9Q,WAAa0U,EAAAA,WAChBC,EAAAA,EAAAA,MAIR,MAAMC,EAAmB9D,EAAO+D,WAAa,CAACC,EAAkBtX,KACzDgQ,GAAwBvJ,IAAIzG,KAC/BiX,EAAoBjX,EACpBgQ,GAAwBuH,IAAIvX,EAAYoX,IAG1Crb,GAASmL,EAAAA,EAAAA,MACTnL,GAASyb,EAAAA,EAAAA,IAAyBzb,EAAQiE,EAAYsX,IACtDxQ,EAAAA,EAAAA,IAAU/K,SACRsJ,QACE4L,EAAAA,EAAAA,IAAQ,cAAeqC,EAAQ8D,GACjCA,GAAoBH,IACtBlb,GAASmL,EAAAA,EAAAA,MACTnL,GAASyb,EAAAA,EAAAA,IAAyBzb,EAAQkb,OAAmB5R,IAC7DyB,EAAAA,EAAAA,IAAU/K,GAEViU,GAAwByH,OAAOR,GAEnC,CA0SA5G,eAAeqH,GAA2C3b,EAAWoB,EAAgBsW,GACnF,MAAMtU,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE9R,OAAMsU,aAE5D,IAAKe,EAAQ,OAEb,MAAM,SAAEnI,GAAamI,EAEfzP,GAAOkG,EAAAA,EAAAA,IAAqBoB,EAAU,MACtCvG,EAAMjC,OAAO4G,KAAK1F,GAAM4F,IAAIhE,QAElC5K,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+Y,EAAAA,EAAAA,KAAoB/Y,EAAQoD,EAAKd,GAAI0G,GAC9ChJ,GAAS4b,EAAAA,EAAAA,KAAkB5b,EAAQoB,EAAQgC,EAAM2G,IAEjDgB,EAAAA,EAAAA,IAAU/K,EACZ,EAp5DA+L,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,UACJ+F,EAAYO,EAAAA,GAAkBE,OAAM,gBACpCP,GAAkB,EAAK,kBACvBgE,GAAoB,EAAK,SACzB/D,EAAQ,QACRgE,EAAO,MACPzX,GAAQC,EAAAA,EAAAA,OACNsN,GAAW,CAAC,EAEhB,IAAI,OAAExQ,EAAM,SAAEwG,GAAagK,GAAW,CAAC,EAEvC,IAAKxQ,IAAWwG,EAAU,CACxB,MAAM+E,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAC5D,IAAKsI,EAEH,YADAmP,MAIF1a,EAASuL,EAAmBvL,OAC5BwG,EAAW+E,EAAmB/E,QAChC,CAEA,MAAMxE,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAEhC,IAAKgC,GAAQA,EAAK2Y,aAEhB,YADAD,MAIF,MAAME,GAAczT,EAAAA,EAAAA,KAAkBvI,EAAQoB,EAAQwG,EAAUvD,GAC1DwF,GAAYnC,EAAAA,EAAAA,KAAgB1H,EAAQoB,EAAQwG,GAElD,GAAKoU,GAAgBA,EAAYna,QAAU8V,IAAcO,EAAAA,GAAkBE,OAuBpE,CACL,MAAMV,EAAWC,IAAcO,EAAAA,GAAkBC,UAAY6D,EAAY,GAAKA,EAAYA,EAAYna,OAAS,GAG/G,IAAI+D,EAAAA,EAAAA,IAAiB8R,GAAW,OAGhC,GAAIA,IAAa9P,GAAY+P,IAAcO,EAAAA,GAAkBC,UAAW,OAExE,MAAMP,EAAaxB,QAAQvM,IAAcA,EAAUpF,SAASiT,IACtD2B,EAAczB,GAChBsB,EAAAA,EAAAA,KAA8BlZ,EAAQoB,EAAQwG,EAAU8P,GAAY7N,EACxE,GAAIwP,GAAYxX,OAAQ,CACtB,MAAM,eACJyG,EAAc,aAAEyR,EAAY,YAAEC,GAC5BV,GAAiBD,EAAY3B,EAAUC,GAEvCoC,IACF/Z,GAASuZ,EAAAA,EAAAA,KAAuBvZ,EAAQoB,EAAQwG,EAAUU,EAAgBjE,KAG5Ea,EAAAA,EAAAA,IAAU,MAyBhBoP,eACEtU,EACAmD,EACA6W,EAAsBpC,EAAqBC,EAC3CzU,EAAewE,EAAoB+P,EAA8BD,EACjEI,MACIzT,GAAQC,EAAAA,EAAAA,QAEP0V,SACG3I,GACJrR,EAAQoD,EAAMwE,EAAU8P,EAAUC,EAAWC,EAAYC,EAAiBC,EAAUzT,GAInFwT,GACH1U,EAAQkO,qBAAqB,CAC3BjQ,OAAQgC,EAAKd,GAAIsF,WAAU+P,YAAWE,iBAAiB,EAAMC,WAAUzT,SAG7E,CA3Ca4X,CACHjc,EACAmD,EACA6W,EACApC,EACAC,EACAzU,EACAwE,EACA+P,EACAD,EACAI,EACAzT,IAGN,CAEA,GAAIwT,EACF,MAEJ,KAhEmF,CACjF,MAAMH,GAAWwE,EAAAA,EAAAA,KAAuBlc,EAAQoB,EAAQiD,KAAU8X,EAAAA,EAAAA,KAAqBnc,EAAQoB,EAAQwG,GACjGgQ,EAAaxB,QAAQsB,GAAY7N,IAAcA,EAAUpF,SAASiT,IAClE2B,GAAczB,GAChBsB,EAAAA,EAAAA,KAA8BlZ,EAAQoB,EAAQwG,EAAU8P,GACxD7N,IAAc,IACZ,eACJvB,EAAc,aAAEyR,EAAY,YAAEC,GAC5BV,GAAiBD,EAAY3B,EAAUQ,EAAAA,GAAkBE,QAEzD2B,IACF/Z,GAASuZ,EAAAA,EAAAA,KAAuBvZ,EAAQoB,EAAQwG,EAAUU,EAAgBjE,IAGvE2V,EAOHlC,OANA5S,EAAAA,EAAAA,IAAU,KACHmM,GACHrR,EAAQoD,EAAMwE,EAAU8P,EAAUQ,EAAAA,GAAkBE,OAAQR,EAAYC,EAAiBC,EAAUzT,IAM3G,EA2CA0G,EAAAA,EAAAA,IAAU/K,EAAQ,CAAEoc,sBAAuBP,OAwB7C9P,EAAAA,EAAAA,IAAiB,cAAeuI,MAAOtU,EAAQmD,EAASyO,KACtD,MAAM,OACJxQ,EAAM,UAAE6F,EAAS,iBAAEoV,EAAgB,aAAEnV,GACnC0K,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMpC,QAwzCRsT,eACEtU,EAAWoD,EAAe6D,EAAmBoV,GAE7C,MAAM5D,QAAevD,EAAAA,EAAAA,IAAQ,eAAgB,CAAE9R,OAAM6D,cACrD,GAAKwR,EAAL,CAIA,GAAIA,IAAW6D,EAAAA,GAkBf,OAJAtc,GAASmL,EAAAA,EAAAA,MACTnL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoD,EAAKd,GAAI2E,EAAWwR,EAAOzX,UAC9D+J,EAAAA,EAAAA,IAAU/K,GAEHyY,EAAOzX,QAjBZ,GAAIqb,EAAkB,CACpBrc,GAASmL,EAAAA,EAAAA,MACT,MAAMoR,GAAetX,EAAAA,EAAAA,KAAkBjF,EAAQoD,EAAKd,GAAI+Z,GACxDrc,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoD,EAAKd,GAAI+Z,EAAkB,IACzDE,EACH9V,eAAW6C,KAEbyB,EAAAA,EAAAA,IAAU/K,EACZ,CAXF,CAqBF,CAn1CwBgH,CAAYhH,EAAQoD,EAAM6D,EAAWoV,GAC3D,GAAIrb,GAAWkG,EAAc,CAC3B,MAAM,cAAEC,EAAa,WAAEX,GAAeU,EACtClH,GAASmL,EAAAA,EAAAA,MAETnL,GAAS+G,EAAAA,EAAAA,KACP/G,EACAgB,EACAI,EACA+F,EACAX,IAEFuE,EAAAA,EAAAA,IAAU/K,EACZ,KAGF+L,EAAAA,EAAAA,IAAiB,cAAeuI,MAAOtU,EAAQmD,EAASyO,KACtD,MAAM,YAAE4K,EAAW,MAAEnY,GAAQC,EAAAA,EAAAA,OAAsBsN,GAE7C,QAAEnF,EAASzK,OAAQya,IAAgBC,EAAAA,EAAAA,KAAyB1c,EAAQqE,GACpEsY,EAAevG,QAAQ3J,GAAWgQ,GAExC,IAAKD,IAAgBG,EACnB,OAGF,IAAI,OAAEvb,EAAM,SAAEwG,EAAQ,KAAExF,GAASoa,GAAe,CAAC,EASjD,GARIG,IACFvb,EAASqb,EACT7U,EAAWD,EAAAA,GACXvF,EAAO,UAGTwP,GAAU7B,EAAAA,EAAAA,IAAK6B,EAAS,CAAC,UAEZ,cAATxP,IAAyBwP,EAAQkE,YAKnC,OAJA9V,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B4c,qBAAsBhL,GACrBvN,QACH0G,EAAAA,EAAAA,IAAU/K,GAIZ,MAAMoD,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BoT,GAAQ8B,EAAAA,EAAAA,KAAYtW,EAAQoB,EAASwG,GACrCiV,GAAe3c,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOsR,iBAAiB5G,YAAYlN,OAE1Eib,EAAkBD,GAAiBF,OAAkCrT,EAAnBkL,GAAO/N,UAEzD0F,EAAiBwQ,EAAe,CACpCva,KAAM,QACNJ,OAAQya,EACRhQ,QAASA,QAC0BnD,EAE/ByT,GAAmBjI,EAAAA,EAAAA,KAAuB9U,EAAQoB,EAASwG,EAAWkV,GAEtErW,EAAY0F,GAAkB4Q,EAE9BpW,GAAa8D,EAAAA,EAAAA,KAAiBzK,EAAQoB,EAASwG,GAC/CT,EAAgBS,IAAaD,EAAAA,IAC/BuB,EAAAA,EAAAA,KAAwBlJ,EAAQoB,GAAWuF,GAAYQ,cAErDyO,QAA4BqE,GAAuBja,EAAQoB,GAE3DmW,EAA4B,IAC7B3F,EACHxO,OACAqD,YACAuW,WAAWC,EAAAA,EAAAA,KAAgBjd,EAAQoB,EAASwG,GAC5CyO,QAAQ3U,EAAAA,EAAAA,KAAa1B,EAAQoB,GAC7B+F,gBACAyO,sBACA+G,eACAnJ,YAAWoC,QAA6BtM,GAGrCqT,GACHxZ,EAAQ+Z,oBAAoB,CAAE7Y,UAGhC,MAAM8Y,IAAavL,EAAQwL,aAAexL,EAAQwL,YAAYvb,QAAU,KAAOgb,EACzEQ,GAAaF,GAAYvL,EAAQ0L,oBACjC/G,EAAqC,GAE3C,GAAI4G,EAAU,CACZ,MAAM,YAAEC,KAAgBG,GAAehG,EACjCnC,EAAgC,IACjCmI,EACHjC,WAAY8B,EAAcA,EAAY,QAAK9T,EAC3C2C,WAAYmK,QAAQ5B,UAEhBgD,GAAyBxX,EAAQoV,EAAYmB,EACrD,MAAO,GAAI8G,EAAW,CACpB,MAAM,KACJzP,EAAI,SAAE0J,EAAQ,YAAE8F,KAAgBI,GAC9BjG,EACEkG,EA6wEV,SAAgCL,GAC9B,OAAOA,EAAYM,OAAO,CAACC,EAAKrC,EAAY7B,EAAOmE,IACnC,IAAVnE,GACFkE,EAAIlS,KAAK,CAAC6P,IACHqC,IAGIE,GAAkBvC,KACVuC,GAAkBD,EAAInE,EAAQ,IAEjDkE,EAAIA,EAAI9b,OAAS,GAAG4J,KAAK6P,GAEzBqC,EAAIlS,KAAK,CAAC6P,IAGLqC,GACN,GACL,CA9xEmBG,CAAuBV,GAEtC,IAAIW,GAAiB,EACrB,IAAK,IAAIC,EAAa,EAAGA,EAAaP,EAAO5b,OAAQmc,IAAc,CACjE,MAAMC,EAAQR,EAAOO,GACfE,GAAqBC,EAAAA,EAAAA,IAAMF,EAAOG,EAAAA,KACxC,IAAK,IAAI/Y,EAAI,EAAGA,EAAI6Y,EAAmBrc,OAAQwD,IAAK,CAClD,MAAMgZ,EAAY,GAAG5b,KAAKC,QAAQsb,IAAa3Y,IAEzCiZ,EAAgB,IAANjZ,GAA0B,IAAf2Y,EACrBO,EAASlZ,IAAM6Y,EAAmBrc,OAAS,GAAKmc,IAAeP,EAAO5b,OAAS,EAErF,GAAIoc,EAAM,GAAGO,QAAUP,EAAM,GAAGQ,iBAAkB,CAChD,MAAOC,KAAoBC,GAAmBT,EAAmB7Y,GAEjE,IAAI+P,EAAgC,IAC/BoI,EACH5P,KAAM0Q,IAAYP,EAAiBnQ,OAAOtE,EAC1CgO,SAAUgH,IAAYP,EAAiBzG,OAAWhO,EAClDgS,WAAYoD,EACZL,UAAWM,EAAgB9c,OAAS,EAAIwc,OAAY/U,EACpD2C,WAAYmK,QAAQ5B,UAEhBgD,GAAyBxX,EAAQoV,EAAYmB,GAEnDwH,GAAiB,EAEjB,IAAK,MAAMzC,KAAcqD,EACvBvJ,EAAa,IACRoI,EACHlC,aACA+C,mBAEI7G,GAAyBxX,EAAQoV,EAAYmB,EAEvD,KAAO,CACL,MAAMqI,EAAmBV,EAAmB7Y,GAAG8R,MAAM,GAAI,GACnD0H,EAAiBX,EAAmB7Y,GAAG6Y,EAAmB7Y,GAAGxD,OAAS,GAC5E,IAAK,MAAMyZ,KAAcsD,EAAkB,CACzC,MAAMxJ,EAAa,IACdoI,EACHlC,aACA+C,mBAEI7G,GAAyBxX,EAAQoV,EAAYmB,EACrD,CAEA,MAAMnB,EAAa,IACdoI,EACH5P,KAAM2Q,IAAWR,EAAiBnQ,OAAOtE,EACzCgO,SAAUiH,IAAWR,EAAiBzG,OAAWhO,EACjDgS,WAAYuD,EACZR,UAAWO,EAAiB/c,OAAS,EAAIwc,OAAY/U,EACrD2C,WAAYmK,QAAQ5B,UAEhBgD,GAAyBxX,EAAQoV,EAAYmB,GAEnDwH,GAAiB,CACnB,CACF,CACF,CACF,KAAO,CACL,MAAM,KACJnQ,EAAI,SAAE0J,EAAQ,YAAE8F,EAAa3W,UAAWqY,KAA2BtB,GACjEjG,EAEJ,GAAI3J,EAAM,CACR,MAAMwH,EAAa,IACdoI,EACH5P,OACA0J,WACA7Q,UAAWqY,EACX7S,WAAYmK,QAAQ5B,UAEhBgD,GAAyBxX,EAAQoV,EAAYmB,EACrD,CAEA,GAAI6G,EACF,IAAK,MAAM9B,KAAc8B,EAAa,CACpC,MAAMhI,EAAa,IACdoI,EACHlC,oBAEI9D,GAAyBxX,EAAQoV,EAAYmB,EACrD,CAEJ,CACA,GAAIsG,EAAc,CAChB,MAAMkC,QAAsB5J,GAAuBnV,EAAQuX,EAAQlT,GAC/D0a,GACFxI,EAAc9K,QAAQsT,EAE1B,CACIxI,GAAe1U,QAuxCrByS,eACEtU,EACAoV,GAEA,MAAMhS,EAAOgS,EAAW,IAAIhS,KAC5B,IAAKA,IAASgS,EAAWvT,OAAQ,OACjC,MAAMmd,QAA2B/E,GAAuBja,EAAQoD,EAAKd,IACrE,IAAK0c,EAEH,YADAC,EAAAA,EAAAA,MAAaC,aAAa,CAAE9J,eAG9B,MAAM+J,EAAoB/J,EAAWsI,OAAO,CAAC3T,EAAKwN,KAChD,GAAIA,EAAOyD,cAAc1Y,GACvByH,EAAI0B,KAAK8L,EAAOyD,aAAa1Y,SACxB,GAAIiV,EAAOF,6BAA6Bd,cAAe,CAC5D,MAAM6I,EAAetX,OAAOC,OAAOwP,EAAOF,4BAA4Bd,eACnE3H,IAAKyQ,GAAqBA,EAAiB/c,IAC3CR,OAAOsU,SACVrM,EAAI0B,QAAQ2T,EACd,CACA,OAAOrV,GACN,IAEGgV,EAAgB3J,EAAW,IAAIiC,6BAA6Bd,cAC5D+I,EAAelK,EAAW,IAAI4F,cAC9B+D,GAAiBjX,OAAOC,OAAOgX,GAAe,GACpD,IAAKO,EAAc,OAEnB,MAAM1W,EAAgBuW,EAAkBtd,OAElC0d,EAAiBnK,EAAW,GAClC,IAAIoK,EACJ,GAA0B,IAAtBpK,EAAWvT,QAAgB0d,EAAe5C,aAAc,CAC1D,MAAM,IAAE8C,EAAG,QAAE1Z,EAAO,WAAEX,GAAema,EAEjCE,EACFD,EAAmB,CAAE/P,IAAK,4BAA6BiQ,UAAW,CAAE/G,MAAO,GAAK/F,QAAS,CAAE+M,YAAa,IAC/F5Z,EACTyZ,EAAmB,CAAE/P,IAAK,2BACjBrK,IACToa,EAAmB,CAAE/P,IAAK,4BAE9B,CAEA,MAAMmQ,EAAoCJ,GAAoB,CAC5D/P,IAAK,4BACLiQ,UAAW,CAAE/G,MAAO/P,GACpBgK,QAAS,CAAE+M,YAAa/W,KAG1BqW,EAAAA,EAAAA,MAAaC,aAAa,CAAE9J,gBAE5B6J,EAAAA,EAAAA,MAAazP,iBAAiB,CAC5BF,SAASpL,EAAAA,EAAAA,IAAcob,GACvB5P,MAAOkQ,EACP5e,QAAS,CACPyO,IAAK,2BACLiQ,UAAW,CAAEG,QAAQC,EAAAA,EAAAA,IAAkBC,EAAAA,EAAAA,MAAoBf,EAAqBpW,KAElFoX,KAAM,OACNC,qBAAqB,EACrB7d,KAAM,eAEV,CAt1C6B8d,CAA6BlgB,EAAQuW,MAGlExK,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM,OAAExQ,EAAM,QAAE+e,EAAO,MAAE9b,GAAQC,EAAAA,EAAAA,OAAsBsN,EACjDwO,GAAeC,EAAAA,EAAAA,KAAmBrgB,EAAQoB,GAChD,IAAKgf,GAAcE,WACjB,OAEF,MAAMC,EAA0B,GAehC,aAdMC,QAAQC,IAAIN,EAAQvR,IAAK8R,IAC7B,MAAMtd,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQ0gB,GAChC,IAAKtd,EACH,OAEF,MAAMud,GAAeC,EAAAA,EAAAA,KAAgBhM,EAAAA,EAAAA,KAAW5U,EAAQ0gB,IAIxD,OAHIC,GACFJ,EAAc9U,KAAKkV,GAEd1F,GAAYjb,EAAQ,CACzBoD,OACAwK,KAAMwS,EAAaE,gBAGhBnd,EAAQqM,iBAAiB,CAC9BxO,SAAS6f,EAAAA,EAAAA,IAAa,yCAA0CN,EAAcO,KAAK,OACnFzc,aAIJ0H,EAAAA,EAAAA,IAAiB,cAAe,CAAC/L,EAAQmD,EAASyO,KAChD,MAAM,YACJ4K,EAAW,KAAE5O,EAAI,SAAE0J,EAAQ,YAAE8F,EAAW,MAAE/Y,GAAQC,EAAAA,EAAAA,OAChDsN,EAEJ,IAAK4K,EACH,OAGF,IAAItB,EACJ,MAAMG,EAAmB+B,EAAc,CAAC7B,EAAkBtX,KACnDgQ,GAAwBvJ,IAAIzG,KAC/BiX,EAAoBjX,EACpBgQ,GAAwBuH,IAAIvX,EAAYoX,IAG1Crb,GAASmL,EAAAA,EAAAA,MACTnL,GAASyb,EAAAA,EAAAA,IAAyBzb,EAAQiE,EAAYsX,IACtDxQ,EAAAA,EAAAA,IAAU/K,SACRsJ,GAEE,OAAElI,EAAM,SAAEwG,EAAUxF,KAAMuN,GAAoB6M,EAC9CpZ,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BJ,GAAU+f,EAAAA,EAAAA,KAAqB/gB,EAAQoB,EAAQwG,EAAU+H,GAC1DvM,GAASpC,IAIdmC,EAAQ6d,aAAa,CAAE/Z,eAAWqC,EAAWjF,UAE7C,iBACQ6Q,EAAAA,EAAAA,IAAQ,cAAe,CAC3B9R,OACApC,UACAsa,WAAY8B,EAAcA,EAAY,QAAK9T,EAC3CsE,OACA0J,WACA0F,WAAWC,EAAAA,EAAAA,KAAgBjd,EAAQoB,EAAQwG,IAC1CyT,GAECA,GAAoBH,IACtBlb,GAASmL,EAAAA,EAAAA,MACTnL,GAASyb,EAAAA,EAAAA,IAAyBzb,EAAQkb,OAAmB5R,IAC7DyB,EAAAA,EAAAA,IAAU/K,GAEViU,GAAwByH,OAAOR,GAElC,EAjBD,OAoBFnP,EAAAA,EAAAA,IAAiB,WAAY,CAAC/L,EAAQmD,EAASyO,KAC7C,MAAM,OACJxQ,EAAM,KAAE6f,EAAI,UAAEha,GACZ2K,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAC7C7D,GAASpC,IAIdkU,EAAAA,EAAAA,IAAQ,WAAY,CAClB9R,OACApC,UACAigB,YAIJlV,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,OAAExQ,EAAM,UAAE6F,GAAc2K,EAExB5Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAClD,IAAKjG,EAAS,OAEd,MAAMqa,EAAmBra,GAAWiT,GAAwBzT,KAAI0D,EAAAA,EAAAA,IAAclD,IAC1Eqa,IACF6F,EAAAA,EAAAA,IAAkB7F,IAGhB5S,EAAAA,EAAAA,IAAezH,IACjBmC,EAAQsL,UAAU,CAChB,QAAS,iBACT1E,IAAK,CAAC9C,GACN7F,cAKN2K,EAAAA,EAAAA,IAAiB,YAAa,CAAC/L,EAAQmD,EAASyO,KAC9C,MAAM,OACJxQ,EAAM,SAAEwG,EAAQ,KAAEgG,GAChBgE,EACExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKwM,IAASxK,EACZ,OAGF,MAAM+d,GAAe7K,EAAAA,EAAAA,KAAYtW,EAAQoB,EAAQwG,GAE7CxE,EAAKge,cAAgBD,GAAc1a,WAUvC8N,GAAU,CACRvU,SAAQoB,SAAQwG,WAAU4M,MAPD,CACzB5G,OACAnH,UAAW0a,GAAc1a,UACzB4a,SAAUF,GAAcE,eAQ5BtV,EAAAA,EAAAA,IAAiB,aAAc,CAAC/L,EAAQmD,EAASyO,KAC/C,MAAM,OACJxQ,EAAM,SAAEwG,EAAWD,EAAAA,GAAc,YAAE8M,EAAW,gBAAE6M,GAC9C1P,EACEuP,GAAe7K,EAAAA,EAAAA,KAAYtW,EAAQoB,EAAQwG,GACjD,IAAKuZ,EACH,OAGF,MAAMI,EAAmBJ,EAAa1a,UAMtC8N,GAAU,CACRvU,SAAQoB,SAAQwG,WAAU4M,MALW8M,GAAmBC,EAAmB,CAC3E9a,UAAW8a,QACTjY,EAGyCmL,mBAI/C1I,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,SAAsBzB,GAAW+O,EAC3CjF,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAC5D,IAAKsI,EACH,OAGF,MAAM,OAAEvL,EAAM,SAAEwG,GAAa+E,EAEvBwU,GAAe7K,EAAAA,EAAAA,KAAYtW,EAAQoB,EAAQwG,GAE3C4Z,EAAmB,CACvBpf,KAAM,aACH+e,GAAc1a,aACd5D,GAGA2e,EAAiB3a,cAOtB0N,GAAU,CACRvU,SAAQoB,SAAQwG,WAAU4M,MAND,IACtB2M,EACH1a,UAAW+a,GAIgC/M,aAAa,EAAMC,mBAAmB,OAIrF3I,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5CjF,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAC5D,IAAKsI,EACH,OAEF,MAAM,OAAEvL,EAAM,SAAEwG,GAAa+E,EACvBvJ,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAE1B+f,GAAe7K,EAAAA,EAAAA,KAAYtW,EAAQoB,EAAQwG,GACjD,GAAIxE,GAAMge,cAAgBD,GAAc1a,UACtC,OAEF,MAAMsO,EAAkCoM,GAAcvT,KAAmB,IACpEuT,EACH1a,eAAW6C,QAFgDA,EAK7DiL,GAAU,CACRvU,SAAQoB,SAAQwG,WAAU4M,MAAOO,EAAUN,YAAa2B,QAAQrB,QAIpEhJ,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,OACJxQ,EAAM,SAAEwG,EAAQ,SAAEyZ,GAChBzP,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1B+f,GAAe7K,EAAAA,EAAAA,KAAYtW,EAAQoB,EAAQwG,GAC7CxE,GAAMge,cAAgBD,GAAc1a,WASxC8N,GAAU,CACRvU,SAAQoB,SAAQwG,WAAU4M,MANX,IACZ2M,EACHE,YAI2C5M,aAAa,EAAMC,mBAAmB,OAIrF3I,EAAAA,EAAAA,IAAiB,+BAAgC,CAAC/L,EAAQmD,EAASyO,KACjE,MAAM,OAAE5P,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC1D,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByhB,uBAAwBzf,GACvBqC,MA8CL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,OAAExQ,EAAM,SAAEwG,EAAQ,UAAEoV,GAAcpL,EAExC,OAAOpJ,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwG,EAAU,YAAaoV,MAGnEjR,EAAAA,EAAAA,IAAiB,aAAc,CAAC/L,EAAQmD,EAASyO,KAC/C,MAAM,OACJxQ,EAAM,UAAE6F,EAAS,QAAEya,EAAO,UAAEC,EAAS,SAAE9L,GACrCjE,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC3BgC,IAIA8R,EAAAA,EAAAA,IAAQ,aAAc,CACzB9R,OAAM6D,YAAWya,UAASC,YAAW9L,gBAIzC9J,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,OAAExQ,EAAM,SAAEwG,GAAagK,EACvBxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EACH,aAGI8R,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE9R,OAAMwE,aAE1C5H,GAASmL,EAAAA,EAAAA,MACT,MAAMwF,GAAYC,EAAAA,EAAAA,KAAgB5Q,EAAQoB,EAAQwG,GAClD+I,GAAWzO,QAASI,IAClBtC,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAAE+N,UAAU,MAE7DrQ,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoD,EAAKd,GAAIqF,EAAAA,GAAgB,YAAa,KAC1EoD,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,WACJ7C,EAAU,mBAAE6S,EAAoBpF,YAAaqF,EAAkB,MAAExd,GAAQC,EAAAA,EAAAA,OACvEsN,EACEjF,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GACtDmY,EAAcqF,GAAsBlV,EAC1C,IAAK6P,EACH,OAEF,MAAM,OAAEpb,EAAM,SAAEwG,GAAa4U,EACvBpZ,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1B0gB,EAAqB/S,EAAWjN,OAAQQ,IAC5C,MAAMtB,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQkB,GAClD,OAAOtB,KAAYyH,EAAAA,EAAAA,IAAezH,KAIpC,IAAK8gB,EAAmBjgB,QAAUkN,EAAWlN,OAE3C,YADAiI,EAAe9J,GAAQ+hB,EAAAA,EAAAA,IAAc3e,KAAS4e,EAAAA,EAAAA,IAAiB5e,GAAQhC,OAASkI,EAAWyF,EAAY5L,IAIpG+R,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE9R,OAAM2L,WAAY+S,EAAoBF,uBAEvE,MAAMK,GAAYC,EAAAA,EAAAA,KAAgBliB,EAAQoB,EAAQwG,GAC9Cqa,GAAalT,EAAWtK,SAASwd,IACnC9e,EAAQ6d,aAAa,CAAE/Z,eAAWqC,EAAWjF,aAIjD0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAE5CuQ,GAAgBjiB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO8d,cACpD,OAAKA,GAAkBA,EAActgB,QAErCsgB,EAAcjgB,QAASiQ,IACrB,GAA0B,gBAAtBA,EAAa/P,KAAwB,CACvC,MAAMiI,EAAS8H,EAAaiQ,cACxB/X,IAAWgY,MAAMC,QAAQjY,IAE3BlH,EAAQkH,EAAOA,QAAQA,EAAOuH,SAEhCzO,EAAQof,oBAAoB,CAAEjT,QAAS6C,EAAa7C,QAASjL,SAC/D,IAEKrE,GAZ6CA,KAetD+L,EAAAA,EAAAA,IAAiB,2BAA4B,CAAC/L,EAAQmD,EAASyO,KAC7D,MAAM,OACJxQ,EAAM,OAAEY,GACN4P,EACExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1B8Y,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,IAE3BkT,EAAAA,EAAAA,IAAQ,2BAA4B,CAAE9R,OAAM8W,YAGnDnO,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,WAAE7C,EAAU,MAAE1K,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC5CjF,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAC5D,IAAKsI,EACH,OAGF,MAAM,OAAEvL,GAAWuL,EACbvJ,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,IAE3B8T,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE9R,OAAM2L,eAEhD,MAAMkT,GAAYO,EAAAA,EAAAA,KAAyBxiB,EAAQoB,GAC/C6gB,GAAalT,EAAWtK,SAASwd,IACnC9e,EAAQ6d,aAAa,CAAE/Z,eAAWqC,EAAWjF,aAIjD0H,EAAAA,EAAAA,IAAiB,gBAAiBuI,MAAOtU,EAAQmD,EAASyO,KACxD,MAAM,OAAExQ,EAAM,mBAAEwgB,EAAkB,MAAEvd,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC5DxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EACH,aAGI8R,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE9R,OAAMwe,uBAEvC5hB,GAASmL,EAAAA,EAAAA,MACT,MAAMsX,GAAa7V,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAChDoe,GAAcA,EAAWrhB,SAAWA,GACtC+B,EAAQuf,SAAS,CAAEpgB,QAAIgH,EAAWjF,UAIpC,MAAMse,EAAU3iB,EAAO4iB,YAAY5Z,KACnClB,OAAOC,OAAO4a,GAASzgB,QAAS2gB,IAC9B,GAAIA,EAAOC,gBAAgBre,SAASrD,IAAWyhB,EAAOE,eAAete,SAASrD,GAAS,CACrF,MAAM4hB,EAAqBH,EAAOC,gBAAgBhhB,OAAQQ,GAAOA,IAAOlB,GAClE6hB,EAAmBJ,EAAOE,eAAejhB,OAAQQ,GAAOA,IAAOlB,GAE/D8hB,EAAgB,IACjBL,EACHC,gBAAiBE,EACjBD,cAAeE,IAGjB/N,EAAAA,EAAAA,IAAQ,iBAAkB,CACxB5S,GAAIugB,EAAOvgB,GACX6gB,aAAcD,GAElB,OAIJnX,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM,OAAExQ,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsBsN,EACxCxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EACH,aAGI8R,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE9R,SAEtCpD,GAASmL,EAAAA,EAAAA,MACT,MAAMsX,GAAa7V,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAChDoe,GAAcA,EAAW7a,WAAaxG,GACxC+B,EAAQuf,SAAS,CAAEpgB,QAAIgH,EAAWjF,aAItC0H,EAAAA,EAAAA,IAAiB,iBAAkBuI,MAAOtU,EAAQmD,EAASyO,KACzD,MAAM,WACJ7C,EAAU,YAAEqU,EAAc,GAAE,OAAEC,EAAS,GAAE,OAAEjiB,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OACzDsN,EACExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAE1BkiB,QAAiBpO,EAAAA,EAAAA,IAAQ,iBAAkB,CAC/CgF,KAAM9W,EAAM2L,aAAYqU,cAAaC,WAGvC,IAAKC,EAAU,OAEf,MAAM,OAAE7K,EAAM,MAAE/E,GAAU4P,EAE1B,GAAI5P,IAAU6P,EAAAA,IAMZ,OALApgB,EAAQqM,iBAAiB,CACvBxO,SAAS6f,EAAAA,EAAAA,IAAa,qCACtBxc,eAEFlB,EAAQqgB,iBAAiB,CAAEnf,UAI7B,GAAKoU,EAAL,CAEA,GAAoB,aAAhBA,EAAOrW,KAQT,OAPAe,EAAQqM,iBAAiB,CACvBxO,QAASyX,GACLoI,EAAAA,EAAAA,IAAa,2BACb,2EACJxc,eAEFlB,EAAQqgB,iBAAiB,CAAEnf,UAI7B,GAAoB,iBAAhBoU,EAAOrW,KAAyB,CAClCpC,GAASmL,EAAAA,EAAAA,MACT,MAAMsY,GAAcvjB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOqf,aAAaC,SACzDC,EAAiBH,IAAcA,EAAY5hB,OAAS,IAAI+Q,SAASpP,KAAMqgB,GAAMA,EAAER,SAAWA,GAC1FS,EAAa,CACjBpU,MAAO+I,EAAO/I,MACdkD,QAAS6F,EAAO7F,QAChBmR,SAAUH,GAAgBhW,MAE5B5N,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B0jB,YAAa,CACXtiB,SACA2N,aACAqU,cACAY,QAAS,UACTL,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzDzf,IACH0G,EAAAA,EAAAA,IAAU/K,EACZ,CAEA,GAAoB,YAAhByY,EAAOrW,KAAoB,CAC7BpC,GAASmL,EAAAA,EAAAA,MACT,MAAMsY,GAAcvjB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOqf,aAAaC,SACzDC,EAAiBH,IAAcA,EAAY5hB,OAAS,IAAI+Q,SAASpP,KAAMqgB,GAAMA,EAAER,SAAWA,GAC1FS,EAAa,CACjBG,WAAYxL,EAAOwL,WACnBZ,OAAQ5K,EAAO4K,OACf3T,MAAOkU,GAAgBhW,MAEzB5N,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B0jB,YAAa,CACXtiB,SACA2N,aACAqU,cACAY,QAAS,UACTL,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzDzf,IACH0G,EAAAA,EAAAA,IAAU/K,EACZ,CArDmB,KAwDrB+L,EAAAA,EAAAA,IAAiB,oBAAqBuI,MAAOtU,EAAQmD,EAASyO,KAC5D,MAAM,OAAEvH,EAAM,OAAEjJ,EAAM,SAAEwG,GAAagK,EACrC,GAA+B,yBAA3B5R,EAAOkkB,gBAA4C,OACvD,IAAI/iB,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAAS,OAE1C,MAAMgC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,GAAQA,EAAKge,YAAa,OAC/B,MAAMzM,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQoB,GAC5BuT,KAASwP,EAAAA,EAAAA,IAAUxP,KAASE,EAAAA,EAAAA,IAAcF,WAExCO,EAAAA,EAAAA,IAAQ,oBAAqB,CACjCgF,KAAM9W,EAAMwE,WAAUyC,cAI1B0B,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,cAAEwS,EAAa,OAAEhjB,EAAM,WAAE2N,GAAe6C,EACxCsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQokB,GAC1BhhB,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC3B8Y,GAAS9W,IAIT8R,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEgF,OAAM9W,OAAM2L,kBAGlDhD,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAAS,OACvC,MAAM,MAAEmQ,EAAK,MAAE9L,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEvCjF,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAC5D,IAAKsI,EACH,OAGF,MAAM,OAAEvL,EAAM,SAAEwG,GAAa+E,EACvBvJ,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,IAAQsI,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU5H,EAAOiC,eACrD,OAGFkS,GAAwB,MACjBe,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC9R,OAAMwE,WAAUuI,YAIhB/O,IAAW6Q,EAAAA,MACbjS,EAAS,IACJA,EACHkS,qBAAsBlS,EAAOkS,qBAAqBtD,IAAKuD,GAC9CA,EAAapO,UAAYoO,EAAa7P,IAAM6N,EAAQ,IAAKgC,EAAcpO,UAAU,GAAUoO,KAKxG,MAAM6J,GAAczT,EAAAA,EAAAA,KAAkBvI,EAAQoB,EAAQwG,EAAUvD,GAC1DigB,GAAQnc,EAAAA,EAAAA,KAAoBnI,EAAQoB,EAAQwG,GAElD,GAAIA,IAAaD,EAAAA,KAAmBvE,EAAKgG,QAIvC,OAHST,EAAAA,EAAAA,KAAiB3I,EAAQoB,EAAQwG,EAAU,CAClDwI,uBAAwBD,IAK5B,IAAK6L,IAAgBsI,IAAUlhB,EAAKqE,YAClC,OAAOzH,EAGT,MAAMukB,EAikDR,SAAwBxa,EAAe8P,EAAcC,GAEnD,GAAmB,IAAf/P,EAAIlI,QAAgBgY,EAAO9P,EAAI,IAAM+P,EAAK/P,EAAIA,EAAIlI,OAAS,GAAI,OAEnE,IAAI8W,EAAQ,EAEZ,IAAK,IAAItT,EAAI,EAAGmf,EAAIza,EAAIlI,OAAQwD,EAAImf,IAC9Bza,EAAI1E,IAAMwU,GAAQ9P,EAAI1E,IAAMyU,GAC9BnB,MAGE5O,EAAI1E,IAAMyU,IALuBzU,KAUvC,OAAOsT,CACT,CAllDoB8L,CAAezI,EAAasI,EAAOnU,GACrD,IAAKoU,EACH,OAAOvkB,EAGT,MAAMmJ,GAAQgB,EAAAA,EAAAA,KAAYnK,EAAQoB,EAAQwG,GAC1C,GAAIxE,EAAKgG,SAAWD,EAAO,CACzBnJ,GAAS2I,EAAAA,EAAAA,KAAiB3I,EAAQoB,EAAQwG,EAAU,CAClDwI,uBAAwBD,IAE1B,MAAMuU,EAAsB/jB,KAAKE,IAAI,EAAGsI,EAAM1B,YAAc8c,GAM5D,OAL4B,IAAxBG,IACF1kB,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCqG,YAAa9G,KAAKE,IAAI,EAAGuC,EAAKqE,YAAc,OAGzC8B,EAAAA,EAAAA,KAAYvJ,EAAQoB,EAAQwJ,OAAOhD,GAAW,CACnDH,YAAaid,GAEjB,CAEA,OAAO5hB,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAChCgP,uBAAwBD,EACxB1I,YAAa9G,KAAKE,IAAI,EAAGuC,EAAKqE,YAAc8c,QAIhDxY,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,WAAE7C,EAAU,MAAE1K,GAAQC,EAAAA,EAAAA,MAAiB,2BAAEqgB,GAA+B/S,EAExExO,GAAOwhB,EAAAA,EAAAA,KAAkB5kB,EAAQqE,GAClCjB,IAIA8R,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE9R,OAAM2L,eACtC8V,KAAK,KACAF,GACFxhB,EAAQ2hB,qBAAqB,CAAE1jB,OAAQgC,EAAKd,UAKpDyJ,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM,KAAEhE,EAAI,MAAEvJ,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEtCmT,QAAuB7P,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEtH,SAE9D5N,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B+kB,kBACC1gB,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,IAAK1R,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO0gB,eAInC,OAAOhX,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+kB,oBAAgBzb,GACfjF,MAGL0H,EAAAA,EAAAA,IAAiB,eAAgB,CAAC/L,EAAQmD,EAASyO,KACjD,MAAM,OAAExQ,EAAM,UAAE6F,EAAS,QAAE2L,GAAYhB,EACjCxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAE5BgC,IACG8R,EAAAA,EAAAA,IAAQ,eAAgB,CAAE9R,OAAM6D,YAAW2L,eAIpD7G,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,OAAExQ,EAAM,UAAE6F,EAAS,aAAE+d,EAAY,eAAEC,GAAmBrT,EACtDxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAC5ChF,EAAgBjC,EAAOiC,cAEvBijB,EAAclkB,GAAS2E,QAAQsb,KACrC,IAAKiE,IAAgBjjB,IAAkBmB,EACrC,OAGF,MAAM+hB,EAAqBD,EAAYE,aAAe,GAChDC,EAAuBF,EAAmBvW,IAAK0W,GAAMA,EAAEC,QAEvDC,EAAiB,IAAIL,GACrBziB,GAAMyK,EAAAA,EAAAA,MAEZ6X,EAAa9iB,QAASqjB,IACfF,EAAqB5gB,SAAS8gB,IACjCC,EAAe/Z,KAAK,CAClB8Z,SACAE,YAAaxjB,EACbyjB,YAAahjB,MAKnB,MAAMijB,EAAmBH,EAAe1jB,OAAQwjB,IAAOL,EAAexgB,SAAS6gB,EAAEC,SAE3EK,EAAa,IACd5kB,EAAQ2E,QACXsb,KAAM,IACDiE,EACHE,YAAaO,IAIXpgB,EAAqC,IACtCvE,EACH2E,QAASigB,GAGX5lB,EAASsF,EAAqBtF,EAAQoB,EAAQJ,EAAQsB,GAAIiD,IAC1DwF,EAAAA,EAAAA,IAAU/K,IAEVkV,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE9R,OAAM6D,UAAWjG,EAAQsB,GAAI0iB,eAAcC,sBAE9ElZ,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,OACJxQ,EAAM,MAAEykB,EAAK,UAAE5e,GACb2K,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAC7C7D,GAASpC,IAIdkU,EAAAA,EAAAA,IAAQ,iBAAkB,CACxB9R,OACApC,UACA6kB,aAIJ9Z,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,OAAExQ,EAAM,UAAE6F,GAAc2K,EACxBxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAE5BgC,IACG8R,EAAAA,EAAAA,IAAQ,eAAgB,CAAE9R,OAAM6D,YAAW2L,QAAS,QAI7D7G,EAAAA,EAAAA,IAAiB,YAAa,CAAC/L,EAAQmD,EAASyO,KAC9C,MAAM,OAAExQ,EAAM,UAAE6F,GAAc2K,EACxBxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAC5CiF,EAAOlL,IAAW8kB,EAAAA,EAAAA,KAAsB9lB,EAAQgB,GAClDoC,GAAQ8I,IACLgJ,EAAAA,EAAAA,IAAQ,YAAa,CAAE9R,OAAM6D,YAAWiF,YAIjDH,EAAAA,EAAAA,IAAiB,wBAAyBuI,MAAOtU,EAAQmD,EAASyO,KAChE,MAAM,KACJxO,EAAI,UAAE6D,EAAS,OAAEoc,EAAM,OAAE0C,EAAM,MAAErN,EAAK,kBAAEsN,EAAiB,MAAE3hB,GAAQC,EAAAA,EAAAA,OACjEsN,EAEE6G,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD9R,OAAM6D,YAAWoc,SAAQ0C,SAAQrN,UAGnC,IAAKD,EACH,OAGFzY,GAASmL,EAAAA,EAAAA,MAET,MAAM2C,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,IAClC,YAAE4hB,GAAgBnY,GAClB,OAAEoY,GAAWpY,EAASmY,YAE5BjmB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BimB,YAAa,IACRA,EACHC,OAAQ,IACHA,EACH,CAAC7C,IAASvX,EAAAA,EAAAA,IAAO,KACVka,GAAqBE,IAAS7C,GAAU6C,EAAO7C,GAAU,MAC3D5K,EAAO0N,MAAMvX,IAAKwX,GAASA,EAAKpkB,WAGvCqkB,QAAS,IACHJ,EAAYI,QAAUJ,EAAYI,QAAU,CAAC,EACjD,CAAChD,GAAS5K,EAAO6N,YAAc,MAGlCjiB,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,OAAExQ,EAAM,IAAE2I,GAAQ6H,EAClBxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC5BgC,IACG8R,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE9R,OAAM2G,WAI/CgC,EAAAA,EAAAA,IAAiB,uBAAwBuI,MAAOtU,EAAQmD,EAASyO,KAC/D,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAAS,OAEvC,MAAM,OAAEoB,GAAWwQ,EACbxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE9R,SACxD,IAAKqV,EACH,OAGF,MAAM,SAAEnI,GAAamI,EAEfzP,GAAOkG,EAAAA,EAAAA,IAAqBoB,EAAU,MACtCvG,EAAMjC,OAAO4G,KAAK1F,GAAM4F,IAAIhE,QAAQ/F,KAAK,CAACC,EAAGC,IAAMA,EAAID,GAS7D,GAPA9E,GAASmL,EAAAA,EAAAA,MACTnL,GAASumB,EAAAA,EAAAA,KAAwBvmB,EAAQoD,EAAKd,GAAI0G,GAClDhJ,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoD,EAAKd,GAAIqF,EAAAA,GAAgB,eAAgBoC,GACxEA,EAAIlI,SACP7B,GAASsO,EAAAA,EAAAA,KAAmBtO,EAAQoD,EAAKd,GAAI,CAAEiM,sBAAsB,KAGnEnL,GAAMgG,QAAS,CACjB,MAAMod,EAAiD,CAAC,EACxDlW,EAASpO,QAASlB,IAChB,MAAM4G,GAAW4B,EAAAA,EAAAA,KAA0BxJ,EAAQgB,GAC7CylB,EAAoBD,EAAmB5e,IAAa,GAC1D6e,EAAkBhb,KAAKzK,EAAQsB,IAC/BkkB,EAAmB5e,GAAY6e,IAGjC3e,OAAO4I,QAAQ8V,GAAoBtkB,QAAQ,EAAE0F,EAAUuG,MACrDnO,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoD,EAAKd,GAAIsI,OAAOhD,GAAW,eAAgBuG,IAEnF,EACApD,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,OACJxQ,EAAM,GAAEkB,GACNsP,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAE3BgC,IAIA8R,EAAAA,EAAAA,IAAQ,wBAAyB,CACpC9R,OACA2G,IAAK,CAACzH,QAIVyJ,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,OACJxQ,EAAM,UAAE6F,EAAS,YAAE6O,GACjBlE,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BJ,EAAUoC,IAAQsC,EAAAA,EAAAA,KAAuB1F,EAAQoD,EAAKd,GAAI2E,GAC3D7D,GAASpC,IAITkU,EAAAA,EAAAA,IAAQ,oBAAqB,CAChC9R,OACApC,UACA8U,mBAIJ/J,EAAAA,EAAAA,IAAiB,kBAAmBuI,MAAOtU,EAAQmD,EAASyO,KAC1D,MAAM,UAAE3K,EAAS,OAAE7F,GAAWwQ,EAExBxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAEhC,IAAKgC,EAAM,OAEXpD,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ6F,EAAW,CACpDsM,gBAAiB,MAGnBxI,EAAAA,EAAAA,IAAU/K,GAEV,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE9R,OAAM6D,cAExDjH,GAASmL,EAAAA,EAAAA,MACTnL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ6F,EAAW,CACpDsM,gBAAiBkF,EACjBiO,sBAAuBjO,KAGzB1N,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,IAAE7H,EAAG,YAAE4c,GAAgB/U,EACvBgV,EAAoBD,EAAc5c,GACpC+B,EAAAA,EAAAA,IAAO/B,EAAIjI,OAAQ+kB,IAAgB7mB,EAAO8mB,aAAa9d,KAAK6d,KAC1DE,QAAoB7R,EAAAA,EAAAA,IAAQ,mBAAoB,CACpD2R,WAAYD,IAETG,IAEL/mB,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACH8mB,aAAc,IACT9mB,EAAO8mB,aACV9d,KAAM,IACDhJ,EAAO8mB,aAAa9d,SACpBkG,EAAAA,EAAAA,IAAqB6X,EAAa,UAI3Chc,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,SACJiE,EAAQ,YAAEC,EAAW,MAAEzR,GAAQC,EAAAA,EAAAA,OAC7BsN,GACE,SAAE0D,IAAapV,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOsR,gBAC7CQ,EAASb,GAAW/N,EAAAA,EAAAA,KAAWvH,EAAQsV,QAAYhM,EACpD6M,GACLhB,GAAuBnV,EAAQ,CAAEoD,KAAM+S,EAAQN,WAAUC,eAAezR,MA4a1E0H,EAAAA,EAAAA,IAAiB,eAAgBuI,MAAOtU,EAAQmD,EAASyO,KACvD,MAAM,WAAEwD,GAAexD,QACjB4O,QAAQC,IAAIrL,EAAWxG,IAAI0F,UAC3BiD,EAAOF,6BAA+BE,EAAOH,qBACzCgE,EAAAA,EAAAA,YACAlG,EAAAA,EAAAA,IAAQ,qBAAsBqC,EAAOH,sBAErC6D,GAAYjb,EAAQuX,MAG1BnC,EAAWvT,OAAS,GAAKuT,EAAW,GAAGQ,qBAAqBzS,EAAQ6jB,oBAG1Ejb,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM,OAAExQ,EAAM,SAAEwG,GAAagK,EACvBxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,IAAQsI,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU5H,EAAOiC,eACrD,OAGF,MAAMwW,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE9R,OAAMwE,aAC5D,IAAK6Q,EACH,OAGF,MAAM,SAAEnI,GAAamI,EAEfzP,GAAOkG,EAAAA,EAAAA,IAAqBoB,EAAU,MACtCvG,EAAMjC,OAAO4G,KAAK1F,GAAM4F,IAAIhE,QAAQ/F,KAAK,CAACC,EAAGC,IAAMA,EAAID,GAE7D9E,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+Y,EAAAA,EAAAA,KAAoB/Y,EAAQoD,EAAKd,GAAI0G,GAC9ChJ,GAASinB,EAAAA,EAAAA,KAAqBjnB,EAAQoD,EAAKd,GAAIsF,EAAUmC,IACzDgB,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,aAAcuI,MAAOtU,EAAQmD,EAASyO,KACrD,MAAM,OAAExQ,EAAM,UAAE6F,GAAc2K,EACxBxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,cAAe,CAAE9R,OAAM6D,cAC/CwR,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ6F,EAAW,CACpDigB,YAAazO,KAEf1N,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,OAAExQ,EAAM,SAAE+lB,GAAavV,EACvBxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BgmB,GAAa7f,EAAAA,EAAAA,KAAWvH,EAAQmnB,KAAavS,EAAAA,EAAAA,KAAW5U,EAAQmnB,GACtE,GAAK/jB,GAASgkB,EAMd,OAFKlS,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEmB,OAAQ+Q,EAAYhkB,UAEjDikB,EAAAA,EAAAA,KAAmBrnB,EAAQoB,EAAQ,CAAE+lB,gBAG9Cpb,EAAAA,EAAAA,IAAiB,aAAcuI,MAAOtU,EAAQmD,EAASyO,KACrD,MAAM,OAAExQ,GAAWwQ,EACbxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,cAAe,CAAE9R,SAC9C,IAAKqV,EAOH,OANAzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCkmB,cAAe,UAEjBvc,EAAAA,EAAAA,IAAU/K,GAKZA,GAASmL,EAAAA,EAAAA,MACTnL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEkmB,cAAe7O,KACrD1N,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2BuI,MAAOtU,EAAQmD,EAASyO,KAClE,MAAM,OAAExQ,GAAWwQ,EACbxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,cAAe,CAAE9R,OAAMmkB,oBAAoB,IACxE,IAAK9O,EAOH,OANAzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClComB,2BAA4B,UAE9Bzc,EAAAA,EAAAA,IAAU/K,GAKZA,GAASmL,EAAAA,EAAAA,MACTnL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEomB,2BAA4B/O,KAClE1N,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,wBAAyBuI,MAAOtU,EAAQmD,EAASyO,KAChE,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAAS,OAEvC,MAAM,OAAEgC,GAAW4P,EACbsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EACH,OAGF,IAAIuN,EAAAA,EAAAA,IAAcvN,KAASwN,EAAAA,EAAAA,KAA0B1nB,EAAQka,EAAK5X,IAChE,OAGF,MAAMmW,QAAevD,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEgF,SACpDzB,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS2nB,EAAAA,EAAAA,KAAuB3nB,EAAQgC,EAAQyW,EAAOnI,SAAS,KAChEvF,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,gBAAiB,CAAC/L,EAAQmD,EAASyO,KAClD,MAAM,SAAEgW,GAAahW,GAEhBsD,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEjH,OAAQ2Z,OAGjD7b,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,SAAEgW,EAAQ,QAAEC,EAAO,aAAEC,GAAiBlW,GAEvCsD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpCjH,OAAQ2Z,EAAUC,UAASC,oBAI/B/b,EAAAA,EAAAA,IAAiB,kBAAmBuI,MAAOtU,EAAQmD,EAASyO,KAC1D,MAAM,OACJ5P,EAAM,SAAE4lB,EAAQ,OAAEvE,EAAS,GAAE,MAAEhf,GAAQC,EAAAA,EAAAA,OACrCsN,EAEE6G,QAAevD,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE0S,WAAUvE,WAEnE,GAAK5K,EAAL,CAEA,GAAoB,oBAAhBA,EAAOrW,KAGT,OAFAe,EAAQ4kB,iBAAiB,CAAEC,eAAgB,SAAU3jB,eACrDlB,EAAQ8kB,mBAAmB,CAAE5jB,UAI/B,GAAoB,aAAhBoU,EAAOrW,MAAuC,WAAhBqW,EAAOrW,KAgBvC,OAfAe,EAAQqM,iBAAiB,CACvBxO,SAAS6f,EAAAA,EAAAA,IAA6B,aAAhBpI,EAAOrW,KAAsB,aAAe,YAClEiC,UAEFlB,EAAQ8kB,mBAAmB,CAAE5jB,UAE7BrE,GAASmL,EAAAA,EAAAA,MAEPnL,EADEgC,GACOkmB,EAAAA,EAAAA,KAAuBloB,EAAQgC,IAE/BmmB,EAAAA,EAAAA,KAAmBnoB,EAAQ,CAClCooB,mBAAe9e,GACdjF,QAEL0G,EAAAA,EAAAA,IAAU/K,GAIZ,GAAoB,iBAAhByY,EAAOrW,KAAyB,CAClCpC,GAASmL,EAAAA,EAAAA,MACT,MAAMsY,GAAcvjB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOgkB,eAAe1E,SAC3DC,EAAiBH,IAAcA,EAAY5hB,OAAS,IAAI+Q,QAAQpP,KAAMqgB,GAAMA,EAAER,SAAWA,GACzFS,EAAa,CACjBpU,MAAO+I,EAAO/I,MACdkD,QAAS6F,EAAO7F,QAChBmR,SAAUH,GAAgBhW,MAE5B5N,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqoB,cAAe,CACbjnB,OAAQY,EACR4lB,WACAjE,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzDzf,IACH0G,EAAAA,EAAAA,IAAU/K,EACZ,CA5CmB,KA+CrB+L,EAAAA,EAAAA,IAAiB,gBAAiBuI,MAAOtU,EAAQmD,EAASyO,KACxD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GACrBoE,EAAAA,EAAAA,KAA2BhW,SAMnCkV,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEoT,SAAS,MAEnEtoB,GAASmL,EAAAA,EAAAA,MACTnL,GAASuoB,EAAAA,EAAAA,KAAmBvoB,EAAQA,EAAOiC,cAAgB,CACzDumB,eAAe,KAEjBzd,EAAAA,EAAAA,IAAU/K,GACVmD,EAAQqM,iBAAiB,CACvBxO,SAAS6f,EAAAA,EAAAA,IAAa,YACtBxc,WAbAlB,EAAQ4kB,iBAAiB,CAAEC,eAAgB,SAAU3jB,aAiBzD0H,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,OAAExQ,EAAM,SAAEsW,GAAa9F,QACvB+J,GAAoB3b,EAAQoB,EAAQsW,MAuB5C3L,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,OAAExQ,EAAM,WAAE2N,EAAU,MAAE1K,GAAQC,EAAAA,EAAAA,OAAsBsN,EACpDxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC3BgC,IAELpD,GAASyoB,EAAAA,EAAAA,KAAqBzoB,EAAQoB,EAAQgC,EAAM2L,GAAY,IAChEhE,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQulB,iBAAiB,CAAE3Z,aAAY1K,cAGzC0H,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,IAAIxO,GAAOwhB,EAAAA,EAAAA,KAAkB5kB,EAAQqE,GAErC,GAAKjB,EAAL,CAEA,IAAKA,EAAKulB,eAAgB,OAClBhN,GAAoB3b,EAAQoD,EAAKd,IACvCtC,GAASmL,EAAAA,EAAAA,MACT,MAAMyd,EAAiBxlB,EAAKd,GAE5B,GADAc,GAAOwhB,EAAAA,EAAAA,KAAkB5kB,EAAQqE,IAC5BjB,GAAMulB,gBAAkBC,IAAmBxlB,EAAKd,GAAI,MAC3D,CAEAa,EAAQ0J,aAAa,CAAEzL,OAAQgC,EAAKd,GAAI2E,UAAW7D,EAAKulB,eAAe,GAAItkB,SAV1D,KAanB0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,OAAExQ,EAAM,SAAEwG,EAAWD,EAAAA,IAAmBiK,EAExCxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,GAAKgC,EAIL,OAFA8R,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE9R,OAAMwE,SAAUA,IAAaD,EAAAA,QAAiB2B,EAAY1B,IAEnFA,IAAaD,EAAAA,IACR7E,EAAAA,EAAAA,KAAW9C,EAAQoD,EAAKd,GAAI,CACjCumB,yBAAqBvf,EACrBqf,oBAAgBrf,SAHpB,KAWFyC,EAAAA,EAAAA,IAAiB,UAAW,CAAC/L,EAAQmD,EAASyO,KAC5C,MAAM,IACJkX,EAAG,gBAAEC,EAAe,gBAAEC,EAAe,MAAE3kB,GAAQC,EAAAA,EAAAA,OAC7CsN,EACEqX,GAAkBC,EAAAA,EAAAA,IAAeJ,GACjCK,EAAY,IAAIC,IAAIH,GACpBI,GAAgBC,EAAAA,EAAAA,IAAiBL,GAEvC,IAAKD,IAAmBO,EAAAA,EAAAA,IAAWN,GAKjC,OAJA9lB,EAAQqmB,iBAAiB,CAAEnlB,UAC3BlB,EAAQsmB,kBAAkB,CAAEplB,eAE5BlB,EAAQumB,iBAAiB,CAAEZ,MAAKzkB,UAIlC,MAAM,UAAEslB,EAAS,OAAE3S,GAAWhX,EAC9B,GAAI2pB,EAAW,CACb,GAAI3S,GAAQ4S,gBAAkBD,EAAUE,iBAAiBplB,SAAS0kB,EAAUW,UAG1E,OAFAX,EAAUY,aAAavO,IA/9DD,kBA+9D0BxE,EAAO4S,qBACvDI,OAAOC,KAAKd,EAAUe,KAAM,SAAU,YAIxC,GAAIP,EAAUQ,eAAe1lB,SAAS0kB,EAAUW,UAI9C,OAHA3mB,EAAQqmB,iBAAiB,CAAEnlB,eAE3BlB,EAAQinB,mBAAmB,CAAEtB,MAAKzkB,SAGtC,CAE4B4kB,EAAgBtV,MAAM0W,EAAAA,MAAsBtB,EAKtEiB,OAAOC,KAAKd,EAAW,SAAU,YAFjChmB,EAAQmnB,oBAAoB,CAAExB,IAAKO,EAAgBF,EAAUoB,WAAatB,EAAiB5kB,aAuC/F0H,EAAAA,EAAAA,IAAiB,kCAAmC,CAAC/L,EAAQmD,EAASyO,KACpE,MAAQxQ,OAAQkU,EAAQ,QAAExK,EAAO,MAAEzG,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEjE5R,GAASmL,EAAAA,EAAAA,MAET,MACMqf,GADWtqB,EAAAA,EAAAA,KAAeF,EAAQqE,GACVomB,gBAE9BzqB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9ByX,0BAA0B,EAC1BgT,gBAAiB,CAAC,GACjBpmB,IACH0G,EAAAA,EAAAA,IAAU/K,GACVA,GAASmL,EAAAA,EAAAA,MAET,MAAMuf,GAAc9F,EAAAA,EAAAA,KAAkB5kB,EAAQqE,GACxC4L,GAAkBrD,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAQuD,SAEjE,IAAK8iB,IAAgBza,EAAiB,OAEtC,MAAMrI,EAAWkD,GAAWnD,EAAAA,GACtB+F,EAAgBgd,EAAYpoB,GAE5BqoB,EAAe,CACnBvoB,KAAM,UACNyE,aAAc2jB,EAAavjB,UAC3B2jB,aAAcJ,EAAa9U,WAC3BmV,cAAend,EACfod,gBAAiBN,EAAa9U,WAC9BqV,UAAWP,EAAaO,UACxBC,YAAaR,EAAaQ,aAGtBzJ,EAAmBiJ,EAAavjB,UAClC0jB,GAAerU,EAAAA,EAAAA,KAAYtW,EAAQ0N,EAAeuC,IAAkBxJ,UACxE,IAAK8a,EAAkB,OAEvB,KAAK0J,EAAAA,EAAAA,KAA2BjrB,EAAQsV,EAAU5H,EAAe6T,GAE/D,YADApe,EAAQqM,iBAAiB,CAAExO,SAAS6f,EAAAA,EAAAA,IAAa,2BAA4Bxc,UAI/E,IAAKkd,EAAiBsJ,eAAiBvV,IAAaoV,EAAYpoB,GAAI,OAEpE,MAIMuoB,EAHCtJ,GAAkBsJ,cAChBtJ,EAAiBsJ,gBAAkBvV,OAAWhM,EAAYiY,EAAiBsJ,cADrCnd,GAhEjD,SACE1N,EACA4H,EACAnB,EACA6O,GAEA,MAAM6L,GAAe7K,EAAAA,EAAAA,KAAYtW,EAAQsV,EAAU1N,GAE9CnB,EAAUI,cAOf0N,GAAU,CACRvU,SAAQoB,OAAQkU,EAAU1N,WAAU4M,MANX,IACtB2M,EACH1a,aAIqDgO,aAAa,EAAMC,mBAAmB,GAE/F,CAwDEwW,CAAoBlrB,EAAQ4H,EANe,IACtC2Z,EACHsJ,gBACAzoB,KAAM,WAGwCkT,GAChDnS,EAAQgoB,WAAW,CAAE/pB,OAAQkU,EAAU1N,WAAUvD,UACjDlB,EAAQioB,iBAAiB,CAAE/mB,UAC3BlB,EAAQkoB,sBAAsB,CAAEhnB,UAChClB,EAAQmoB,WAAW,CAAElqB,OAAQsM,EAAe9F,SAAUqI,OAGxDlE,EAAAA,EAAAA,IAAiB,wBAAyBuI,MAAOtU,EAAQmD,EAASyO,KAChE,MAAM,OAAExQ,EAAM,QAAE0J,EAAO,MAAEzG,GAAQC,EAAAA,EAAAA,OAAsBsN,EACjD+C,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQoB,IACamqB,EAAAA,EAAAA,IAAmCvrB,EAAQqE,IAC5CsQ,UAnG9CL,eACEtU,EACA2U,EACAvT,GAEA,IAAIkZ,GAAWC,EAAAA,EAAAA,KAAmBva,EAAQoB,GAC1C,IAAKkZ,EAAU,CACb,MAAM,WAAEkR,GAAe7W,EACjB8D,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5S,GAAIlB,EAAQoqB,eAC5DlR,EAAW7B,GAAQ6B,QACrB,CACA,OAAOlE,SAASkE,GAAUmR,gBAC5B,CAuF6DC,CAA4B1rB,EAAQ2U,EAAMvT,GACnG+B,EAAQwoB,WAAW,CACjBC,KAAM,CACJ5qB,SAAS6f,EAAAA,EAAAA,IAAa,oCAAoCD,EAAAA,EAAAA,IAAgBjM,KAE5EtQ,WAIJrE,GAASmL,EAAAA,EAAAA,OAEJ0gB,EAAAA,EAAAA,IAA8B7rB,EAAQoB,EAAQiD,IAKnDrE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B2V,gBAAiB,KACZzV,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOsR,gBACjCL,SAAUlU,EACVsU,WAAY5K,GAEd2M,0BAA0B,GACzBpT,IACH0G,EAAAA,EAAAA,IAAU/K,GACVmD,EAAQgoB,WAAW,CAAE/pB,SAAQwG,SAAUkD,GAAWnD,EAAAA,GAAgBtD,UAClElB,EAAQioB,iBAAiB,CAAE/mB,UAC3BlB,EAAQkoB,sBAAsB,CAAEhnB,WAf9BlB,EAAQyQ,oCAAoC,CAAExS,SAAQiD,cAkB1D0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD5R,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B2V,gBAAiB,KACZzV,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOsR,gBACjCL,SAAUtV,EAAOiC,gBAElBoC,IACH0G,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQkoB,sBAAsB,CAAEhnB,UAChClB,EAAQwS,gBAAgB,CAAEE,UAAU,EAAMxR,aAG5C0H,EAAAA,EAAAA,IAAiB,eAAgB,CAAC/L,EAAQmD,EAASyO,KACjD,MAAM,SAAE0D,EAAQ,MAAEjR,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAEtD,WAAEyD,EAAU,QAAE5I,IAAYvM,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOsR,gBACxDO,EAAWb,GAAa9N,EAAAA,EAAAA,KAAWvH,EAAQqV,QAAc/L,EACzD6M,EAASb,GAAW/N,EAAAA,EAAAA,KAAWvH,EAAQsV,QAAYhM,EACnDwiB,EAAQzW,GAAc5I,GACxBsf,EAAAA,EAAAA,KAAgB/rB,EAAQqV,EAAY5I,QACpCnD,EAEJ,IAAK4M,IAAaC,IAAW2V,GAAS,cAAeA,EACnD,OAGF,MAAM3kB,GAAgB+B,EAAAA,EAAAA,KAAwBlJ,EAAQsV,IAEhD,KAAE1H,EAAI,SAAE0J,GAAcwU,EAAmBnmB,QAAQiI,MAAQ,CAAC,EAC3DqN,GAAYjb,EAAQ,CACvBoD,KAAM+S,EACNvI,OACA0J,WACAwU,QACA3kB,kBAGFnH,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B2V,gBAAiB,CAAC,EAClB8B,0BAA0B,GACzBpT,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,4BAA6B,CAAC/L,EAAQmD,EAASyO,KAC9D,MAAM,OACJxQ,EAAM,GAAEkB,EAAE,eAAEwR,GAAiBkY,EAAAA,EAAAA,KAA0BhsB,GAAO,MAAEqE,GAAQC,EAAAA,EAAAA,OACtEsN,EAOJ,OALA5R,GAASisB,EAAAA,EAAAA,KAAkCjsB,EAAQoB,EAAQkB,EAAIwR,EAAgBzP,IACtE6nB,EAAAA,EAAAA,KAAgBlsB,EAAQ,CAC/BmsB,oBAAqBrY,OAMzB/H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,OACJxQ,EAAM,GAAEkB,EAAE,MAAE+B,GAAQC,EAAAA,EAAAA,OAClBsN,EAIJ,OAFSwa,EAAAA,EAAAA,KAAkCpsB,EAAQoB,EAAQkB,EAAI+B,MAKjE0H,EAAAA,EAAAA,IAAiB,iCAAkC,CAAC/L,EAAQmD,EAASyO,KACnE,MAAM,OACJxQ,EAAM,WAAE2N,EAAU,eAAE+E,GAAiBuY,EAAAA,EAAAA,KAAmBrsB,IACtD4R,EAQJ,OANA7C,EAAW7M,QAASI,IAClBtC,GAASssB,EAAAA,EAAAA,KAAyBtsB,EAAQoB,EAAQkB,EAAIwR,EAAgB,CACpEN,WAAW,MAIRxT,KAGT+L,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,OACJxQ,EAAM,WAAE2N,EAAU,eAAE+E,GAAiBuY,EAAAA,EAAAA,KAAmBrsB,IACtD4R,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,GAAKgC,EAUL,OARAD,EAAQopB,+BAA+B,CAAEnrB,SAAQ2N,aAAY+E,oBAE7DoB,EAAAA,EAAAA,IAAQ,gBAAiB,CACvB9R,OACA2L,aACA+E,mBAGK9T,IAKT,IAAIwsB,GACAC,GAAmD,CAAC,EAExD,SAASC,KACHF,KACFG,aAAaH,IACbA,QAAwBljB,GAG1B,MAAM,iBAAEsjB,IAAqB3N,EAAAA,EAAAA,MAC7BnX,OAAO4I,QAAQ+b,IAAqBvqB,QAAQ,EAAEd,EAAQ2I,MACpD6iB,EAAiB,CAAExrB,SAAQ2I,IAAKsY,MAAMxI,KAAK9P,GAAM8iB,iBAAiB,MAGpEJ,GAAsB,CAAC,CACzB,EACA1gB,EAAAA,EAAAA,IAAiB,4BAA6B,CAAC/L,EAAQmD,EAASyO,KAC9D,MAAM,IAAE7H,EAAG,OAAE3I,GAAWwQ,EAEnB4a,IACHthB,WAAWwhB,GArBY,KAwBpBD,GAAoBrrB,KACvBqrB,GAAoBrrB,GAAU,IAAI6I,KAGpCF,EAAI7H,QAASI,IACXmqB,GAAoBrrB,GAAQ8I,IAAI5H,QAIpCyJ,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,OAAExQ,EAAM,IAAE2I,EAAG,gBAAE8iB,GAAoBjb,EAEzC,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAAS,OAEvC,MAAMoD,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD9R,OACA2G,MACA8iB,oBAGGpU,IAELzY,GAASmL,EAAAA,EAAAA,MACTsN,EAAOqU,UAAU5qB,QAASW,IACxB7C,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQyB,EAAOP,GAAI,CACpDyqB,WAAYlqB,EAAOmqB,MACnBC,cAAepqB,EAAOqqB,WACrB,GAECrqB,EAAO8D,aACT3G,GAAS2I,EAAAA,EAAAA,KAAiB3I,EAAQoB,EAAQyB,EAAOP,GAAIO,EAAO8D,gBAIhEoE,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,iBAAkBuI,MAAOtU,EAAQmD,EAASyO,KACzD,MAAM,OAAExQ,EAAM,IAAE2I,GAAQ6H,EAElBxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C9R,OACA2G,QAGG0O,IAELzY,GAASmL,EAAAA,EAAAA,MACTsN,EAAOvW,QAAQ,CAACirB,EAAW9nB,KACzBrF,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ2I,EAAI1E,GAAI,CACjD8nB,iBAIJpiB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2B,MAC1CmJ,EAAAA,EAAAA,IAAQ,+BAIVnJ,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM,OAAExQ,EAAM,UAAE6F,GAAc2K,EAExBxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,GAAKgC,EAEL,IACE,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE9R,OAAM6D,cACxDwR,GAAQzD,OACVhV,GAASmL,EAAAA,EAAAA,MACTnL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ6F,EAAW,CAAEmmB,SAAU3U,EAAOzD,QACzEjK,EAAAA,EAAAA,IAAU/K,GAEd,CAAE,MAAO0T,GACP,MAAM,QAAE1S,GAAY0S,EAEpB,GAAgB,4BAAZ1S,GAAqD,4BAAZA,EAAuC,CAIlF,GAHAhB,GAASmL,EAAAA,EAAAA,QAEIyJ,EAAAA,EAAAA,KAAW5U,EAAQoB,GACrB,OACX,MAAMisB,GAAaC,EAAAA,EAAAA,KAAiBttB,EAAQoB,GAC5C,IAAKisB,EAAY,OAEjB,MAAME,EAA2B,4BAAZvsB,EACjB,CAAEwsB,sBAAsB,GACxB,CAAEC,0BAA0B,GAEhCztB,GAAS0tB,EAAAA,EAAAA,KAAoB1tB,EAAQ,CACnC,CAACoB,GAAS,IAAKisB,KAAeE,KAGhCvtB,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ6F,EAAW,CAAEmmB,cAAU9jB,KAClEyB,EAAAA,EAAAA,IAAU/K,EACZ,CACF,KAGF+L,EAAAA,EAAAA,IAAiB,mBAAoBuI,UACnC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,qBACxBuD,IAELzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS2tB,EAAAA,EAAAA,KAAyB3tB,GAAQkP,EAAAA,EAAAA,IAAqBuJ,EAAOnI,SAAU,OAChFtQ,GAASmP,EAAAA,EAAAA,KAAmBnP,EAAQyY,EAAOxJ,eAE3ClE,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,OAAExQ,EAAM,aAAEiO,GAAiBuC,EAC3BxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,OAAKgC,IACL8R,EAAAA,EAAAA,IAAQ,iBAAkB,CACxB9R,OACAwqB,WAAYve,IAGPrP,GANWA,KASpB+L,EAAAA,EAAAA,IAAiB,kBAAmBuI,MAAOtU,EAAQmD,EAASyO,KAC1D,MAAM,OACJxQ,EAAM,UAAE6F,EAAS,oBAAE4mB,EAAmB,qBAAEC,EAAoB,MAAEzpB,GAAQC,EAAAA,EAAAA,OACpEsN,EACExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EAKH,YAJAD,EAAQqM,iBAAiB,CACvBxO,SAAS6f,EAAAA,EAAAA,IAAa,iBACtBxc,UAIJ,MAAM0pB,EAAgCA,IAAM5qB,EAAQqM,iBAAiB,CACnExO,SAAS6f,EAAAA,EAAAA,IAAa,iBACtBxc,UAGF,KAAK0d,EAAAA,EAAAA,IAAc3e,MAAU4e,EAAAA,EAAAA,IAAiB5e,GAE5C,YADA2qB,IAGF,MAIMC,GAAkC9Y,EAAAA,EAAAA,IAAQ,oBAAqB,CACnE9R,OAAMd,GAAI2E,EAAW4mB,sBAAqBC,+BAEtCG,EAAAA,EAAAA,IACJD,EARiCE,IAAM/qB,EAAQqM,iBAAiB,CAChExO,SAAS6f,EAAAA,EAAAA,IAAa,cACtBxc,UAM6D0pB,KAIjE,MAAMI,GAA8B,IAAIja,IACxC,IAAIka,GAmHJ,SAASvQ,GAAkBvC,GACzB,MAAM,iBACJmD,EAAgB,SAAE4P,GAChB/S,EACJ,OAAIgT,EAAAA,IAA8B5jB,IAAI2jB,GAAkB,QACpD5P,EAAyB,OACzB4P,IAAaE,EAAAA,IAAsB,MACnCC,EAAAA,IAA8B9jB,IAAI2jB,IAAaI,EAAAA,IAA8B/jB,IAAI2jB,GAAkB,QACnG/S,EAAWoT,MAAc,QACtB,MACT,EA5HA3iB,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,OAAExQ,EAAM,UAAE6F,GAAc2K,EACxB+c,EAAaR,GAA4B3tB,IAAIY,IAAW,GAC9DutB,EAAWljB,KAAKxE,GAChBknB,GAA4B3S,IAAIpa,EAAQutB,GAEnCP,KAGHA,GAAwBpE,OAAO9e,WAAW,KACxCkjB,QAAwB9kB,EAExB6kB,GAA4BjsB,QAAQ,CAAC6M,EAAY6f,KAC/C,MAAMxrB,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQ4uB,GAC3BxrB,IAEL8R,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE9R,OAAM2L,iBAE5Cof,GAA4BU,SAC3B,SAIP9iB,EAAAA,EAAAA,IAAiB,iCAAkCuI,MAAOtU,EAAQmD,EAASyO,KACzE,MAAM,MACJkd,EAAK,UAAE7nB,EAAS,UAAE8nB,EAAS,MAAE1qB,GAAQC,EAAAA,EAAAA,OACnCsN,EAEEod,GAAMpa,EAAAA,EAAAA,KAAW5U,EAAQ8uB,GAC/B,IAAKE,EAAK,OAEV,MAAMvW,QAAevD,EAAAA,EAAAA,IAAQ,6BAA8B,CACzD8Z,MACA1sB,GAAI2E,IAEDwR,GAYLzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BivB,qBAAsB,CACpBjuB,QAASyX,EACTsW,YACAD,UAEDzqB,IACH0G,EAAAA,EAAAA,IAAU/K,IAnBRmD,EAAQ+rB,gBAAgB,CACtBH,YACAI,MAAO,CACLC,UAAW,0BACXC,UAAW,CAAE3b,MAAO,oBAEtBrP,aAgBN0H,EAAAA,EAAAA,IAAiB,gCAAiC,CAAC/L,EAAQmD,EAASyO,KAClE,MAAM,UACJmd,EAAS,QAAE/tB,EAAO,MAAEqD,GAAQC,EAAAA,EAAAA,OAC1BsN,EAEE0d,EAAmBtuB,EAAQuuB,WAAWztB,OAAQM,GAAuC,SAATA,GAElFpC,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BwvB,0BAA2B,CACzBT,YACAjtB,OAAQwtB,EACRtuB,YAEDqD,IACH0G,EAAAA,EAAAA,IAAU/K,K,0BCxlFZ,MAGMyvB,IAAkBC,EAAAA,EAAAA,IAAUrb,GAAOA,IAAM,KAAK,GAkiBpDC,eAAeqb,GAA0C3vB,EAAW4vB,GAClE,MAAMC,QAAuB3a,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE0a,SACzDC,IAIL7vB,GAASmL,EAAAA,EAAAA,MAETnL,EAAS,IACJA,EACH8vB,SAAU,IACL9vB,EAAO8vB,SACVC,OAAQF,KAGZ9kB,EAAAA,EAAAA,IAAU/K,GACZ,CAEAsU,eAAe0b,GACbhwB,EACAmD,EACA8sB,GAEA,IAAIC,EACJ,IACEA,QAAmBhb,EAAAA,EAAAA,IACjB,gBACA,CAAE+a,kBAEN,CAAE,MAAOvc,GACP,GAAoC,uBAA/BA,EAAmB1S,QAetB,YAdA8G,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3ClB,EAAQqM,iBAAiB,CACvBxO,SAAS6f,EAAAA,EAAAA,IAAa,6BACtBxc,UAGE,cAAe4rB,IACd/vB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO8rB,4BAA8BF,EAAeG,YAC9EpwB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BmwB,+BAA2B7mB,GAC1BjF,IACH0G,EAAAA,EAAAA,IAAU/K,KAKlB,CAGA,GAFAA,GAASmL,EAAAA,EAAAA,OAEJ+kB,EAEH,OAGF,MAAM,IAAE1U,EAAG,SAAEsU,EAAQ,MAAEO,GAAUH,EAI3BI,GAFNtwB,GAASuwB,EAAAA,EAAAA,KAAiBvwB,EAAQwb,EAAIlZ,GAAI,IAAKkZ,EAAKsU,WAAUO,WAElCP,SAASU,SAAS3iB,MAC1CyiB,GAAgBD,EAAMC,KACxBtwB,GAASywB,EAAAA,EAAAA,KAAwBzwB,KAGnC+K,EAAAA,EAAAA,IAAU/K,EACZ,CAmLAsU,eAAeoc,GAAkC1wB,EAAW2wB,EAAeC,EAAsB7K,MAC3F1hB,GAAQC,EAAAA,EAAAA,QACZ,MAAMmU,QAAevD,EAAAA,EAAAA,IAAQ,aAAc,CAAEyb,QAAO5K,SAAQ8K,SAAUD,IACjEnY,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS8wB,EAAAA,EAAAA,KAAgB9wB,GAAS+lB,EAAQtN,EAAOsY,KAAMtY,EAAO6N,WAAYjiB,IAC1E0G,EAAAA,EAAAA,IAAU/K,GACZ,EA9xBA+L,EAAAA,EAAAA,IAAiB,kBAAmBuI,MAAOtU,EAAQmD,KACjD,MAAO6tB,EAAeC,SAA2BzQ,QAAQC,IAAI,EAC3DvL,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE0a,KAAM5vB,EAAO8vB,SAASoB,MAAMtB,QAC1D1a,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE0a,KAAM5vB,EAAO8mB,aAAaoK,MAAMtB,SAE/DqB,GAAsBD,IAI3BhxB,GAASmL,EAAAA,EAAAA,MAETnL,GAASmxB,EAAAA,EAAAA,KACPnxB,EACA,QACAgxB,EAAcpB,KACdoB,EAAcI,MAGhBpxB,GAASqxB,EAAAA,EAAAA,KACPrxB,EACAixB,EAAkBrB,KAClBqB,EAAkBG,OAGpBrmB,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQmuB,iBAAiB,CACvBvnB,IAAK/J,EAAOuxB,yBAIhBxlB,EAAAA,EAAAA,IAAiB,oBAAqBuI,MAAOtU,EAAQmD,KACnD,MACE+tB,OACEM,OAAQC,EAAc,IAExBC,SAAUC,GACR3xB,EAAO8vB,UAEToB,OACEM,OAAQI,EAAoB,KAE5B5xB,EAAO8mB,aACL+K,EAAe,IAAIJ,KAAgBG,GACzC,GAAKC,EAAahwB,OAIlB,IAAK,IAAIwD,EAAI,EAAGA,EAAIwsB,EAAahwB,OAAQwD,IAAK,CAC5C,MAAM/C,EAAKuvB,EAAaxsB,GACpBssB,EAAOrvB,IAAKwtB,WAGhB3sB,EAAQ6sB,aAAa,CACnBC,eAAgB,CAAE3tB,KAAIkpB,WAAYmG,EAAOrvB,GAAIkpB,cAG3CnmB,EA7D0B,IA6DQ,GAAKA,EAAI,SACvCysB,EAAAA,EAAAA,IA/DgB,KAiE1B,KAGF/lB,EAAAA,EAAAA,IAAiB,qBAAuB/L,IACtC,MAAM,KAAE4vB,GAAS5vB,EAAO8vB,SAASC,QAAU,CAAC,EACvCJ,GAAmB3vB,EAAQ4vB,MAGlC7jB,EAAAA,EAAAA,IAAiB,uBAAwBuI,UACvC,MAAM,KAAEsb,GAAS5vB,EAAO8vB,SAASiC,UAAY,CAAC,EAExCC,QAAyB9c,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE0a,SAC7DoC,IAILhyB,GAASmL,EAAAA,EAAAA,MAETnL,EAAS,IACJA,EACH8vB,SAAU,IACL9vB,EAAO8vB,SACViC,SAAUC,KAGdjnB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,sBAAuBuI,UACtC,MAAM,KAAEsb,GAAS5vB,EAAO8vB,SAASmC,SAAW,CAAC,EAE7C,IAAI5N,EAAAA,EAAAA,KAA0BrkB,GAC5B,OAGF,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CAAErH,MAAO,OAAQ+hB,SAClEnX,IAILzY,GAASmL,EAAAA,EAAAA,MAETnL,EAAS,IACJA,EACH8vB,SAAU,IACL9vB,EAAO8vB,SACVmC,QAAS,CACPrC,KAAMnX,EAAOmX,KACbE,SAAUrX,EAAOqX,aAIvB/kB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,uBAAwBuI,UACvC,MAAM,KAAEsb,GAAS5vB,EAAO8vB,SAASoC,UAAY,CAAC,EAE9C,IAAI7N,EAAAA,EAAAA,KAA0BrkB,GAC5B,OAGF,MAAMkyB,QAAiBhd,EAAAA,EAAAA,IAAQ,wBAAyB,CAAErH,MAAO,OAAQ+hB,SACpEsC,IAILlyB,GAASmL,EAAAA,EAAAA,MAETnL,EAAS,IACJA,EACH8vB,SAAU,IACL9vB,EAAO8vB,SACVoC,SAAU,CACRtC,KAAMsC,EAAStC,KACfE,SAAUoC,EAASpC,SAAShuB,OAAQiE,GAA8B,OAAlBA,EAAQ8H,WAI9D9C,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,uBAAwBuI,UACvC,MAAM,KAAEsb,GAAS5vB,EAAO8vB,SAASqC,UAAY,CAAC,EACxCC,QAAyBld,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE0a,SAC7DwC,IAILpyB,GAASmL,EAAAA,EAAAA,MAETnL,GAASmxB,EAAAA,EAAAA,KACPnxB,EACA,WACAoyB,EAAiBxC,KACjBwC,EAAiBhB,OAEnBrmB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,mBAAoBuI,UACnC,MAAM4b,QAAmBhb,EAAAA,EAAAA,IAAQ,qBACjC,IAAKgb,EACH,OAGF,MAAM,IAAE1U,EAAG,SAAEsU,GAAaI,EAE1BlwB,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHqyB,aAAc,IAAK7W,EAAKsU,cAE1B/kB,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,wBAAyBuI,UACxC,MAAM4b,QAAmBhb,EAAAA,EAAAA,IAAQ,0BACjC,IAAKgb,EACH,OAEFlwB,GAASmL,EAAAA,EAAAA,MAET,MAAM,IAAEqQ,EAAG,SAAEsU,GAAaI,EAEpBoC,EAAU,IAAK9W,EAAKsU,YAE1B9vB,GAASuwB,EAAAA,EAAAA,KAAiBvwB,EAAQsyB,EAAQhwB,GAAIgwB,GAC9CtyB,EAAS,IACJA,EACHuyB,oBAAqBD,EAAQhwB,KAE/ByI,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,yBAA0BuI,UACzC,MAAM4b,QAAmBhb,EAAAA,EAAAA,IAAQ,4BACjC,IAAKgb,EACH,OAEFlwB,GAASmL,EAAAA,EAAAA,MAET,MAAM,IAAEqQ,EAAG,SAAEsU,GAAaI,EACpBoC,EAAU,IAAK9W,EAAKsU,YAE1B9vB,GAASuwB,EAAAA,EAAAA,KAAiBvwB,EAAQsyB,EAAQhwB,GAAIgwB,GAC9CtyB,EAAS,IAAKA,EAAQwyB,qBAAsBF,EAAQhwB,KACpDyI,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,8BAA+BuI,MAAOtU,EAAQmD,MAC7D4H,EAAAA,EAAAA,IAAU/K,GAEV,MAAM,KAAE4vB,GAAS5vB,EAAOyyB,0BAA4B,CAAC,EAE/Cha,QAAevD,EAAAA,EAAAA,IAAQ,gCAAiC,CAAE0a,SAChE,IAAKnX,EACH,OAGFzY,GAASmL,EAAAA,EAAAA,MAETnL,EAAS,IACJA,EACHyyB,yBAA0B,CACxB7C,KAAMnX,EAAOmX,KACb8C,SAAUja,EAAOia,YAGrB3nB,EAAAA,EAAAA,IAAU/K,GACV,MAAM2yB,EAAcla,EAAOia,SAAS9jB,IAAI,EAAGiY,gBAAiBA,GAE5D1jB,EAAQmuB,iBAAiB,CAAEvnB,IAAK4oB,OAGlC5mB,EAAAA,EAAAA,IAAiB,eAAgB,CAAC/L,EAAQmD,EAASyO,KACjD,MAAM,eAAEqe,GAAmBre,EACrBghB,GAAYC,EAAAA,EAAAA,KAAiB7yB,EAAQiwB,GACvC2C,GAAaA,EAAUja,QAAUia,GAAW9C,UAAUjuB,QACrDmuB,GAAahwB,EAAQmD,EAAS8sB,MAGrClkB,EAAAA,EAAAA,IAAiB,qBAAsBuI,UACrC,MAAOwe,EAAQC,SAAiBvS,QAAQC,IAAI,EAC1CvL,EAAAA,EAAAA,IAAQ,wBACRA,EAAAA,EAAAA,IAAQ,+BAEL4d,GAAWC,IAIhB/yB,GAASmL,EAAAA,EAAAA,MAETnL,GAASgzB,EAAAA,EAAAA,KAAsBhzB,EAAQ,IAAK8yB,EAAOtX,IAAKsU,SAAUgD,EAAOhD,WACzE9vB,EAAS,IACJA,EACHizB,qBAAsB,IAAKF,EAAQvX,IAAKsU,SAAUiD,EAAQjD,YAG5D/kB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,8BAA+BuI,UAC9C,MAAMwe,QAAe5d,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C+a,eAAgB,CACdG,UAAW8C,EAAAA,OAGVJ,IAIL9yB,GAASmL,EAAAA,EAAAA,MAETnL,EAAS,IACJA,EACHmzB,gBAAiB,IAAKL,EAAOtX,IAAKsU,SAAUgD,EAAOhD,YAGrD/kB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,8BAA+BuI,UAC9C,MAAMwe,QAAe5d,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C+a,eAAgB,CACdG,UAAWgD,EAAAA,OAGVN,IAIL9yB,GAASmL,EAAAA,EAAAA,MAETnL,EAAS,IACJA,EACHqzB,gBAAiB,IAAKP,EAAOtX,IAAKsU,SAAUgD,EAAOhD,YAGrD/kB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2BuI,UAC1C,MAAM4b,QAAmBhb,EAAAA,EAAAA,IAAQ,4BACjC,IAAKgb,EACH,OAEFlwB,GAASmL,EAAAA,EAAAA,MAET,MAAM,IAAEqQ,EAAG,SAAEsU,GAAaI,EAE1BlwB,EAAS,IACJA,EACHszB,oBAAqB,IAAK9X,EAAKsU,cAEjC/kB,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,gBAAiBuI,UAChC,MAAM,KAAEsb,GAAS5vB,EAAO+wB,KAAKwC,MAEvBC,QAAkBte,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE0a,SAC/C4D,IAILxzB,GAASmL,EAAAA,EAAAA,MAETnL,EAAS,IACJA,EACH+wB,KAAM,IACD/wB,EAAO+wB,KACVwC,MAAOC,KAGXzoB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,UAAWuI,MAAOtU,EAAQmD,EAASyO,KAClD,MAAM,IACJ6N,EAAG,aAAEgU,EAAY,MACjBpvB,GAAQC,EAAAA,EAAAA,OACNsN,EACE/P,EAAS7B,EAAO+wB,KAAKwC,MAAMxC,MAAMlvB,OAEjC6W,GAAQgb,EAAAA,GAAAA,GAAmB1zB,EAAQ,aACnC2zB,GAAeC,EAAAA,GAAAA,GAAmB5zB,EAAQ,aAC1C6zB,GAAY7d,EAAAA,EAAAA,KAA2BhW,GAoB7C,IAlBKyzB,GAAgB5xB,GAAUA,GAAU6W,GACvCvV,EAAQqM,iBAAiB,CACvBE,MAAOokB,EAAAA,GAA0B,2BAA4Bpb,EAAM6R,YACnEvpB,QAAS6yB,EAAYC,EAAAA,GAA0B,2CAC3CA,EAAAA,GAA0B,mCAC1BH,EAAapJ,gBACZsJ,GAAa,CAChBxpB,OAAQ,CACNA,OAAQ,mBACRuH,QAAS,CAAEvN,WAGf0vB,UAAW,YACX1vB,iBAIiB6Q,EAAAA,EAAAA,IAAQ,UAAW,CAAEuK,MAAKgU,iBAE7C,OAGFzzB,GAASmL,EAAAA,EAAAA,MACT,MAAM4lB,EAAO/wB,EAAO+wB,KAAKwC,MAAMxC,MAAMjvB,OAAO,EAAGQ,QAASA,IAAOmd,EAAInd,KAAO,GACpE0xB,EAAUP,EAAe1C,EAAO,CAACtR,KAAQsR,GAE/C/wB,EAAS,IACJA,EACH+wB,KAAM,IACD/wB,EAAO+wB,KACVwC,MAAO,IACFvzB,EAAO+wB,KAAKwC,MACfxC,KAAMiD,MAIZjpB,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,cAAe,CAAC/L,EAAQmD,EAASyO,KAChD,MAAM,QAAE7L,EAAO,MAAE1B,GAAQC,EAAAA,EAAAA,OAAsBsN,EACzCqiB,EAAUj0B,EAAO8vB,SAASiC,SAASjC,SAASjuB,OAC5C6W,GAAQgb,EAAAA,GAAAA,GAAmB1zB,EAAQ,iBACnC2zB,GAAeC,EAAAA,GAAAA,GAAmB5zB,EAAQ,iBAC1C6zB,GAAY7d,EAAAA,EAAAA,KAA2BhW,GAEzCi0B,GAAWvb,GACbvV,EAAQqM,iBAAiB,CACvBE,MAAOokB,EAAAA,GAA0B,+BAAgCpb,EAAM6R,YACvEvpB,QAAS6yB,EAAYC,EAAAA,GAA0B,+CAC3CA,EAAAA,GAA0B,uCAC1BH,EAAapJ,gBACZsJ,GAAa,CAChBxpB,OAAQ,CACNA,OAAQ,mBACRuH,QAAS,CAAEvN,WAGf0vB,UAAW,YACX1vB,UAIA0B,IACGmP,EAAAA,EAAAA,IAAQ,cAAe,CAAEnP,eAIlCgG,EAAAA,EAAAA,IAAiB,gBAAiB,CAAC/L,EAAQmD,EAASyO,KAClD,MAAM,QAAE7L,GAAY6L,EAEhB7L,IACF/F,GAASmL,EAAAA,EAAAA,MAITnL,EAAS,IACJA,EACH8vB,SAAU,IACL9vB,EAAO8vB,SACViC,SAAU,IACL/xB,EAAO8vB,SAASiC,SACnBjC,SAAU9vB,EAAO8vB,SAASiC,SAASjC,SAAShuB,OAAO,EAAGQ,QAASA,IAAOyD,EAAQzD,QAIpFyI,EAAAA,EAAAA,IAAU/K,IAELkV,EAAAA,EAAAA,IAAQ,cAAe,CAAEnP,UAASmuB,QAAQ,QAInDnoB,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,QAAE7L,GAAY6L,QAECsD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEnP,aAKtD4pB,IADSxkB,EAAAA,EAAAA,UAIXY,EAAAA,EAAAA,IAAiB,sBAAuBuI,gBACjBY,EAAAA,EAAAA,IAAQ,yBAI7BlV,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACH8vB,SAAU,IACL9vB,EAAO8vB,SACVC,OAAQ,CACND,SAAU,OAIhB/kB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,aAAEuiB,GAAiBviB,EACnBse,GAAa2C,EAAAA,EAAAA,KAAiB7yB,EAAQm0B,GAC5C,IAAKjE,EACH,OAGF,MAAM,WAAE1E,EAAU,cAAE4I,EAAa,WAAEC,GAAenE,EAC5CoE,GAAeD,GAAcje,QAAQge,IAEtClf,EAAAA,EAAAA,IAASof,EAAoC,sBAAtB,oBAA6C,CAAEH,eAAc3I,kBAG3Fzf,EAAAA,EAAAA,IAAiB,oBAAqBuI,MAAOtU,EAAQmD,EAASyO,KAC5D,MAAM,SAAE2iB,GAAa3iB,EAErB,IAAI4iB,EAAuBx0B,EAAOy0B,cAAcF,GAChD,GAAIC,GAAsBE,UACxB,OAGF10B,EAAS,IACJA,EACHy0B,cAAe,IACVz0B,EAAOy0B,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,MAIjB3pB,EAAAA,EAAAA,IAAU/K,GAEV,MAAMy0B,QAAsBvf,EAAAA,EAAAA,IAAQ,qBAAsB,CACxDqf,WACAI,YAAaH,EAAuBA,EAAqBI,QAAU,IAMrE,GAFAJ,GADAx0B,GAASmL,EAAAA,EAAAA,OACqBspB,cAAcF,IAEvCE,EAaH,OAZAz0B,EAAS,IACJA,EACHy0B,cAAe,IACVz0B,EAAOy0B,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,UAIjB3pB,EAAAA,EAAAA,IAAU/K,GAKZA,EAAS,IACJA,EACHy0B,cAAe,IACVz0B,EAAOy0B,cACV,CAACF,GAAW,CACVG,WAAW,EACXE,QAASH,EAAcG,QACvBC,SAAU,IACJL,GAAsBK,YACvBJ,EAAcI,cAKzB9pB,EAAAA,EAAAA,IAAU/K,MAsEZ+L,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,MAAE+e,EAAK,MAAEtsB,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEzC+e,GACGlB,GAAgBnb,UACnB,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEyb,UACjD,IAAKlY,EACH,OAGFzY,GAASmL,EAAAA,EAAAA,MACT,MAAM,SAAEumB,EAAQ,MAAER,GAAUlxB,EAAO8vB,SAE7BgF,EAAYrc,EAAO2Y,KAAKxiB,IAAI,EAAGtM,QAASA,GAE1C4uB,EAAMM,QACRN,EAAMM,OAAOtvB,QAASI,IACpB,IAAKwyB,EAAUrwB,SAASnC,GAAK,CAC3B,MAAM,MAAEoN,GAAUgiB,EAASpvB,IAAO,CAAC,EAC/BoN,IAASqlB,EAAAA,GAAAA,GAAYrlB,EAAOihB,IAC9BmE,EAAUzyB,QAAQC,EAEtB,IAIJtC,GAASmxB,EAAAA,EAAAA,KACPnxB,EACA,SACAyY,EAAOmX,KACPnX,EAAO2Y,MAGTpxB,GAASg1B,EAAAA,EAAAA,IAAoBh1B,EAAQyY,EAAOmX,KAAMkF,EAAWzwB,IAC7D0G,EAAAA,EAAAA,IAAU/K,QAKhB+L,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAE+e,EAAK,MAAEtsB,GAAQC,EAAAA,EAAAA,OAAsBsN,EAExB,iBAAV+e,GACJlB,GAAgB,KAEnBiB,GADA1wB,GAASmL,EAAAA,EAAAA,MACUwlB,EAAO3wB,EAAOgX,QAAQie,uBAAmB3rB,EAAWjF,QAK7E0H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAC5C,MAAE+e,EAAK,OAAE5K,IAAW7lB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO6wB,UAEnC,iBAAVvE,GACJlB,GAAgB,KAEnBiB,GADA1wB,GAASmL,EAAAA,EAAAA,MACUwlB,EAAO3wB,EAAOgX,QAAQie,kBAAmBlP,EAAQ1hB,QAK1E0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAE/D,GAAU+D,GACZ,KAAEge,GAAS5vB,EAAO8vB,SAASU,SAE5Bf,GAAgBnb,UACnBtU,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACH8vB,SAAU,IACL9vB,EAAO8vB,SACVU,SAAU,IACLxwB,EAAO8vB,SAASU,SACnB3iB,YAIN9C,EAAAA,EAAAA,IAAU/K,GAEV,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CAAErH,QAAO+hB,SAE/D5vB,GAASmL,EAAAA,EAAAA,MAEJsN,GAAUzY,EAAO8vB,SAASU,SAAS3iB,QAAUA,IAIlD7N,GAASm1B,EAAAA,EAAAA,KAAuBn1B,EAAQ6N,EAAO4K,EAAOqX,SAAUrX,EAAOmX,OAEvE7kB,EAAAA,EAAAA,IAAU/K,SAId+L,EAAAA,EAAAA,IAAiB,wBAA0B/L,IAClC,IACFA,EACH8vB,SAAU,IACL9vB,EAAO8vB,SACVU,SAAU,CAAC,OAKjBzkB,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,MAAE/D,GAAU+D,EAElB,OAAOwjB,EAAAA,EAAAA,KAA0Bp1B,EAAQ6N,MAG3C9B,EAAAA,EAAAA,IAAiB,2BAA6B/L,IACrC,IACFA,EACH8mB,aAAc,IACT9mB,EAAO8mB,aACV0J,SAAU,CAAC,OAKjBzkB,EAAAA,EAAAA,IAAiB,4BAA6BuI,UAC5C,MAAM8d,QAAyBld,EAAAA,EAAAA,IAAQ,8BAClCkd,IAILpyB,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACH8mB,aAAc,IACT9mB,EAAO8mB,aACVuO,YAAajD,EAAiBhB,KAAKxiB,IAAI,EAAGtM,QAASA,GACnD0G,KAAM,IACDhJ,EAAO8mB,aAAa9d,SACpBkG,EAAAA,EAAAA,IAAqBkjB,EAAiBhB,KAAKkE,QAAS9Z,GAAQA,EAAIsU,UAAY,IAAK,QAGxFA,SAAU,IACL9vB,EAAO8vB,SACV4B,SAAU,IACL1xB,EAAO8vB,SAAS4B,aAChBxiB,EAAAA,EAAAA,IAAqBkjB,EAAiBhB,KAAM,UAIrDrmB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,iBAAkBuI,MAAOtU,EAAQmD,EAASyO,KACzD,MAAM,eAAEqe,EAAc,kBAAEsF,EAAiB,MAAElxB,GAAQC,EAAAA,EAAAA,OAAsBsN,GACrE2jB,IAAsB1C,EAAAA,EAAAA,KAAiB7yB,EAAQiwB,UAC3CD,GAAahwB,EAAQmD,EAAS8sB,GAGtCjwB,GAASmL,EAAAA,EAAAA,MACT,MAAMqQ,GAAMqX,EAAAA,EAAAA,KAAiB7yB,EAAQiwB,GAChCzU,GAAK4U,YAIVpwB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BmwB,0BAA2B3U,EAAI4U,WAC9B/rB,IACH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2BuI,UAC1C,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,4BACxBuD,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAASw1B,EAAAA,EAAAA,KAA+Bx1B,EAAQyY,EAAOmX,KAAMnX,EAAOgd,gBACpE1qB,EAAAA,EAAAA,IAAU/K,M,4BC9xBZ,MAAMyvB,IAAkBC,EAAAA,EAAAA,IAAUrb,GAAOA,IAAM,KAAK,GAySpDC,eAAeohB,GAA6B11B,EAAqBoD,EAAe6D,GAC9E,KAAK0uB,EAAAA,GAAAA,IAAYvyB,MAAU2e,EAAAA,GAAAA,IAAc3e,GACvC,OAEF,MAAM4X,GAAe/V,EAAAA,EAAAA,KAAkBjF,EAAQoD,EAAKd,GAAI2E,GACxD,GAAI+T,EACF,OAAOA,EAET,MAAMvC,QAAevD,EAAAA,EAAAA,IAAQ,eAAgB,CAAE9R,OAAM6D,cACrD,MAAkB,oBAAXwR,OAA+BnP,EAAYmP,GAAQzX,OAC5D,EAjTA+K,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAE+e,EAAK,MAAEtsB,GAAQC,EAAAA,EAAAA,OAAsBsN,GACvC,OAAExQ,IAAWlB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOuxB,aAE7CjF,IAAUvvB,GACPquB,GAAgBnb,UACnB,MAAOuhB,EAAcC,SAAyBtV,QAAQC,IAAI,EACxDvL,EAAAA,EAAAA,IAAQ,cAAe,CAAEyb,WACzBzb,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEyb,YAGlC3wB,GAASmL,EAAAA,EAAAA,MACT,MAAM4qB,GAAqBC,EAAAA,EAAAA,KAA+Bh2B,EAAQqE,GAClE,IAAKwxB,IAAiBE,GAAuBpF,IAAUoF,EAGrD,OAFA/1B,GAASi2B,EAAAA,EAAAA,KAAiCj2B,EAAQ,CAAE+I,OAAO,GAAS1E,QACpE0G,EAAAA,EAAAA,IAAU/K,GAIZ,MAAM,iBACJk2B,EAAgB,gBAAEC,GAChBN,EAEJ71B,GAASi2B,EAAAA,EAAAA,KAAiCj2B,EAAQ,CAAE+I,OAAO,GAAS1E,GACpErE,GAASmoB,EAAAA,EAAAA,KAAmBnoB,EAAQ,CAClCo2B,aAAc,CACZC,QAASH,GAEXI,cAAe,KACVp2B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOuxB,aAAaU,cAC9CD,QAASF,GAEX/N,cAAe0N,GACdzxB,IAEH0G,EAAAA,EAAAA,IAAU/K,QAKhB+L,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,KAAEoD,EAAI,MAAE3Q,GAAQC,EAAAA,EAAAA,OAAsBsN,EACtC2kB,EAAUvhB,GAAOwhB,EAAAA,GAAAA,IAAiBxhB,GAAQA,EAEhDhV,GAASmoB,EAAAA,EAAAA,KAAmBnoB,EAAQ,CAClCy2B,QAASzhB,EACTuhB,UACA5F,MAAO,GACP+F,cAAe,KACVx2B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOuxB,aAAac,cAC9C9oB,KAAM,CACJ+oB,gBAAYrtB,EACZstB,SAAU,GACVC,aAAc,KAGjBxyB,IACH0G,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQ2zB,qBAAqB,CAAE10B,KAAM,OAAQiC,aAG/C0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,KACJxP,EAAI,QAAE20B,EAAO,yBAAEC,EAAwB,kCAAEC,EAAiC,MAAE5yB,GAAQC,EAAAA,EAAAA,OAClFsN,EAEAqlB,IACFj3B,GAASi2B,EAAAA,EAAAA,KAAiCj2B,EAAQ,CAAEsQ,UAAU,GAAQjM,IACtE0G,EAAAA,EAAAA,IAAU/K,GACVA,GAASmL,EAAAA,EAAAA,OAGX,MAAM,MACJwlB,EAAK,cAAE+F,EAAa,OAAEt1B,IACpBlB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOuxB,cAC5B,WACJe,EAAU,SAAEC,EAAQ,aAAEC,EAAY,iBAAEK,EAAgB,eAAEC,IAClDH,GAA4BN,IAAgBt0B,IAAU,CAAC,EAG7D,QAAmBkH,IAAfqtB,KAA8BA,GAAeC,GAAYA,EAAS/0B,QAAU80B,GAC9E,OAGF,MAAMvzB,EAAOhC,GAAS+Y,EAAAA,EAAAA,KAAWna,EAAQoB,QAAUkI,GA6CrDgL,eAA2DtU,EAAWuX,GAapE,MAAM,MACJoZ,EAAQ,GAAE,KAAEvuB,EAAI,QAAE20B,EAAO,WAAEK,EAAU,SAAE1f,EAAQ,WAAE2f,EAAU,KAC3Dnd,EAAI,QAAEqc,EAAO,QAAEE,EAAO,yBAAEO,EAAwB,MAAE3yB,GAAQC,EAAAA,EAAAA,OACxDiT,EACJ,IAAIkB,EAWA6e,EAEJ,GAAIpd,EAAM,CACR,MAAMqd,GAAsBriB,EAAAA,EAAAA,IAAQ,uBAAwB,CAC1DgF,OACAyW,QACAvuB,OACAsW,MAAO8e,EAAAA,IACP9f,WACA+e,UACAF,YAGIkB,GADSrd,EAAAA,EAAAA,IAAcF,IACGA,EAAK9Q,SAAU8L,EAAAA,EAAAA,IAAQ,cAAe,CACpE9R,KAAM8W,EACNyW,QACAjY,MAAOgf,EAAAA,WACJpuB,GAEEquB,EAAcC,SAAgBpX,QAAQC,IAAI,CAAC8W,EAAqBE,IAEvE,GAAIE,EAAc,CAChB,MAAM,SACJrnB,EAAQ,WAAEqmB,EAAU,aAAEE,GACpBc,GAEIC,OAAQC,EAAW,MAAElf,GAAUif,GAAU,CAAC,EAElDnf,EAAS,CACPmf,OAAQC,EACRC,iBAAkBnf,EAClBrI,WACAqmB,aACAE,eAEJ,CACF,MAYE,GAXApe,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7Cyb,QACAyG,aACA1f,WACA2f,aACA3e,MAAO8e,EAAAA,IACPp1B,OACA20B,UACAR,UACAE,aAEElN,EAAAA,EAAAA,IAAWoH,GAAQ,CACrB,MAAMoH,GAAOC,EAAAA,EAAAA,IAAiBrH,GACX,sBAAfoH,GAAM31B,KACRk1B,QA+DRhjB,eAAsCtU,EAAqB+3B,GACzD,MAAM,SAAElH,EAAQ,UAAE5pB,GAAc8wB,EAC1BE,GAAYC,EAAAA,EAAAA,KAAqBl4B,EAAQ6wB,GAC/C,GAAIoH,EACF,OAAOvC,GAA6B11B,EAAQi4B,EAAWhxB,GAEzD,MAAM,KAAE7D,SAAe8R,EAAAA,EAAAA,IAAQ,oBAAqB2b,IAAa,CAAC,EAClE,OAAKztB,EAGEsyB,GAA6B11B,EAAQoD,EAAM6D,QAHlD,CAIF,CA1E4BkxB,CAAuBn4B,EAAQ+3B,GAC3B,uBAAfA,GAAM31B,OACfk1B,QA0ER,SAAiCt3B,EAAqB+3B,GACpD,MAAM,UAAEtlB,EAAS,UAAExL,GAAc8wB,EAC3BK,GAAoBC,EAAAA,EAAAA,IAAY5lB,GAChCrP,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQo4B,GAChC,GAAKh1B,EAGL,OAAOsyB,GAA6B11B,EAAQoD,EAAM6D,EACpD,CAlF4BqxB,CAAwBt4B,EAAQ+3B,GAExD,CAGF/3B,GAASmL,EAAAA,EAAAA,MAEL6rB,IACFh3B,GAASmoB,EAAAA,EAAAA,KAAmBnoB,EAAQ,CAClC02B,cAAe,MACTx2B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOuxB,cAAgB,CAAC,GAAGc,cACtD,CAACt0B,QAAOkH,IAETjF,IAEL,MAAM0xB,GAAqBC,EAAAA,EAAAA,KAA+Bh2B,EAAQqE,GAClE,IAAKoU,GAAqB,KAAVkY,GAAgBA,IAAUoF,EAGxC,OAFA/1B,GAASi2B,EAAAA,EAAAA,KAAiCj2B,EAAQ,CAAEsQ,UAAU,GAASjM,QACvE0G,EAAAA,EAAAA,IAAU/K,GAIRs3B,IACF7e,EAAOke,WAAale,EAAOnI,SAASjO,QAAQi1B,IAG9C,MAAM,SACJhnB,EAAQ,iBAAEioB,EAAgB,WAAE5B,EAAU,eAAEQ,EAAc,aAAEN,EAAY,iBAAEK,GACpEze,EAEA8f,IACFv4B,GAASw4B,EAAAA,EAAAA,KAAgBx4B,EAAQu4B,IAG/BjoB,EAASzO,SACX7B,GAASyN,EAAAA,EAAAA,KAAYzN,EAAQsQ,IAG/BtQ,GAASy4B,EAAAA,EAAAA,KACPz4B,EACAsQ,EACAqmB,EACAv0B,EACA+0B,EACAN,EACAK,EACA7yB,GAGEoU,EAAOmf,SACT53B,GAAS04B,EAAAA,EAAAA,KAAa14B,EAAQka,EAAM5X,GAAImW,EAAOqf,iBAAmBrf,EAAOmf,SAG3E,MAAMe,EAAelgB,EAAOmf,QAAQhpB,IAAI,EAAGtM,QAASA,GAAIuC,KAAK,CAACC,EAAGC,IAAMA,EAAID,GAC3E9E,GAASmoB,EAAAA,EAAAA,KAAmBnoB,EAAQ,CAClC44B,cAAeD,GACdt0B,IAEH0G,EAAAA,EAAAA,IAAU/K,EACZ,CAtLE82B,CAAqB92B,EAAQ,CAC3B2wB,QACAvuB,OACA20B,UACAC,2BACAI,WAAYD,EACZzf,SAAUmf,EACVQ,WATiBH,GAAmB/c,EAAAA,EAAAA,KAAWna,EAAQk3B,QAAoB5tB,EAU3E4Q,KAAM9W,EACNiB,aAIJ0H,EAAAA,EAAAA,IAAiB,uBAAwBuI,MAAOtU,EAAQmD,EAASyO,KAC/D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5CinB,GAAiB34B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOuxB,aAAaiD,eAC5D9S,EAAS8S,GAAgBvS,WAC/B,GAAIuS,GAAgBxC,UAAYtQ,EAAQ,OAExC/lB,GAASi2B,EAAAA,EAAAA,KAAiCj2B,EAAQ,CAAE84B,SAAS,GAAQz0B,IACrE0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE6Q,WAGtD,GADA/lB,GAASmL,EAAAA,EAAAA,OACJsN,EAGH,OAFAzY,GAASi2B,EAAAA,EAAAA,KAAiCj2B,EAAQ,CAAE84B,SAAS,GAASz0B,QACtE0G,EAAAA,EAAAA,IAAU/K,GAIZA,GAASmoB,EAAAA,EAAAA,KAAmBnoB,EAAQ,CAClC64B,eAAgB,CACdxC,QAAS,IAAKwC,GAAgBxC,SAAW,MAAQ5d,EAAO4d,SACxD/P,WAAY7N,EAAO6N,aAEpBjiB,GACHrE,GAASi2B,EAAAA,EAAAA,KAAiCj2B,EAAQ,CAAE84B,SAAS,GAASz0B,IAEtE0G,EAAAA,EAAAA,IAAU/K,K,gBCuHZsU,eAAeykB,GACb/4B,EACAka,EACAtS,EACAxF,EACAsV,EACAG,GAAkB,EAClBU,MACIlU,GAAQC,EAAAA,EAAAA,QAEZ,MAAM00B,EAAezgB,EAAgBvY,EAAOiC,cAAiBiY,EAAK5X,GAE5DmW,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDgF,OACA9X,OACAsW,MAA4B,EAArBugB,EAAAA,GACPrxB,WACA8P,WACAa,kBAGF,IAAKE,EACH,OAGF,MAAM,iBACJ8f,EAAgB,SAAEjoB,EAAQ,WAAEqmB,EAAU,aAAEE,GACtCpe,EAEEzP,GAAOkG,EAAAA,EAAAA,IAAqBoB,EAAU,MACtC4oB,EAAcpxB,OAAO4G,KAAK1F,GAAM4F,IAAIhE,QAE1C5K,GAASmL,EAAAA,EAAAA,OAEaguB,EAAAA,EAAAA,KAA+Bn5B,EAAQqE,KAK7DrE,GAASw4B,EAAAA,EAAAA,KAAgBx4B,EAAQu4B,GACjCv4B,GAAS+Y,EAAAA,EAAAA,KAAoB/Y,EAAQg5B,EAAchwB,GACnDhJ,GAASo5B,EAAAA,EAAAA,KACPp5B,EAAQg5B,EAAcpxB,EAAUxF,EAAM82B,EAAavC,EAAYE,EAAcxyB,IAE/E0G,EAAAA,EAAAA,IAAU/K,GAEL6X,GACEkhB,GAAkB/4B,EAAQka,EAAMtS,EAAUxF,EAAMy0B,GAAc,EAAMte,EAAelU,GAE5F,EA5RA0H,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,MACJ+e,EAAK,OAAEvvB,EAAM,SAAEwG,EAAWD,EAAAA,GAAc,MAAEtD,GAAQC,EAAAA,EAAAA,OAChDsN,GAAW,CAAC,EAEhB,IAAKxQ,EAAQ,OAEb,MAAMa,EAAgBjC,EAAOiC,cACvBsW,GAAgB7M,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU3F,GACnDuW,EAAaD,EAAgB1M,OAAOjE,GAAYxG,EAEhD8Y,EAAO1B,GAAa2B,EAAAA,EAAAA,KAAWna,EAAQwY,QAAclP,EAC3D,IAAI+vB,GAAgBC,EAAAA,EAAAA,KAA0Bt5B,EAAQqE,GACtD,IAAK6V,EACH,OAGGmf,IACHr5B,GAASu5B,EAAAA,EAAAA,KAAmBv5B,EAAQwY,EAAY5Q,EAAU,CAAC,EAAGvD,IAC9D0G,EAAAA,EAAAA,IAAU/K,GACVA,GAASmL,EAAAA,EAAAA,OAEXkuB,GAAgBC,EAAAA,EAAAA,KAA0Bt5B,EAAQqE,GAElD,MAAM,QACJ9C,EAAO,SAAEi4B,EAAQ,KAAEp3B,EAAI,UAAEq3B,GACvBJ,EACEK,EAAoBn4B,GAASovB,QAAUA,EAEvCjZ,EAAWgiB,EAAoBn4B,GAASs1B,kBAAevtB,EACvD8tB,EAAasC,EAAoBn4B,GAAS41B,oBAAiB7tB,EAC3DqwB,EAAeD,EAAoBn4B,GAAS21B,sBAAmB5tB,EAC/D+tB,EAAaqC,GAAqBC,GAAepyB,EAAAA,EAAAA,KAAWvH,EAAQ25B,QAAgBrwB,EAG1F,IADwBmwB,IAAcD,KACd7I,EAKtB,OAJA3wB,GAASu5B,EAAAA,EAAAA,KAAmBv5B,EAAQwY,EAAY5Q,EAAU,CACxDgyB,mBAAetwB,GACdjF,QACH0G,EAAAA,EAAAA,IAAU/K,GASZ,IAAIyY,EAmCJ,GAxCAzY,GAASu5B,EAAAA,EAAAA,KAAmBv5B,EAAQwY,EAAY5Q,EAAU,CACxDgyB,cAAejJ,GACdtsB,IACH0G,EAAAA,EAAAA,IAAU/K,GAGG,SAAToC,IACFqW,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7CgF,OACA9X,KAAM,OACNuuB,MAAO8I,EAAY,IAAI9I,IAAUA,EACjC/oB,WACA8Q,MAAOmhB,EAAAA,IACPniB,WACAa,gBACAihB,cAIS,YAATp3B,IACFqW,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7C9S,KAAM,OACNuuB,MAAO8I,EAAY,IAAI9I,IAAUA,EACjCjY,MAAOmhB,EAAAA,IACPniB,WACA0f,aACAC,gBAIS,aAATj1B,IACFqW,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CAC3C4kB,QAASnJ,EACTjY,MAAOmhB,EAAAA,IACPniB,WACA2f,aACAD,iBAIC3e,EACH,OAGF,MAAM,iBACJ8f,EAAgB,SAAEjoB,EAAQ,WAAEqmB,EAAU,aAAEE,EAAY,eAAEM,EAAc,iBAAED,GACpEze,EAEEygB,EAAc5oB,EAAS1B,IAAImrB,GAAAA,GAEjC/5B,GAASmL,EAAAA,EAAAA,MAETkuB,GAAgBC,EAAAA,EAAAA,KAA0Bt5B,EAAQqE,GAClD,MAAM21B,EAAgBX,GAAeG,YAAaS,EAAAA,EAAAA,IAAeT,EAAUH,EAAcG,UAEzF,IAAKH,GADoBA,GAAeO,gBAAkBjJ,GAChBqJ,EACxC,OAGF,MAAMhB,EAAezgB,EAAgBtW,EAAgBiY,EAAK5X,GAE1DtC,GAASw4B,EAAAA,EAAAA,KAAgBx4B,EAAQu4B,GACjCv4B,GAASyN,EAAAA,EAAAA,KAAYzN,EAAQsQ,GAC7BtQ,GAASu5B,EAAAA,EAAAA,KAAmBv5B,EAAQg5B,EAAcpxB,EAAU,CAC1DgyB,mBAAetwB,GACdjF,GACHrE,GAASk6B,EAAAA,EAAAA,KAA0Bl6B,EAAQg5B,EAAcpxB,EAAU,CACjEgvB,SAAUsC,EACVvC,aACAE,eACAM,iBACAD,mBACAvG,MAAOA,GAAS,IACftsB,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,gBAAiB,CAAC/L,EAAQmD,EAASyO,KAClD,MAAM,QAAEkoB,EAAO,MAAEz1B,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEzC4K,GAAc5P,EAAAA,EAAAA,KAAyB5M,EAAQqE,GACrD,IAAKmY,EACH,OAGF,MAAM2d,EAAaL,EAAQM,QAAQ,KAAM,IAEzCj3B,EAAQo2B,mBAAmB,CACzBn4B,OAAQob,EAAYpb,OACpBwG,SAAU4U,EAAY5U,SACtB/E,OAAQ,CACN42B,WAAW,EACXY,eAAgBF,GAElB91B,aAIJ0H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAC/L,EAAQmD,EAASyO,KAC9D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAC5C,OAAExQ,EAAM,SAAEwG,IAAagF,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EACzE,IAAKjD,IAAWwG,EACd,OAGF,MAAM2Q,GAAgB7M,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU5H,EAAOiC,eAC1DuW,EAAaD,EAAgB1M,OAAOjE,GAAYxG,EAEhD8Y,GAAOC,EAAAA,EAAAA,KAAWna,EAAQwY,GAC1B6gB,GAAgBF,EAAAA,EAAAA,KAA+Bn5B,EAAQqE,GAE7D,IAAK6V,IAASmf,EACZ,OAGF,MAAQiB,YAAal4B,EAAI,cAAEs0B,GAAkB2C,EACvCkB,EAAiBn4B,GAAQs0B,GAAiBA,EAAct0B,GACxDsV,EAAW6iB,GAAgB1D,aAE5Bz0B,GAIA22B,GAAkB/4B,EAAQka,EAAMtS,EAAUxF,EAAMsV,OAAUpO,EAAWiP,EAAelU,MAE3F0H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,OACJxQ,EAAM,SAAEwG,EAAQ,sBAAE4yB,EAAqB,MAAE9hB,EAAK,UAAEf,EAAS,MAAEtT,GAAQC,EAAAA,EAAAA,OACjEsN,EACJ,IAAKxQ,IAAWwG,IAAa4yB,EAC3B,OAGF,MAAMjiB,GAAgB7M,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU5H,EAAOiC,eAC1DuW,EAAaD,EAAgB1M,OAAOjE,GAAYxG,EAEhDgC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQwY,GAChC,IAAKpV,EACH,OAEF,IAAIi2B,GAAgBoB,EAAAA,EAAAA,KAA6Bz6B,EAAQqE,GAEzD,IAAKg1B,EAAe,CAIlB,GAHAr5B,GAAS06B,EAAAA,EAAAA,KAAiC16B,EAAQoB,EAAQwG,EAAUvD,IACpE0G,EAAAA,EAAAA,IAAU/K,GACVq5B,GAAgBoB,EAAAA,EAAAA,KAA6Bz6B,EAAQqE,IAChDg1B,EACH,OAEFr5B,GAASmL,EAAAA,EAAAA,KACX,EAwLFmJ,eACEtU,EACAka,EACAtS,EACA4yB,EACAG,EACAhjB,EACAY,EACAG,EAAQkiB,EAAAA,QACJv2B,GAAQC,EAAAA,EAAAA,QAEZ,MAAM,SAAEu2B,GAAa76B,EACrB,IAAK66B,GAAYF,EAAsBjG,UACrC,OAEF,IAAIoG,EA1GN,SACEvjB,EACAijB,GAEA,IAAIO,EAAAA,EAAAA,IAAyBP,EAAuBjjB,EAAOujB,eAAelE,UACxE,OAAOrf,EAAOujB,eAEhB,MAAMrhB,EAAQlC,EAAOyjB,SAASthB,UAC3BuhB,IAAYF,EAAAA,EAAAA,IAAyBP,EAAuBS,EAAQrE,WAGvE,IAAe,IAAXnd,EAIF,YAHIlC,EAAOujB,gBAAkBvjB,EAAOujB,eAAelE,SAAS/0B,QAC1D0V,EAAOyjB,SAASvvB,KAAK8L,EAAOujB,iBAIhC,MAAMriB,EAASlB,EAAOyjB,SAASE,OAAOzhB,EAAO,GAAG,GAEhD,OADAlC,EAAOyjB,SAASvvB,KAAK8L,EAAOujB,gBACrBriB,CACT,CAsFuB0iB,CAAoCR,EAAuBH,GAMhF,QAJkBlxB,IAAdqO,IACFA,EAnEJ,SAA+ByjB,EAA0BN,GACvD,IAAKA,EAAgB,OAAO5iB,EAAAA,GAAkBE,OAC9C,MAAMijB,EAA8BP,EAAelE,SAAS/0B,OAEtDy5B,EAAmBR,EAAelE,SAAS2E,QAAQH,GACzD,IAA0B,IAAtBE,EAAyB,OAAOpjB,EAAAA,GAAkBE,OAEtD,GAAI0iB,EAAeU,aAAaC,4BAC3BX,EAAeU,aAAaE,0BAC/B,OAGF,MAEMC,EAxVqB,EAsVJh7B,KAAK6B,MAAM64B,EAA8B,GAEF,EAxVnC,EAyVrBO,EAAiBP,EAA8B,EAErD,GAAIC,GAAoBK,EAAe,CACrC,GAAIb,EAAeU,aAAaC,2BAA4B,OAC5D,OAAOvjB,EAAAA,GAAkBC,SAC3B,CACA,GAAImjB,GAAoBM,EAAiBD,EAAe,CACtD,GAAIb,EAAeU,aAAaE,0BAA2B,OAC3D,OAAOxjB,EAAAA,GAAkBI,QAC3B,CAEF,CAyCgBujB,CAAsBrB,EAAuBM,SAGzCxxB,IAAdqO,EACF,OAGF,MAAMD,EArFR,SACEC,EACAyjB,EACAH,GAEA,OAAKA,EACDtjB,IAAcO,EAAAA,GAAkBC,UAAkB8iB,EAAQrE,SAAS,GACnEjf,IAAcO,EAAAA,GAAkBI,SAAiB2iB,EAAQrE,SAASqE,EAAQrE,SAAS/0B,OAAS,GACzFu5B,EAHcA,CAIvB,CA4EmBU,CAA4BnkB,EAAW6iB,EAAuBM,GACzE/iB,EA/FR,SACEJ,EACAe,GAEA,OAAIf,IAAcO,EAAAA,GAAkBC,UAAkB,EAClDR,IAAcO,EAAAA,GAAkBI,WAAmBI,EAAQ,KACtD/X,KAAK0X,MAAMK,EAAQ,GAAK,EACnC,CAwFoBqjB,CAA6BpkB,EAAWe,GAEpDsgB,EAAezgB,EAAgBvY,EAAOiC,cAAiBiY,EAAK5X,GAElEtC,GAASg8B,EAAAA,EAAAA,KAA0Bh8B,EAAQg5B,EAAcpxB,GAAU,EAAMvD,IACzE0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDgF,OACA9X,KAAM,QACNsW,QACA9Q,WACA8P,WACAa,gBACAR,cAKF,GAFA/X,GAASmL,EAAAA,EAAAA,OAEJsN,EAGH,OAFAzY,GAASg8B,EAAAA,EAAAA,KAA0Bh8B,EAAQg5B,EAAcpxB,GAAU,EAAOvD,QAC1E0G,EAAAA,EAAAA,IAAU/K,GAIZ,MAAM,SACJsQ,EAAQ,iBAAEioB,GACR9f,EAEEzP,GAAOkG,EAAAA,EAAAA,IAAqBoB,EAAU,MACtC4oB,EAAcpxB,OAAO4G,KAAK1F,GAAM4F,IAAIhE,QAE1C5K,GAASw4B,EAAAA,EAAAA,KAAgBx4B,EAAQu4B,GACjCv4B,GAAS+Y,EAAAA,EAAAA,KAAoB/Y,EAAQg5B,EAAchwB,GAEnD,MAAMwyB,EAlFR,SACE7jB,EACAe,EAAeujB,EACfnB,GAEA,IAAIY,EAA4BtlB,QAAQ0kB,GAAgBU,aAAaE,2BACjED,EAA6BrlB,QAAQ0kB,GAAgBU,aAAaC,4BAStE,OAPIQ,EAAmBvjB,IACjBf,IAAcO,EAAAA,GAAkBI,SAClCojB,GAA4B,EACnB/jB,IAAcO,EAAAA,GAAkBC,YACzCsjB,GAA6B,IAG1B,CACLC,4BACAD,6BAEJ,CA+DuBS,CAAiBvkB,EAAWe,EAAOwgB,EAAYr3B,OAAQi5B,GAEtEqB,GAAcC,EAAAA,EAAAA,IAAuBpzB,EAAMkwB,GAAa,GAC9D4B,GAAiBuB,EAAAA,EAAAA,KACfF,EACAX,EACAV,GAGF96B,GAASs8B,EAAAA,EAAAA,KACPt8B,EAAQg5B,EAAcpxB,EAAUkzB,EAAgBH,EAAuBt2B,GAEzErE,GAASg8B,EAAAA,EAAAA,KAA0Bh8B,EAAQg5B,EAAcpxB,GAAU,EAAOvD,IAC1E0G,EAAAA,EAAAA,IAAU/K,EACZ,CAjQOu8B,CAAgBv8B,EACnBoD,EACAwE,EACA4yB,EACAnB,EACA1hB,EACAY,EACAG,EACArU,MAGJ0H,EAAAA,EAAAA,IAAiB,uBAAwBuI,MAAOtU,EAAQmD,EAASyO,KAC/D,MAAM,UAAE4qB,EAAS,MAAEn4B,GAAQC,EAAAA,EAAAA,OAAsBsN,GAE3C,OAAExQ,IAAWwL,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EAC/D,IAAKjD,EACH,OAGF,MAAMgC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAM6D,QAAkBiO,EAAAA,EAAAA,IAAQ,8BAA+B,CAC7D9R,OACAo5B,cAGGv1B,GAIL9D,EAAQ0J,aAAa,CACnBzL,OAAQgC,EAAKd,GACb2E,YACA5C,aC/PJ0H,EAAAA,EAAAA,IAAiB,kBAAmBuI,MAAOtU,EAAQmD,EAASyO,KAC1D,MAAM,SAAEif,EAAQ,MAAExsB,GAAQC,EAAAA,EAAAA,OAAsBsN,GAE1C,OAAExQ,IAAWwL,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EAC/D,IAAKjD,EACH,OAIF,IAAIlB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOo4B,WAAWlhB,WAAamhB,EAAAA,GAAmBC,WAC3E,OAGF38B,GAAS48B,EAAAA,EAAAA,KACP58B,EAAQoB,EAAQ,CAAEy7B,yBAAqBvzB,EAAWwzB,qBAAiBxzB,GAAajF,IAElF0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAM,OAAEyY,EAAM,MAAE/E,SAAiBwB,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE2b,aAEhE7wB,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+8B,EAAAA,EAAAA,KACP/8B,GAAmB,IAAXyY,EAAkBikB,EAAAA,GAAmBM,SAAWN,EAAAA,GAAmBO,MAAO54B,GAEpFrE,GAAS48B,EAAAA,EAAAA,KAAiB58B,EAAQoB,EAAQ,CACxCy7B,qBAAgC,IAAXpkB,EACrBqkB,gBAAiBjM,EACjBnd,SACCrP,IACH0G,EAAAA,EAAAA,IAAU/K,QAEKsJ,IAAXmP,GACFtV,EAAQ+5B,sBAAsB,CAAExkB,MAAO,iBAAkBrU,aAI7D0H,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,SAAEif,EAAQ,uBAAEsM,EAAsB,MAAE94B,GAAQC,EAAAA,EAAAA,OAAsBsN,GAElE,OAAExQ,IAAWwL,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EAC/D,IAAKjD,EACH,OAGF,MAAMgC,QAAag6B,EAAAA,EAAAA,IAAmBp9B,EAAQmD,EAAS/B,EAAQiD,GAC/D,IAAKjB,EAAM,OAEXpD,GAASmL,EAAAA,EAAAA,MAETnL,GAAS+8B,EAAAA,EAAAA,KAAyB/8B,EAAQ08B,EAAAA,GAAmBC,WAAYt4B,IACzE0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE9R,OAAMytB,aACpDsM,SACIjoB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE9R,SAG5CpD,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+8B,EAAAA,EAAAA,KAAyB/8B,EAAQyY,EAASikB,EAAAA,GAAmBM,SAAWN,EAAAA,GAAmBO,MAAO54B,GAC3GrE,GAAS48B,EAAAA,EAAAA,KAAiB58B,EAAQoD,EAAKd,GAAI,CACzCu6B,yBAAqBvzB,EACrBwzB,qBAAiBxzB,EACjBoK,WAAOpK,GACNjF,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAC5C,OAAExQ,IAAWwL,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EACzDjB,EAAOhC,IAAUmG,EAAAA,EAAAA,KAAWvH,EAAQoB,GACrCA,GAAWgC,IAIhB8R,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE9R,YAGjC2I,EAAAA,EAAAA,IAAiB,2BAA4B,CAAC/L,EAAQmD,EAASyO,KAC7D,MAAM,OAAExQ,EAAM,OAAEi8B,EAAM,MAAEh5B,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEtD5R,GAAS48B,EAAAA,EAAAA,KAAiB58B,EAAQoB,EAAQ,CAAEk8B,cAAeD,GAAUh5B,IACrE0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,OAAExQ,EAAM,OAAEi8B,EAAM,MAAEh5B,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEhD/O,EAASw6B,EAAS,CAAEE,WAAY,CAAEF,WAAa,CAAEE,gBAAYj0B,GAEnEtJ,GAAS48B,EAAAA,EAAAA,KAAiB58B,EAAQoB,EAAQyB,EAAQwB,IAClD0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2BuI,MAAOtU,EAAQmD,EAASyO,KAClE,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAAS,OAEvC,MAAM,OACJoB,EAAM,QAAEo8B,EAAO,UAAEC,EAAS,MAAE/kB,EAAK,MAAErU,GAAQC,EAAAA,EAAAA,OACzCsN,EACEsI,GAAO3S,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1Bs8B,GAAQ9oB,EAAAA,EAAAA,KAAW5U,EAAQw9B,GAAWx9B,EAAOiC,eACnD,IAAKiY,IAASwjB,EAAO,OAErB,MAAMjlB,QAAevD,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDgF,OAAMwjB,QAAOD,YAAW/kB,UAE1B,IAAKD,EACH,OAEFzY,GAASmL,EAAAA,EAAAA,MACT,MAAM,QAAEwyB,GAAYllB,EAEd5V,EAAS46B,EAAY,CAAEG,eAAgBD,GAAY,CAAEA,WAC3D39B,GAAS48B,EAAAA,EAAAA,KAAiB58B,EAAQoB,EAAQyB,EAAQwB,IAClD0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,yBAA0BuI,MAAOtU,EAAQmD,EAASyO,KACjE,MAAM,OACJxQ,EAAM,KAAE22B,EAAI,UAAE0F,EAAS,WAAEI,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAEruB,EAAK,MAAErL,GAAQC,EAAAA,EAAAA,OAC/EsN,EACEsI,GAAO3S,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAK8Y,EAAM,OAEX,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,yBAA0B,CACrDgF,OACA6d,OACA0F,YACAI,aACAC,aACAC,kBACAruB,UAEF,IAAK+I,EACH,OAGF,MAAM,UAAEulB,EAAS,UAAEC,GAAcxlB,EAEjCzY,GAASmL,EAAAA,EAAAA,MACT,MAAM,WAAEsxB,IAAev8B,EAAAA,EAAAA,KAAeF,EAAQqE,GACxCs5B,GAAWlB,EAAWzqB,SAAS5Q,GAAQu8B,SAAW,IACrD77B,OAAQmyB,GAAYA,EAAQ8D,OAASiG,EAAUjG,MAC5C6F,EAAiB,IAAKnB,EAAWzqB,SAAS5Q,GAAQw8B,gBAAkB,IAEtEK,EAAUR,UACZG,EAAev7B,QAAQ47B,GAEvBN,EAAQlyB,KAAKwyB,GAGfj+B,GAAS48B,EAAAA,EAAAA,KAAiB58B,EAAQoB,EAAQ,CACxCu8B,UACAC,kBACCv5B,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,OACJxQ,EAAM,WAAEy8B,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAEruB,EAAK,MAAErL,GAAQC,EAAAA,EAAAA,OAC9DsN,EACEsI,GAAO3S,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAK8Y,EAAM,OAEX,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/CgF,OACA2jB,aACAC,aACAC,kBACAruB,UAEF,IAAK+I,EACH,OAGFzY,GAASmL,EAAAA,EAAAA,MACT,MAAMwyB,GAAUz9B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOo4B,WAAWzqB,SAAS5Q,GAAQu8B,SAAW,GACrF39B,GAAS48B,EAAAA,EAAAA,KAAiB58B,EAAQoB,EAAQ,CACxCu8B,QAAS,IAAIA,EAASllB,IACrBpU,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,2BAA4BuI,MAAOtU,EAAQmD,EAASyO,KACnE,MAAM,OACJxQ,EAAM,KAAE22B,EAAI,MAAE1zB,GAAQC,EAAAA,EAAAA,OACpBsN,EACEsI,GAAO3S,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAK8Y,EAAM,OAMX,UAJqBhF,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDgF,OACA6d,SAGA,OAGF/3B,GAASmL,EAAAA,EAAAA,MACT,MAAM+yB,GAAkBh+B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOo4B,WAAWzqB,SAAS5Q,GAC1EpB,GAAS48B,EAAAA,EAAAA,KAAiB58B,EAAQoB,EAAQ,CACxCu8B,QAASO,GAAiBP,SAAS77B,OAAQu7B,GAAWA,EAAOtF,OAASA,GACtE6F,eAAgBM,GAAiBN,gBAAgB97B,OAAQu7B,GAAWA,EAAOtF,OAASA,IACnF1zB,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,mCAAoCuI,MAAOtU,EAAQmD,EAASyO,KAC3E,MAAM,OACJxQ,EAAM,QAAEo8B,EAAO,MAAEn5B,GAAQC,EAAAA,EAAAA,OACvBsN,EACEsI,GAAO3S,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1Bs8B,GAAQ9oB,EAAAA,EAAAA,KAAW5U,EAAQw9B,GAAWx9B,EAAOiC,eAC9CiY,GAASwjB,SAEOxoB,EAAAA,EAAAA,IAAQ,mCAAoC,CAC/DgF,OACAwjB,YAMF19B,GAASmL,EAAAA,EAAAA,MACTnL,GAAS48B,EAAAA,EAAAA,KAAiB58B,EAAQoB,EAAQ,CACxCw8B,eAAgB,IACfv5B,IACH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2BuI,MAC1CtU,EAAQmD,EAASyO,KAEjB,MAAM,OACJxQ,EAAM,KAAE22B,EAAI,WAAEoG,EAAU,aAAEC,EAAY,MAAE1lB,EAAK,MAAErU,GAAQC,EAAAA,EAAAA,OACrDsN,EACEsI,GAAO3S,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1Bi9B,EAAaD,GAAexpB,EAAAA,EAAAA,KAAW5U,EAAQo+B,QAAgB90B,EACrE,IAAK4Q,GAASkkB,IAAiBC,EAAa,OAE5C,MAAM5lB,QAAevD,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDgF,OACA6d,OACAoG,aACAE,aACA3lB,UAEF,IAAKD,EACH,OAEF,MAAM,UAAE6lB,GAAc7lB,EAEtBzY,GAASmL,EAAAA,EAAAA,MACT,MAAMozB,GAAoBr+B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOo4B,WAAWzqB,SAAS5Q,IAASm8B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAOtF,OAASA,IAIpE/3B,GAAS48B,EAAAA,EAAAA,KAAiB58B,EAAQoB,EAAQ,CACxCm8B,WAAY,IACPgB,EACHD,cAEDj6B,IACH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,2BAA4BuI,MAC3CtU,EAAQmD,EAASyO,KAEjB,MAAM,OACJxQ,EAAM,KAAE22B,EAAI,WAAEoG,EAAU,aAAEC,EAAY,MAAE1lB,EAAK,MAAErU,GAAQC,EAAAA,EAAAA,OACrDsN,EACEsI,GAAO3S,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1Bi9B,EAAaD,GAAexpB,EAAAA,EAAAA,KAAW5U,EAAQo+B,QAAgB90B,EACrE,IAAK4Q,GAASkkB,IAAiBC,EAAa,OAE5C,MAAM5lB,QAAevD,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDgF,OACA6d,OACAoG,aACAE,aACA3lB,QACA8lB,aAAa,IAEf,IAAK/lB,EACH,OAEF,MAAM,UAAE6lB,GAAc7lB,EAEtBzY,GAASmL,EAAAA,EAAAA,MACT,MAAMozB,GAAoBr+B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOo4B,WAAWzqB,SAAS5Q,IAASm8B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAOtF,OAASA,IAGpE/3B,GAAS48B,EAAAA,EAAAA,KAAiB58B,EAAQoB,EAAQ,CACxCm8B,WAAY,IACPgB,EACHE,WAAYH,IAEbj6B,IACH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,uBAAwBuI,MAAOtU,EAAQmD,EAASyO,KAC/D,MAAM,OACJxQ,EAAM,WAAE+8B,EAAa,EAAC,aAAEC,EAAY,MAAE1lB,EAAQ,GAC5C9G,EACEsI,GAAO3S,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1Bi9B,EAAaD,GAAexpB,EAAAA,EAAAA,KAAW5U,EAAQo+B,QAAgB90B,EACrE,IAAK4Q,GAASkkB,IAAiBC,EAAa,OAE5C,MAAM5lB,QAAevD,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDgF,OACAikB,aACAE,aACA3lB,QACA8lB,aAAa,IAEf,IAAK/lB,EACH,OAEF,MAAM,UAAE6lB,GAAc7lB,EAEtBzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEs9B,aAAcJ,KACpDvzB,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,OACJxQ,EAAM,OAAEsf,EAAM,WAAEie,GACd/sB,EACEsI,GAAO3S,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BuT,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQ0gB,GAChC,IAAKxG,IAASvF,EAAM,OAOpB,UALqBO,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDgF,OACAvF,OACAgqB,eAEW,OAEb3+B,GAASmL,EAAAA,EAAAA,MACT,MAAMyzB,GAAar3B,EAAAA,EAAAA,KAAWvH,EAAQoB,GACjCw9B,IAEL5+B,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCs9B,aAAcE,EAAWF,cAAc58B,OAAQ+8B,GAAaA,EAASne,SAAWA,MAElF3V,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2BuI,MAAOtU,EAAQmD,EAASyO,KAClE,MAAM,OACJxQ,EAAM,WAAEu9B,EAAU,KAAE5G,GAClBnmB,EACEsI,GAAO3S,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC3B8Y,SAEgBhF,EAAAA,EAAAA,IAAQ,0BAA2B,CACtDgF,OACAykB,aACA5G,WAIF/3B,GAASmL,EAAAA,EAAAA,OACU5D,EAAAA,EAAAA,KAAWvH,EAAQoB,KAGtCpB,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEs9B,aAAc,KACpD1+B,GAASqnB,EAAAA,EAAAA,KAAmBrnB,EAAQoB,EAAQ,CAC1C09B,mBAAoB,GACpBC,gBAAiB,KAEnBh0B,EAAAA,EAAAA,IAAU/K,QAGZ+L,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,OAAE5P,GAAW4P,EACb+C,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQgC,GAC3B2S,SAEgBO,EAAAA,EAAAA,IAAQ,sBAAuBP,KAGpD3U,GAASmL,EAAAA,EAAAA,MACTnL,GAASuoB,EAAAA,EAAAA,KAAmBvoB,EAAQgC,EAAQ,CAC1Cg9B,cAAU11B,KAEZyB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,4BAA6BuI,MAAOtU,EAAQmD,EAASyO,KACpE,MAAM,OACJ8O,EAAM,KAAEue,EAAI,UAAEC,EAAS,MAAE76B,GAAQC,EAAAA,EAAAA,OAC/BsN,EAEE+C,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQ0gB,GAChC,IAAK/L,EAAM,OAWX,GATA3U,GAAS+8B,EAAAA,EAAAA,KAAyB/8B,EAAQ08B,EAAAA,GAAmBC,WAAYt4B,IACzE0G,EAAAA,EAAAA,IAAU/K,UAEWkV,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDP,OACAsqB,OACAC,cAQA,OAJAl/B,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+8B,EAAAA,EAAAA,KAAyB/8B,EAAQ08B,EAAAA,GAAmBO,MAAO54B,QACpE0G,EAAAA,EAAAA,IAAU/K,GAKZA,GAASmL,EAAAA,EAAAA,OACTJ,EAAAA,EAAAA,IAAU/K,GAEV,MAAM,GAAEsC,EAAE,WAAEkpB,GAAe7W,EAE3B,UADsBO,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5S,KAAIkpB,eAKnD,OAHAxrB,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+8B,EAAAA,EAAAA,KAAyB/8B,EAAQ08B,EAAAA,GAAmBO,MAAO54B,QACpE0G,EAAAA,EAAAA,IAAU/K,GAIZmD,EAAQg8B,sBAAsB,CAAEn9B,OAAQ0e,EAAQ0e,uBAAuB,IAEvEp/B,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+8B,EAAAA,EAAAA,KAAyB/8B,EAAQ08B,EAAAA,GAAmBM,SAAU34B,IACvE0G,EAAAA,EAAAA,IAAU/K,GAENi/B,IAASC,GACX/7B,EAAQqM,iBAAiB,CACvBxO,QAAS8yB,EAAAA,GAA0B,4CAA4CuL,EAAAA,EAAAA,IAAuB1qB,IACtGtQ,aAKN0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,OAAExQ,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAE1D,OAAOgrB,EAAAA,EAAAA,KAAiB58B,EAAQoB,EAAQ,CAAEsS,WAAOpK,GAAajF,K,4BCzahE,IAAIi7B,GAsPAC,GAjBJ,SAASC,GAAuCx/B,EAAWoB,EAAgBwG,GACzE,MAAM3F,EAAgBjC,EAAOiC,cACvBsW,GAAgB7M,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU3F,GACnDuW,EAAaD,EAAgB1M,OAAOjE,GAAYxG,EAEhDgC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQwY,GAEhC,OAAOtD,EAAAA,EAAAA,IAAQ,gBAAiB,CAC9B9R,OACAwE,WACA8P,SAAWa,OAA8CjP,EAA9BlG,EAAKgN,uBAChC2H,YAAapX,KAAK0X,MAAMJ,EAAAA,IAAqB,GAAK,GAClDS,MAAOT,EAAAA,IACPM,iBAEJ,EAlPAxM,EAAAA,EAAAA,IAAiB,OAAQ,CAAC/L,EAAQmD,KAC5Bs8B,EAAAA,KAEFjlB,QAAQC,IAAI,kBAGV6kB,IACF3S,aAAa2S,IAGft/B,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IAAKA,EAAQ0/B,WAAW,IACjC30B,EAAAA,EAAAA,IAAU/K,GAGVs/B,GAAuBtV,OAAO9e,WAAW,KACvClL,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IAAKA,EAAQ0/B,WAAW,IACjC30B,EAAAA,EAAAA,IAAU/K,GACVs/B,QAAuBh2B,GAvBI,MA0B7B,MAAM,aACJq2B,EAAY,uBAAEC,GACZz8B,GAEJ08B,EAAAA,GAAAA,MAEAF,EAAa,CACXG,SAAU,SACVC,mBAAoBzrB,gBAuBxBA,eAA6DtU,EAAWmD,GACtE,IAAI68B,GAAoB,EAExBhgC,GAASmL,EAAAA,EAAAA,MAET,IAAI80B,GAAW,EAGf,MACMC,EADep4B,OAAO4G,KAAK1O,EAAOsQ,SAAS0B,UACb0L,OAAwD,CAACC,EAAKvc,KAChGuc,EAAIvc,GAAU0G,OACX4G,KAAK1O,EAAOsQ,SAAS0B,SAAS5Q,GAAQ++B,aACtCziB,OAAwC,CAAC0iB,EAAMx4B,KAC9Cw4B,EAAKx1B,OAAOhD,KAAay4B,EAAAA,EAAAA,IAAc,CACrC7rB,OAAO8B,EAAAA,EAAAA,KAAYtW,EAAQoB,EAAQwJ,OAAOhD,IAC1Cqa,WAAWC,EAAAA,EAAAA,KAAgBliB,EAAQoB,EAAQwJ,OAAOhD,IAClD04B,cAAcC,EAAAA,EAAAA,KAAmBvgC,EAAQoB,EAAQwJ,OAAOhD,MAGnDw4B,GACN,CAAC,GACCziB,GACN,CAAC,GAGE6iB,EAAe14B,OAAO4I,QAAQ1Q,EAAO+I,MAAM03B,eAAehgB,KAAO,CAAC,GAAG7R,IAAI,EAAExN,EAAQ6F,MACvFhC,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQwJ,OAAO3D,KACxCnF,OAAOsU,SACJsqB,EAAoB54B,OAAOC,OAAO/H,EAAO+I,MAAM03B,eAAelN,OAAS,CAAC,GAAG3kB,IAAK3H,IACpFhC,EAAAA,EAAAA,KAAkBjF,EAAQA,EAAOiC,cAAgB2I,OAAO3D,KACvDnF,OAAOsU,SAEV,IAAK,MAAQ9T,GAAI+B,KAAWyD,OAAOC,OAAO/H,EAAOgI,SAAU,CACzDhI,GAASmL,EAAAA,EAAAA,MACT,MAAQ/J,OAAQsM,EAAe9F,SAAUqI,IAAoBrD,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EACnGs8B,EAAiB1wB,GAAmBtI,EAAAA,GACpChB,EAAa+G,GAAiBuC,GAChCxF,EAAAA,EAAAA,KAAiBzK,EAAQ0N,EAAeuC,QAAmB3G,EACzDohB,EAAchd,EAAgB1N,EAAO+I,MAAMC,KAAK0E,QAAiBpE,EACvE,GAAIoE,GAAiBgd,EAAa,CAChC,MAAOjS,EAAQmoB,SAA0BpgB,QAAQC,IAAI,CACnD+e,GACEx/B,EACA0N,EACAizB,GAEFA,IAAmBh5B,EAAAA,KAAmB+D,EAAAA,EAAAA,IAAiBgf,EAAYpoB,GAAIq+B,EAAgB3gC,EAAOiC,oBAIvFqH,GAHH4L,EAAAA,EAAAA,IAAQ,yBAA0B,CAClC9R,KAAMsnB,EACNzjB,UAAW2D,OAAO+1B,OAGxB3gC,GAASmL,EAAAA,EAAAA,MACT,MAAQ/J,OAAQy/B,IAAqBj0B,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EAEjF,GAAIoU,GAAUooB,IAAqBnzB,EAAe,CAChD,MAAMozB,GAAsBl3B,EAAAA,EAAAA,KAAmB5J,EAAQ0N,GACjD6I,EAAgB7I,IAAkBuE,EAAAA,IACpCjS,EAAOkS,qBAAqBpQ,OAAO,EAAGsQ,gBAAiBA,GAAWxD,IAAI,EAAG5N,aAAcA,GACvF,GACE42B,GAASmJ,EAAAA,EAAAA,KAAa/gC,EAAQ0N,GAC9BszB,EAAoBpJ,EAAS9vB,OAAOC,OAAO6vB,GAC9ChpB,IAAI,EAAGzH,mBAAoB25B,EAAoB35B,IAC/CrF,OAAOsU,SACN,GAEE6qB,EAAmBxoB,EAAOnI,SAAS1B,IAAI,EAAGtM,QAASA,GACnD4+B,GAAsBC,EAAAA,EAAAA,IAAKnhC,EAAOsQ,SAAS0B,SAAStE,GAAeyyB,YAAac,GAKhFroB,KAH2BH,EAAOnI,SAASzO,QAC5C4W,EAAOnI,SAASkB,KAAK,EAAGlP,QAASA,IAAOs+B,GAAkBQ,kBACPR,GAAkBS,aAAgB,IAClDvwB,OAAO2H,EAAOnI,SAAUiG,GAC1D+qB,EAAmC1oB,EAAY9H,OAAOkwB,GACtDh4B,GAAOkG,EAAAA,EAAAA,IAAqBoyB,EAAkC,MAC9Dz3B,GAAYiC,EAAAA,EAAAA,IAAO8M,EAAYhK,IAAI,EAAGtM,QAASA,IAEhD29B,IACHjgC,EAAS,IACJA,EACHsQ,SAAU,IACLtQ,EAAOsQ,SACV0B,SAAU,CAAC,IAIflK,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAIi/B,MAC3CvhC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BwhC,WAAY,CAAC,GACZD,KAELtB,GAAW,GAGbjgC,GAAS+Y,EAAAA,EAAAA,KAAoB/Y,EAAQ0N,EAAe1E,GACpDhJ,GAAS6H,EAAAA,EAAAA,KAAgB7H,EAAQ0N,EAAeizB,EAAgB92B,GAEhE/B,OAAO4I,QAAQwwB,GAAqBh/B,QAAQ,EAAEI,EAAI0N,MAC3CA,GAAQrJ,aACb3G,GAAS2I,EAAAA,EAAAA,KAAiB3I,EAAQ0N,EAAepL,EAAI0N,EAAOrJ,eAG1DA,IAAeA,EAAW86B,gBAAkBd,IAAmBh5B,EAAAA,KACjE3H,GAAS2I,EAAAA,EAAAA,KAAiB3I,EAAQ0N,EAAeizB,EAAgB,KAC5DQ,EAAAA,EAAAA,IAAKx6B,EAAY,CAAC,gBAAiB,qBAI1CmB,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAIi/B,MAC3C,MAAQngC,OAAQsgC,EAAa95B,SAAU+5B,IAAkB/0B,EAAAA,EAAAA,KAAyB5M,EAAQuhC,IAAe,CAAC,EACtGG,IAAgBh0B,GAAiBi0B,IAAkBhB,IACrD3gC,GAASuZ,EAAAA,EAAAA,KAAuBvZ,EAAQ0N,EAAeizB,EAAgB92B,EAAW03B,MAGtFvhC,GAAS4hC,EAAAA,EAAAA,KAAY5hC,GAAQkP,EAAAA,EAAAA,IAAqBuJ,EAAO1P,MAAO,OAChE/I,GAAS6hC,EAAAA,EAAAA,KAAY7hC,GAAQkP,EAAAA,EAAAA,IAAqBuJ,EAAOqpB,MAAO,OAEhE9B,GAAoB,CACtB,CACF,EAEAj1B,EAAAA,EAAAA,IAAU/K,GAEN0qB,GAAathB,UACfjG,EAAQ4+B,WAAW,CAAE3gC,OAAQsM,EAAgB5E,OAAO,IAChDmH,GAAmBA,IAAoBtI,EAAAA,IACzCxE,EAAQ0H,cAAc,CACpBzJ,OAAQsM,EAAgB5C,QAASF,OAAOqF,GAAkB+xB,wBAAwB,IAI1F,CAEAhiC,GAASmL,EAAAA,EAAAA,MAEJ60B,IACHhgC,EAAS,IACJA,EACHsQ,SAAU,IACLtQ,EAAOsQ,SACV0B,SAAU,CAAC,IAIflK,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAIi/B,MAC3CvhC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BwhC,WAAY,CAAC,GACZD,MAMPz5B,OAAO4G,KAAKwxB,GAAgBh+B,QAASd,IACnC,MAAM6gC,EAAU/B,EAAe9+B,GAC/B0G,OAAO4G,KAAKuzB,GAAS//B,QAAS0F,IAC5B5H,GAASkiC,EAAAA,EAAAA,KAAaliC,EAAQoB,EAAQwJ,OAAOhD,GAAWs4B,EAAe9+B,GAAQwJ,OAAOhD,SAK1F5H,GAASyN,EAAAA,EAAAA,KAAYzN,EAAQwgC,GAC7BxgC,GAASyN,EAAAA,EAAAA,KAAYzN,EAAQ0gC,IAE7B31B,EAAAA,EAAAA,IAAU/K,GAEV8H,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAQjD,OAAQ+gC,EAAal7B,UAAWm7B,IAAmBliC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOg+B,YACrFF,GAAeC,KAAmBn9B,EAAAA,EAAAA,KAAkBjF,EAAQmiC,EAAaC,IAC3Ej/B,EAAQm/B,iBAAiB,CAAEj+B,WAGjC,CAlMYk+B,CAAuBviC,EAAQmD,GAErCnD,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACH0/B,WAAW,EACX7E,UAAU,EACV2H,sBAAsB,IAExBz3B,EAAAA,EAAAA,IAAU/K,GAENy/B,EAAAA,KAEFjlB,QAAQC,IAAI,mBAGdklB,EAAa,CAAEG,SAAU,aACzBF,UAsMN6C,EAAAA,GAAAA,IAAaziC,IACX,MAAM,gBAAEkkB,EAAe,UAAEwe,EAAS,SAAE7H,GAAa76B,GAC3C,YAAE2iC,IAAgBziC,EAAAA,EAAAA,KAAeF,IAClC2iC,GAAe9H,GAAa0E,IAAgBrb,kBAAoBA,GAChEqb,IAAgBmD,YAAcA,GAKX,yBAApBxe,GAA4D,4BAAdwe,IAChDzjB,EAAAA,EAAAA,MAAa2jB,OALbrD,GAAiBv/B,KClSrB+L,EAAAA,EAAAA,IAAiB,aAAcuI,MAAOtU,EAAQmD,EAASyO,KACrD,MAAM,OACJxQ,EAAM,OACNyhC,EAAM,YACNzf,EAAW,MACX/e,GAAQC,EAAAA,EAAAA,OACNsN,EACJ,IAAKxQ,EACH,OAGF,MAAMgC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,aAAc,CACzCgF,KAAM9W,EACNy/B,SACAzf,gBAGFjgB,EAAQqM,iBAAiB,CACvBxO,QAASyX,GACLoI,EAAAA,EAAAA,IAAa,2BACb,2EACJxc,aAIJ0H,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM,OACJxQ,EAAM,OACNyhC,EAAM,YACNzf,EAAW,MACXvd,EAAK,MACLxB,GAAQC,EAAAA,EAAAA,OACNsN,EACJ,IAAKxQ,EACH,OAGF,MAAMgC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,IAASyC,EACZ,OAGF,MAAM4S,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDgF,KAAM9W,EACNyC,QACAg9B,SACAzf,gBAGFjgB,EAAQqM,iBAAiB,CACvBxO,QAASyX,GACLoI,EAAAA,EAAAA,IAAa,2BACb,2EACJxc,aAIJ0H,EAAAA,EAAAA,IAAiB,qBAAsBuI,UACrC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,uBACxBuD,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACH8iC,eAAgB,CACdC,OAAQtqB,EAAOuqB,eACfC,cAAen7B,OAAO4G,KAAK+J,EAAOuqB,gBAClCE,QAASzqB,EAAOyqB,WAGpBn4B,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,yBAA0BuI,MAAOtU,EAAQmD,EAASyO,KACjE,MAAM,KAAEge,GAAShe,EAGjB,UADqBsD,EAAAA,EAAAA,IAAQ,yBAA0B0a,GAErD,OAGF5vB,GAASmL,EAAAA,EAAAA,MAET,MAAQ,CAACykB,GAAOuT,KAAoBC,GAAgBpjC,EAAO8iC,eAAeC,OAE1E/iC,EAAS,IACJA,EACH8iC,eAAgB,CACdC,OAAQK,EACRH,cAAejjC,EAAO8iC,eAAeG,cAAcnhC,OAAQuhC,GAAOA,IAAOzT,MAG7E7kB,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,6BAA8BuI,UAE7C,UADqBY,EAAAA,EAAAA,IAAQ,8BAE3B,OAIF,MAAMouB,GADNtjC,GAASmL,EAAAA,EAAAA,OACyB23B,eAAeG,cAC9Cz/B,KAAMosB,GAAS5vB,EAAO8iC,eAAeC,OAAOnT,GAAM2T,WACrD,IAAKD,EACH,OAEF,MAAME,EAAiBxjC,EAAO8iC,eAAeC,OAAOO,GAEpDtjC,EAAS,IACJA,EACH8iC,eAAgB,CACdC,OAAQ,CACN,CAACO,GAAqBE,GAExBP,cAAe,CAACK,MAGpBv4B,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,wBAAyBuI,MAAOtU,EAAQmD,EAASyO,KAChE,MAAM,KACJge,EAAI,gBAAE6T,EAAe,sBAAEC,EAAqB,YAAEC,GAC5C/xB,QACiBsD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD0a,OACA6T,kBACAC,wBACAC,kBAOF3jC,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACH8iC,eAAgB,IACX9iC,EAAO8iC,eACVC,OAAQ,IACH/iC,EAAO8iC,eAAeC,OACzB,CAACnT,GAAO,IACH5vB,EAAO8iC,eAAeC,OAAOnT,WACRtmB,IAApBm6B,EAAgC,CAAEA,wBAAoBn6B,UAC5BA,IAA1Bo6B,EAAsC,CAAEA,8BAA0Bp6B,KAClEq6B,GAAe,CAAEC,mBAAet6B,QAK5CyB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,KAAEiyB,GAASjyB,QAEIsD,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE2uB,WAMnD7jC,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACH8iC,eAAgB,IACX9iC,EAAO8iC,eACVI,QAASW,KAGb94B,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,wBAAyBuI,UACxC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,0BAC7B,IAAKuD,EACH,OAEF,MAAM,kBAAEqrB,GAAsBrrB,EAC9BzY,GAASmL,EAAAA,EAAAA,MAETnL,EAAS,IACJA,EACH+jC,kBAAmB,CACjBhB,OAAQe,EACRb,cAAen7B,OAAO4G,KAAKo1B,MAG/B/4B,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,4BAA6BuI,MAAOtU,EAAQmD,EAASyO,KACpE,MAAM,KAAEge,GAAShe,EAGjB,UADqBsD,EAAAA,EAAAA,IAAQ,4BAA6B0a,GAExD,OAGF5vB,GAASmL,EAAAA,EAAAA,MAET,MAAQ,CAACykB,GAAOuT,KAAoBC,GAAgBpjC,EAAO+jC,kBAAkBhB,OAE7E/iC,EAAS,IACJA,EACH+jC,kBAAmB,CACjBhB,OAAQK,EACRH,cAAejjC,EAAO+jC,kBAAkBd,cAAcnhC,OAAQuhC,GAAOA,IAAOzT,MAGhF7kB,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,gCAAiCuI,gBAC3BY,EAAAA,EAAAA,IAAQ,mCAK7BlV,GAASmL,EAAAA,EAAAA,MAETnL,EAAS,IACJA,EACH+jC,kBAAmB,CACjBhB,OAAQ,CAAC,EACTE,cAAe,MAGnBl4B,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM6G,QAAevD,EAAAA,EAAAA,IAAQ,mBACxBuD,IAELzY,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHg/B,SAAU,IACLh/B,EAAOg/B,SACVgF,eAAgBvrB,EAAOorB,QAG3B94B,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,gBAAiBuI,MAAOtU,EAAQmD,EAASyO,KACxD,MAAM,KAAEiyB,EAAI,MAAEx/B,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EACnDiyB,SAEgB3uB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE2uB,WAGhD7jC,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHg/B,SAAU,IACLh/B,EAAOg/B,SACVgF,eAAgBH,KAGpB94B,EAAAA,EAAAA,IAAU/K,GACVmD,EAAQ8gC,wBAAwB,CAAE5/B,aC1OpC,MAEM6/B,IAAwBxU,EAAAA,EAAAA,IAAUrb,GAAOA,IAAM,KAAK,IAE1DtI,EAAAA,EAAAA,IAAiB,eAAgBuI,MAAOtU,EAAQmD,EAASyO,KACvD,MAAM,OAAE8O,EAAM,WAAEyjB,GAAevyB,EACzB+C,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQ0gB,GAChC,IAAK/L,EACH,OAGF,MAAM,GAAErS,EAAE,WAAEkpB,GAAe7W,EACrB8D,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5S,KAAIkpB,eACpD,IAAK/S,GAAQ9D,KAAM,OAEnB3U,GAASmL,EAAAA,EAAAA,MACT,MAAMmP,GAAWC,EAAAA,EAAAA,KAAmBva,EAAQ0gB,IACpC/L,KAAMyvB,EAAS9pB,SAAU+pB,GAAgB5rB,EAC3C6rB,GAAgBC,EAAAA,EAAAA,KAAiBvkC,EAAQ0gB,GAKzC8jB,EAJmB7vB,EAAK8vB,gBAAkBL,EAAQK,eACzBnqB,GAAUoqB,cAAcpiC,KAAO+hC,GAAaK,cAAcpiC,IACzDgY,GAAUqqB,eAAeriC,KAAO+hC,GAAaM,eAAeriC,IAC5DgY,GAAUsqB,eAAetiC,KAAO+hC,GAAaO,eAAetiC,GAM5FtC,GAAS6kC,EAAAA,EAAAA,KAAW7kC,EAAQ0gB,EAAQjI,EAAO9D,MAC3C3U,GAASuoB,EAAAA,EAAAA,KAAmBvoB,EAAQ0gB,EAAQjI,EAAO6B,UACnDta,GAAS6hC,EAAAA,EAAAA,KAAY7hC,GAAQkP,EAAAA,EAAAA,IAAqBuJ,EAAOqpB,MAAO,OAChE9hC,GAAS4hC,EAAAA,EAAAA,KAAY5hC,GAAQkP,EAAAA,EAAAA,IAAqBuJ,EAAO1P,MAAO,QAEhEgC,EAAAA,EAAAA,IAAU/K,IACNmkC,GAAeG,GAAe3rB,OAAS6rB,IACzCrhC,EAAQg8B,sBAAsB,CAAEn9B,OAAQ0e,EAAQ0e,uBAAuB,OAI3ErzB,EAAAA,EAAAA,IAAiB,WAAYuI,MAAOtU,EAAQmD,EAASyO,KACnD,MAAM,OAAE8O,GAAW9O,EACb+C,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQ0gB,GAChC,IAAK/L,EACH,OAGF,MAAM8D,QAAevD,EAAAA,EAAAA,IAAQ,aAAc,CAAE4sB,MAAO,CAACntB,KACrD,IAAK8D,EACH,OAGF,MAAM,MAAEqpB,EAAK,iBAAEvJ,GAAqB9f,EAEpCzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS6hC,EAAAA,EAAAA,KAAY7hC,GAAQkP,EAAAA,EAAAA,IAAqB4yB,EAAO,OACzD9hC,GAAS0tB,EAAAA,EAAAA,KAAoB1tB,EAAQ,IAChCA,EAAO8hC,MAAMgD,gBACbvM,KAELxtB,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,eAAgBuI,UAC/B,MAAQywB,UAAU,gBAAEC,IAAsBhlC,EAE1C,GAAOglC,MAAmB73B,EAAAA,EAAAA,MAAkB63B,EAhEX,IAiE/B,OAGF,MAAMvsB,QAAevD,EAAAA,EAAAA,IAAQ,iBAC7B,IAAKuD,EACH,OAGF,MAAM,IAAE1O,GAAQ0O,EAEhBzY,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACH+kC,SAAU,IACL/kC,EAAO+kC,SACV5kB,QAASpW,EACTi7B,iBAAiB73B,EAAAA,EAAAA,SAGrBpC,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,kBAAmBuI,UAClC,MAAM2wB,QAAoB/vB,EAAAA,EAAAA,IAAQ,oBAClC,IAAK+vB,EACH,OAGFjlC,GAASmL,EAAAA,EAAAA,MACTnL,GAASw4B,EAAAA,EAAAA,KAAgBx4B,EAAQilC,EAAY1M,kBAG7C,MAAM2M,EAAoBvwB,GAAmBA,EAAKwwB,UAAYxwB,EAAKywB,WAAa,GAC1EC,EAAW,IAAIC,KAAKC,SAAS,SAE7BC,EAAcP,EAAYnD,MAAMj9B,KAAK,CAACC,EAAGC,IAC7CsgC,EAASI,QAAQP,EAAiBpgC,GAAIogC,EAAiBngC,KACtDjD,OAAQ6S,IAAUA,EAAK+wB,QAE1B1lC,EAAS,IACJA,EACHilC,YAAa,CACX9kB,QAASqlB,EAAY52B,IAAK+F,GAASA,EAAKrS,OAG5CyI,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,kBAAmB,MAC7BmJ,EAAAA,EAAAA,IAAQ,uBAGfnJ,EAAAA,EAAAA,IAAiB,kBAAmBuI,MAAOtU,EAAQmD,EAASyO,KAC1D,MAAM,OAAE8O,GAAW9O,EAEnB,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAC5B,OAGF,MAAM2U,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQ0gB,GAC1BilB,GAAcC,EAAAA,EAAAA,KAAsB5lC,EAAQ0gB,GAClD,IAAK/L,IAAQwP,EAAAA,EAAAA,IAAUxP,IAASgxB,GAAaE,cAC3C,OAGF,MAAMptB,QAAevD,EAAAA,EAAAA,IAAQ,mBAAoBP,EAAMgxB,GAAax1B,OACpE,IAAKsI,EACH,OAGF,MAAM,QAAEqtB,EAAO,MAAEntB,GAAUF,EAErB1O,GAAM+B,EAAAA,EAAAA,KAAQ65B,GAAa57B,KAAO,IAAI+G,OAAOg1B,IAEnD9lC,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+lC,EAAAA,EAAAA,KAAsB/lC,EAAQ2U,EAAKrS,GAAI,CAC9C6N,MAAO21B,EAAQjkC,OAASikC,EAAQA,EAAQjkC,OAAS,QAAKyH,EACtDS,MACA87B,cAAe97B,EAAIlI,QAAU8W,KAG/B5N,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,gCAAiCuI,MAAOtU,EAAQmD,EAASyO,KACxE,MAAM,OAAE8O,EAAM,oBAAEslB,GAAwBp0B,EAClC+C,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQ0gB,GAC3B/L,SAIgBO,EAAAA,EAAAA,IAAQ,gCAC3B,CAAEP,OAAMqxB,0BAKVhmC,GAASmL,EAAAA,EAAAA,MACTnL,GAASuoB,EAAAA,EAAAA,KAAmBvoB,EAAQ0gB,EAAQ,CAC1Cse,cAAU11B,KAEZyB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,OAAE8O,EAAM,MAAErc,GAAQC,EAAAA,EAAAA,OAAsBsN,EACxC+C,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQ0gB,GAChC,IAAK/L,EACH,OAGF,MAAMsxB,QAAoB/wB,EAAAA,EAAAA,IAAQ,2BAA4B,CAAEP,cAC5CrL,IAAhB28B,IAEJjmC,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BkmC,gBAAiB,CACfxlB,SACAylB,cAAeF,IAEhB5hC,IAEH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,gBAAiBuI,MAAOtU,EAAQmD,EAASyO,KACxD,MAAM,OACJ8O,EAAM,QAAE0lB,GAAU,EAAK,UAAEhB,EAAS,SAAED,EAAQ,uBAAEkB,EAAsB,MACpEhiC,GAAQC,EAAAA,EAAAA,OACNsN,EAEE+C,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQ0gB,GAChC,IAAK/L,EACH,OASF,IAAI8D,EACJ,GAPAtV,EAAQmjC,qBAAqB,CAAEllC,OAAQsf,EAAQ0lB,YAE/CpmC,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+8B,EAAAA,EAAAA,KAAyB/8B,EAAQ08B,EAAAA,GAAmBC,WAAYt4B,IACzE0G,EAAAA,EAAAA,IAAU/K,IAGL2U,EAAK4xB,WAAa5xB,EAAK6xB,YAC1B/tB,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEuxB,MAAO9xB,EAAK6xB,YAAapB,YAAWD,iBACzE,CACL,MAAM,GAAE7iC,EAAE,WAAEkpB,GAAe7W,EAC3B8D,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CACtC5S,KACAkpB,aACAgb,YAAa,GACbpB,YACAD,WACAkB,0BAEJ,CAEI5tB,IACFtV,EAAQujC,iBAAiB,CAAE1kC,OAAQ0e,IACnCvd,EAAQwjC,gBAAgB,CAAE3kC,OAAQ0e,IAElC1gB,GAASmL,EAAAA,EAAAA,MACTnL,GAAS6kC,EAAAA,EAAAA,KACP7kC,EACA2U,EAAKrS,GACL,CACE8iC,YACAD,cAGJp6B,EAAAA,EAAAA,IAAU/K,IAGZA,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+8B,EAAAA,EAAAA,KAAyB/8B,EAAQ08B,EAAAA,GAAmBM,SAAU34B,GACvErE,GAAS4mC,EAAAA,EAAAA,KAAsB5mC,EAAQqE,IACvC0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,gBAAiBuI,MAAOtU,EAAQmD,EAASyO,KACxD,MAAM,OAAE8O,GAAW9O,EAEb+C,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQ0gB,GAEhC,IAAK/L,EACH,OAGF,MAAM,GAAErS,EAAE,WAAEkpB,GAAe7W,QAErBO,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5S,KAAIkpB,kBAGvCzf,EAAAA,EAAAA,IAAiB,wBAAyBuI,MAAOtU,EAAQmD,EAASyO,KAChE,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAAS,OAEvC,MAAM,OAAEgC,EAAM,sBAAEo9B,EAAqB,UAAEyH,GAAcj1B,EAC/ChO,GAAYuN,EAAAA,EAAAA,IAASnP,GAErB2S,EAAO/Q,GAAYgR,EAAAA,EAAAA,KAAW5U,EAAQgC,QAAUsH,EAChDlG,EAAQQ,OAAyC0F,GAA7B/B,EAAAA,EAAAA,KAAWvH,EAAQgC,GACvCkY,EAAOvF,GAAQvR,EACfkhC,GAAgBC,EAAAA,EAAAA,KAAiBvkC,EAAQgC,GAC/C,IAAKkY,GAAMuqB,cACT,OAGF,GAAIH,IAAkBlF,IAA0ByH,IAAcvC,EAAche,YAAa,OAEzFtmB,GAAS8mC,EAAAA,EAAAA,KAA0B9mC,EAAQgC,GAAQ,IACnD+I,EAAAA,EAAAA,IAAU/K,GAEVA,GAASmL,EAAAA,EAAAA,MAET,IAAI47B,GAAexsB,EAAAA,EAAAA,KAAmBva,EAAQgC,GAC1Coe,GAAeC,EAAAA,EAAAA,KAAmBrgB,EAAQgC,GAC9C,GAAI2S,IAASoyB,EAAc,CACzB,MAAM,GAAEzkC,EAAE,WAAEkpB,GAAe7W,EACrB8D,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5S,KAAIkpB,eACpD,IAAK/S,GAAQ9D,KACX,OAEFoyB,EAAetuB,EAAO6B,QACxB,CAEA,GAAIlX,IAASgd,EAAc,CACzB,MAAM3H,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB9R,GAC9C,IAAKqV,GAAQ6B,SACX,OAGF8F,EAAe3H,EAAO6B,QACxB,CAEA,MAAM0sB,EAAeD,GAAgB3mB,EACrC,IAAK4mB,EAAc,OAEnB,MAAMjhB,EAASue,GAAehe,WACxB5N,GAASqN,GAAU8gB,GAAazH,EAhTA,QAgT0D91B,EAE1FmP,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDgF,OACA6L,SACArN,UAEF,IAAKD,IAAWA,EAAOwuB,OACrB,OAGFjnC,GAASmL,EAAAA,EAAAA,MAET,MAAM,OACJ87B,EAAM,MAAEtuB,EAAK,aAAEke,GACbpe,EAEJzY,GAASknC,EAAAA,EAAAA,KAAiBlnC,EAAQgC,EAAQ,CACxCmlC,UAAWF,EACXtuB,QACA2N,WAAYuQ,EACZvc,SAAU0sB,EACV5H,2BAGFr0B,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,MAAE+e,EAAK,MAAEtsB,GAAQC,EAAAA,EAAAA,OAAsBsN,EAExC+e,GAEAuT,GAAsB5vB,UACzB,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,cAAe,CAAEyb,UAE9C3wB,GAASmL,EAAAA,EAAAA,MACT,MAAM4qB,GAAqB71B,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO+iC,WAAWzW,MAEpE,IAAKlY,IAAWsd,GAAuBpF,IAAUoF,EAG/C,OAFA/1B,GAASqnC,EAAAA,EAAAA,KAA+BrnC,GAAQ,EAAOqE,QACvD0G,EAAAA,EAAAA,IAAU/K,GAIZ,MAAM,iBACJk2B,EAAgB,gBAAEC,GAChB1d,EAEE6uB,EAAepR,EAAiBp0B,OAAOqP,EAAAA,IACvCo2B,EAAgBpR,EAAgBr0B,OAAOqP,EAAAA,IAE7CnR,GAASqnC,EAAAA,EAAAA,KAA+BrnC,GAAQ,EAAOqE,GACvDrE,GAASwnC,EAAAA,EAAAA,KAAiBxnC,EAAQ,CAAEsnC,eAAcC,iBAAiBljC,IAEnE0G,EAAAA,EAAAA,IAAU/K,QAId+L,EAAAA,EAAAA,IAAiB,gBAAiBuI,MAAOtU,EAAQmD,EAASyO,KACxD,MACE40B,YAAaC,EAAK,UAAErB,EAAS,SAAED,EAAQ,MACvC9gC,GAAQC,EAAAA,EAAAA,OACNsN,EAEE6G,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEuxB,QAAOrB,YAAWD,aAC7D1sB,GASLtV,EAAQuf,SAAS,CAAEpgB,GAAImW,EAAQpU,UAE/BrE,GAASmL,EAAAA,EAAAA,MACTnL,GAAS4mC,EAAAA,EAAAA,KAAsB5mC,EAAQqE,IACvC0G,EAAAA,EAAAA,IAAU/K,IAZRmD,EAAQqM,iBAAiB,CACvBxO,QAAS8yB,EAAAA,GAA0B,qCACnCzvB,aAaN0H,EAAAA,EAAAA,IAAiB,aAAc,CAAC/L,EAAQmD,EAASyO,KAC/C,MAAM,OAAExQ,GAAWwQ,EACbsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQoB,GAC3B8Y,IAIAhF,EAAAA,EAAAA,IAAQ,aAAcgF,MAG7BnO,EAAAA,EAAAA,IAAiB,iBAAkBuI,MAAOtU,EAAQmD,EAASyO,KACzD,MAAM,YACJ61B,EAAW,kBAAEC,EAAiB,MAAErjC,GAAQC,EAAAA,EAAAA,OACtCsN,EAGJ,KAD6BoE,EAAAA,EAAAA,KAA2BhW,GAgBtD,OAdI0nC,GACFvkC,EAAQ+rB,gBAAgB,CACtBH,UAAW2Y,EACXvY,MAAO,CACLC,UAAW,sBACXC,UAAW,CACT3b,MAAO,kBAGXrP,eAIJlB,EAAQ4kB,iBAAiB,CAAEC,eAAgB,eAAgB3jB,UAI7D,MAAMoU,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqBuyB,GAElD,GAAIC,EAAmB,CACrB,IAAKjvB,EAWH,YAVAtV,EAAQ+rB,gBAAgB,CACtBH,UAAW2Y,EACXvY,MAAO,CACLC,UAAW,sBACXC,UAAW,CACT3b,MAAO,iBAGXrP,UAKJlB,EAAQ+rB,gBAAgB,CACtBH,UAAW2Y,EACXvY,MAAO,CACLC,UAAW,oBAEb/qB,UAEFlB,EAAQqM,iBAAiB,CACvBxO,QAAS,CACPyO,IAAK,6BAEPk4B,kBAAmBF,EAAY5gB,WAC/BxiB,SAEJ,KAGF0H,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,QAAEuO,GAAYvO,QAECsD,EAAAA,EAAAA,IAAQ,mBAAoBiL,KAKjDngB,GAASmL,EAAAA,EAAAA,MACTnL,EAAOilC,aAAa9kB,QAAQje,QAASwe,IACnC,MAAM,cAAEknB,GAAkB5nC,EAAO8hC,MAAM94B,KAAK0X,IAAW,CAAC,EACpDknB,IAAkBznB,EAAQ1b,SAASic,KACrC1gB,GAAS6kC,EAAAA,EAAAA,KAAW7kC,EAAQ0gB,EAAQ,CAClCknB,mBAAet+B,OAIrB6W,EAAQje,QAASwe,IACf1gB,GAAS6kC,EAAAA,EAAAA,KAAW7kC,EAAQ0gB,EAAQ,CAClCknB,eAAe,OAGnB78B,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,2BAA4BuI,MAAOtU,EAAQmD,EAASyO,KACnE,MAAM,cACJi2B,EAAa,SAAEC,EAAQ,MAAEhZ,EAAK,UAAEC,EAAS,MAAE1qB,GAAQC,EAAAA,EAAAA,OACjDsN,EAEEmV,QAAoB7R,EAAAA,EAAAA,IAAQ,mBAAoB,CACpD2R,WAAY,CAACghB,KAEV9gB,IAAc,IAgBnB/mB,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B+nC,qBAAsB,CACpBF,gBACAC,WACA/Y,YACAD,UAEDzqB,IACH0G,EAAAA,EAAAA,IAAU/K,IAxBJ+uB,GACF5rB,EAAQ+rB,gBAAgB,CACtBH,YACAI,MAAO,CACLC,UAAW,sBACXC,UAAW,CACT3b,MAAO,4BAGXrP,aAkBR0H,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,OAAE5P,GAAW4P,EAEnB,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAAS,OAGvC,KADqBua,EAAAA,EAAAA,KAAmBva,EAAQgC,GAG9C,YADAmB,EAAQ6kC,aAAa,CAAEtnB,OAAQ1e,IAIjC,MAAM2S,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQgC,GAChC,IAAK2S,EACH,OAGF,MAAM8D,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqBP,GAClD,IAAK8D,EAAQ,OAEb,MAAM,SAAEumB,GAAavmB,EAErBzY,GAASmL,EAAAA,EAAAA,MACTnL,GAASuoB,EAAAA,EAAAA,KAAmBvoB,EAAQgC,EAAQ,CAAEg9B,cAC9Cj0B,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,+BAAgC,CAAC/L,EAAQmD,EAASyO,KACjE,MAAM,OAAE5P,GAAW4P,EAEbq2B,EAAiBjoC,EAAOg/B,SAASkJ,4BACjCC,GAAar8B,EAAAA,EAAAA,IAAO,CAAC9J,KAAWimC,IAAiB9wB,MAAM,EAAGixB,EAAAA,KAEhEpoC,EAAS,IACJA,EACHg/B,SAAU,IACLh/B,EAAOg/B,SACVkJ,4BAA6BC,KAIjCp9B,EAAAA,EAAAA,IAAU/K,KCplBZ,MAAMqoC,GAAkBltB,EAAAA,IAAUmtB,EAAAA,GAEnB,MAAMC,GAGnBC,WAAAA,CAAoBC,EAA2BC,GAA6B,KAAxDD,SAAAA,EAAiB,KAAUC,OAAAA,CAC/C,CAEAC,eAAAA,GACON,KAELO,KAAKC,UAAY7e,OAAOC,KAAK,mBAAe3gB,EAAWs/B,KAAKH,UACxDG,KAAKC,UACPD,KAAKC,UAAUC,OAEfF,KAAKF,WAET,CAEAze,IAAAA,CAAKnB,GACH,GAAI8f,KAAKC,UAKP,OAJAD,KAAKC,UAAUE,SAAS7e,KAAOpB,EAC/B8f,KAAKC,UAAUG,aACfJ,KAAKC,eAAYv/B,GAKnB,IAAK++B,GAAiB,CACpB,MAAMY,EAAQjf,OAAOC,KAAKnB,OAAKxf,EAAWs/B,KAAKH,UAC3CQ,EACFA,EAAMD,QAENJ,KAAKF,UAET,CACF,CAEAQ,aAAAA,GACEN,KAAKC,WAAWM,QAChBP,KAAKC,eAAYv/B,CACnB,E,wCChCK,SAAS8/B,GACdppC,EAAW6wB,EAAkBwY,MACzBhlC,GAAQC,EAAAA,EAAAA,QAEZ,MAAMwJ,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BspC,WAAY,IACPx7B,EAASw7B,WACZC,WAAY,IACPz7B,EAASw7B,WAAWC,WACvB,CAAC1Y,GAAWwY,KAGfhlC,EACL,CAEO,SAASmlC,GACdxpC,EAAW00B,MACPrwB,GAAQC,EAAAA,EAAAA,QAEZ,OAAOyJ,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BspC,WAAY,KACPppC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOilC,WACjC5U,cAEDrwB,EACL,CAEO,SAASolC,GACdzpC,EAAWyP,EAAai6B,MACpBrlC,GAAQC,EAAAA,EAAAA,QAEZ,MAAMqlC,GAAkBzpC,EAAAA,EAAAA,KAAeF,EAAQqE,GACzCulC,EAAgBD,EAAgBE,QAAQD,cAExCE,EAAiBF,EAAcn6B,GAErC,IAAKq6B,EAAgB,OAAO9pC,EAE5B,MAAM+pC,EAAe,IAChBD,KACAJ,GAGCM,GAAmBC,EAAAA,GAAAA,IAAaF,GACtC,OAAKC,EAELhqC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B6pC,QAAS,IACJF,EAAgBE,QACnBD,cAAe,IACVA,EACH,CAACI,GAAmBD,KAGvB1lC,GAV2BrE,CAahC,CAyBO,SAASkqC,GACdlqC,EAAWmqC,EACXC,GAAsB,EAAMC,GAA8B,MACtDhmC,GAAQC,EAAAA,EAAAA,QAEZ,MAAMqlC,GAAkBzpC,EAAAA,EAAAA,KAAeF,EAAQqE,GAEzCoL,GAAMw6B,EAAAA,GAAAA,IAAaE,GAEzB,IAAK16B,EAAK,OAAOzP,EACjB,MAAMsqC,EAAgB,IAAIX,EAAgBE,QAAQU,mBAC7CD,EAAc7lC,SAASgL,IAAM66B,EAAc7+B,KAAKgE,GAErD,MAAM+6B,EAAiB,IAAIb,EAAgBE,QAAQY,aAC9CD,EAAe/lC,SAASgL,IAAM+6B,EAAe/+B,KAAKgE,GAEvD,MAAMm6B,EAAgBD,EAAgBE,QAAQD,cAkB9C,OAhBS77B,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B6pC,QAAS,IACJF,EAAgBE,WAChBO,GAAc,CAAEM,gBAAiBj7B,GACpCk7B,qBAAqB,EACrBC,YAAaP,EACbQ,WAAY,YACZjB,cAAe,IACVA,EACH,CAACn6B,GAAM06B,GAETI,kBAAmBD,EACnBG,YAAaD,IAEdnmC,EAGL,CAaO,SAASymC,GACd9qC,EAAWyP,EAAas7B,MACpB1mC,GAAQC,EAAAA,EAAAA,QAEZ,MAAMqlC,GAAkBzpC,EAAAA,EAAAA,KAAeF,EAAQqE,IACzC,cAAEulC,EAAa,kBAAEW,EAAiB,gBAAEG,GAAoBf,EAAgBE,QACxEM,EAASP,EAAcn6B,GAC7B,IAAK06B,EAAQ,OAAOnqC,EAEpB,IAAK+qC,GAA2BZ,EAAOa,qBACrC,OAAOvB,GAAazpC,EAAQyP,EAAK,CAAEw7B,kBAAkB,GAAQ5mC,GAG/D,MAAM6mC,EAAuB,IAAKtB,GAC5BuB,GAAoBlB,EAAAA,GAAAA,IAAaE,GAEvC,IAAIG,EAAgBC,EAEhBY,WACKD,EAAqBC,GAC5Bb,EAAgBC,EAAkBzoC,OAAQspC,GAAMA,IAAMD,IAGxD,MAAME,EAAqBX,KAAoBT,EAAAA,GAAAA,IAAaE,GAEtDmB,EAAoBxjC,OAAO4G,KAAKw8B,GAChCK,EAAqBD,EAAkBzpC,OAiB7C,OAfSkM,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B6pC,QAAS,IACJF,EAAgBE,WAChBwB,GAAsB,CACvBX,gBAAiBa,EACbD,EAAkBC,EAAqB,QAAKjiC,GAElDsgC,cAAesB,EACfX,kBAAmBD,MACfiB,GAAsB,CACxBd,YAAa,MAGhBpmC,EAGL,CAuDO,SAASmnC,GACdxrC,MAAeqE,GAAQC,EAAAA,EAAAA,QAEvB,OAAOwD,OAAO4G,MAAKxO,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwlC,QAAQD,eAAe/nC,OAAS,CACnF,CAqBO,SAAS4pC,GACdzrC,EAAW0rC,MACPrnC,GAAQC,EAAAA,EAAAA,QAEZ,MAAMqlC,GAAkBzpC,EAAAA,EAAAA,KAAeF,EAAQqE,GAC/C,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6pC,QAAS,IACJF,EAAgBE,QACnBe,YAAac,IAEdrnC,EACL,C,gBC1MA,MAEMsnC,IAAwBv3B,EAAAA,EAAAA,IAAUC,GAAOA,IAAM,KAAK,GAC1D,IAAIu3B,GA0qCAC,GArTG,SAASC,GACd9rC,EAAW8uB,EAAezqB,EAAe0nC,EAAqBC,GAE9D,MAAMC,EAAiB,CAAEnd,QAAOid,aAAYC,cAC5C,GAdK,SACLhsC,EAAWmqC,EAAyB9lC,GAEpC,MACMulC,GADkB1pC,EAAAA,EAAAA,KAAeF,EAAQqE,GACTwlC,QAAQD,cACxCn6B,GAAMw6B,EAAAA,GAAAA,IAAaE,GACzB,QAAK16B,GACEm6B,EAAcn6B,EACvB,CAMMy8B,CAAelsC,EAAQisC,EAAgB5nC,GAAQ,CACjD,MAAMoL,GAAMw6B,EAAAA,GAAAA,IAAagC,GAKzB,OAJIx8B,IACFzP,EDn4BC,SACLA,EAAW+uB,MACP1qB,GAAQC,EAAAA,EAAAA,QAEZ,MAAMqlC,GAAkBzpC,EAAAA,EAAAA,KAAeF,EAAQqE,GAG/C,OAFsBslC,EAAgBE,QAAQD,cAE3B7a,GAInB/uB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B6pC,QAAS,IACJF,EAAgBE,QACnBc,qBAAqB,EACrBD,gBAAiB3b,EACjB8b,WAAY,cAEbxmC,GAVMrE,CAaX,CC82BemsC,CAAqBnsC,EAAQyP,EAAKpL,IAC3C0G,EAAAA,EAAAA,IAAU/K,KAEL,CACT,CACA,OAAO,CACT,CA8LA,SAASosC,GACPpsC,EACAmD,EACA2lB,EAAarQ,MACTpU,GAAQC,EAAAA,EAAAA,QAEZ,GAAoB,YAAhBmU,EAAOrW,KAAoB,CAC7BpC,GAASmL,EAAAA,EAAAA,MACT,MAAM2C,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,IAAKyJ,EAASu+B,QAAS,OACvB,MAAM,OAAEC,EAAM,IAAEtd,EAAG,yBAAEud,GAA6B9zB,EAYlD,OAXAzY,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqsC,QAAS,IACJv+B,EAASu+B,QACZG,QAAS,CACPF,SACAxd,MAAOE,EAAI1sB,GACXiqC,8BAGHloC,QACH0G,EAAAA,EAAAA,IAAU/K,EAEZ,CAEA,MAAMysC,EAA0B,aAAhBh0B,EAAOrW,KAAsBqW,EAAOqQ,IAAMA,EAC1DkB,OAAOC,KAAKwiB,EAAS,SAAU,YAC/BtpC,EAAQupC,kBAAkB,CAAEroC,SAC9B,CAkEAiQ,eAAeq4B,GACbvpC,EAAewpC,EAAiBnmC,EAAsC4P,EAAkBlP,SAElF+N,EAAAA,EAAAA,IAAQ,cAAe,CAC3B9R,OACAqD,YACAmH,KAAMg/B,EACNv2B,SACAlP,iBAEJ,CAIAmN,eAAeu4B,GACb7sC,EACAmD,EAAgCC,EAAe6D,EAAmB2kB,EAAekhB,GAAS,MACtFzoC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM,WACJqnB,EAAU,iBAAEnc,EAAgB,QAAEu9B,EAAO,SAAEC,GACrC7pC,EAEA2pC,IACGjB,KACHA,GAAc,IAAItD,GAAa,6BAA8B,KAC3D/4B,EAAiB,CAAExO,QAAS,qCAAsCqD,aAItEwnC,GAAYlD,mBAGd,MAAMlwB,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CACnD9T,OAAQgC,EAAKd,GACbkpB,WAAYpoB,EAAKooB,WACjBvkB,YACA2kB,OACAkhB,WAGF,IAAKr0B,EACH,OAEF,MAAM,QAAEzX,EAAS4Z,MAAOqyB,EAAO,IAAEnkB,GAAQrQ,EAErCw0B,EACFthB,EAAW,CAAEC,KAAM,CAAE5qB,QAASA,GAAW,SAAWqD,UAC3CrD,EACTwO,EAAiB,CAAExO,UAASqD,UACnBykB,IACLgkB,EAEEhkB,EAAIrkB,SAttCI,6BAutCVonC,GAAa5hB,KAAKnB,IAElB+iB,GAAa3C,gBACb8D,EAAS,CACPlkB,MAAK1nB,OAAQgC,EAAKd,GAAI2E,YAAW5C,WAIrC0oC,EAAQ,CAAEjkB,MAAKzkB,UAGrB,EA7tCA0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,OACJxQ,EAAM,UAAE6F,EAAS,OAAEimC,EAAM,MAAE7oC,GAAQC,EAAAA,EAAAA,OACjCsN,EACExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAClD,GAAK7D,GAASpC,EAId,OAAQksC,EAAO9qC,MACb,IAAK,UACHe,EAAQwpC,eAAe,CAAEC,QAASM,EAAOt/B,KAAMvJ,UAC/C,MACF,IAAK,MAAO,CACV,MAAM,IAAEykB,GAAQokB,EAChB/pC,EAAQ4pC,QAAQ,CAAEjkB,MAAKzkB,UACvB,KACF,CACA,IAAK,QACH8oC,EAAAA,EAAAA,IAAoBD,EAAOE,UAC3BjqC,EAAQqM,iBAAiB,CAAExO,SAAS6f,EAAAA,EAAAA,IAAa,kBAAmBqsB,EAAOE,UAAW/oC,UACtF,MAEF,IAAK,WACEwoC,GAAqB7sC,EAAQmD,EAASC,EAAM6D,EAAWimC,EAAOthB,UAAMtiB,EAAWjF,GACpF,MAEF,IAAK,cACHlB,EAAQkqC,cAAc,CAAEC,OAAQJ,EAAOI,OAAQjpC,UAC/C,MACF,IAAK,eAAgB,CACnB,MAAMsQ,EAAO3U,EAAOiC,eAAgB2S,EAAAA,EAAAA,KAAW5U,EAAQA,EAAOiC,oBAAiBqH,EAC/E,IAAKqL,EACH,OAEFxR,EAAQwoB,WAAW,CACjBC,KAAM,CACJ4a,YAAa7xB,EAAK6xB,YAClBpB,UAAWzwB,EAAKywB,WAAa,GAC7BD,SAAUxwB,EAAKwwB,UAAY,GAC3BzkB,OAAQ/L,EAAKrS,IAEf+B,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,iBAAEkpC,GAAqBL,EAC7B/pC,EAAQqqC,WAAW,CACjBpsC,OAAQgC,EAAKd,GAAI2E,UAAWsmC,EAAkBlpC,UAEhD,KACF,CACA,IAAK,MACHlB,EAAQsqC,YAAY,CAClBrrC,KAAM,UACNhB,OAAQgC,EAAKd,GACb2E,YACA5C,UAEF,MAEF,IAAK,OACEwoC,GAAqB7sC,EAAQmD,EAASC,EAAM6D,OAAWqC,GAAW,EAAMjF,GAC7E,MAEF,IAAK,kBAAmB,CACtB,MAAM,MAAEssB,EAAK,WAAE+c,GAAeR,EAC9B/pC,EAAQwqC,gBAAgB,CACtBhd,QAAO+c,aAAYzmC,YAAW5C,UAEhC,KACF,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEqc,GAAWwsB,EACnB/pC,EAAQyqC,iBAAiB,CAAEtrC,GAAIoe,EAAQrc,UACvC,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,IAAEykB,GAAQokB,EACVW,GAASC,EAAAA,EAAAA,KAAa9tC,EAAQgB,GACpC,IAAK6sC,EACH,OAGF,MAAME,GAAQC,EAAAA,GAAAA,KACd7qC,EAAQ8qC,qBAAqB,CAC3BnlB,MAAKgG,MAAO+e,EAAOvrC,GAAIyrC,QAAOG,WAAYhB,EAAOt/B,KAAMvJ,UAEzD,KACF,CAEA,IAAK,UAAW,CACd,MAAM,IAAEykB,GAAQokB,EACVW,GAASC,EAAAA,EAAAA,KAAa9tC,EAAQgB,GAC9B8tB,EAAQ9tB,EAAQmtC,UAAYN,GAAQvrC,GAC1C,IAAKwsB,EACH,OAEF,MAAMif,GAAQC,EAAAA,GAAAA,KACd7qC,EAAQirC,eAAe,CACrBtlB,MACAgG,QACA9sB,OAAQoB,EAAKd,GACbyrC,QACAG,WAAYhB,EAAOt/B,KACnBvJ,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,IAAEykB,GAAQokB,EAChB/pC,EAAQkrC,kBAAkB,CACxBjtC,OAAQgC,EAAKd,GACb2E,YACAqnC,SAAUpB,EAAOoB,SACjBxlB,MACAzkB,UAEF,KACF,MAIJ0H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,QAAEg7B,EAAO,OAAExrC,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsBsN,EACjDxO,EAAOhC,GAASmG,EAAAA,EAAAA,KAAWvH,EAAQoB,IAAUwjB,EAAAA,EAAAA,KAAkB5kB,EAAQqE,GACvEsI,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAE5D,IAAKjB,IAASuJ,EACZ,OAGF,MAAM,SAAE/E,GAAa+E,EACrBxJ,EAAQorC,oBAAoB,CAAElqC,UAC9BlB,EAAQ+Z,oBAAoB,CAAE7Y,UAE9B,MAAM8C,GAAgB+B,EAAAA,EAAAA,KAAwBlJ,EAAQoD,EAAKd,IAEtDqqC,GACHvpC,EAAMwpC,GAASt2B,EAAAA,EAAAA,KAAYtW,EAAQoD,EAAKd,GAAIsF,IAAWnB,WAAW/E,EAAAA,EAAAA,KAAa1B,EAAQoD,EAAKd,IAAK6E,MAIrG4E,EAAAA,EAAAA,IAAiB,aAAcuI,MAAOtU,EAAQmD,EAASyO,KACrD,MAAM,OAAExQ,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsBsN,GACxC,cAAE3P,GAAkBjC,EACpBoD,GAAOwhB,EAAAA,EAAAA,KAAkB5kB,EAAQqE,GACjC2qB,EAAM/sB,IAAiBusC,EAAAA,EAAAA,KAAUxuC,EAAQoB,GAC/C,IAAKa,IAAkBmB,IAAS4rB,EAC9B,OAGF,MAAM7nB,GAAgB+B,EAAAA,EAAAA,KAAwBlJ,EAAQoD,EAAKd,UAEtC4S,EAAAA,EAAAA,IAAQ,cAAe,CAAEP,KAAMqa,MAKpDhvB,GAASmL,EAAAA,EAAAA,MACTnL,GAASyuC,EAAAA,EAAAA,KAAkBzuC,EAAQgvB,EAAI1sB,KACvCyI,EAAAA,EAAAA,IAAU/K,GACL2sC,GAAevpC,EAAM,cAAUkG,GAAW5H,EAAAA,EAAAA,KAAa1B,EAAQoB,GAAS+F,OAG/E4E,EAAAA,EAAAA,IAAiB,oBAAqBuI,UACpC,MAAM,gBAAE0wB,GAAoBhlC,EAAO0uC,cACnC,GAAI1J,IAAmB73B,EAAAA,EAAAA,MAAkB63B,EA/KR,GAgL/B,OAGF,MAAMvsB,QAAevD,EAAAA,EAAAA,IAAQ,sBAC7B,IAAKuD,EACH,OAGF,MAAM,IAAE1O,GAAQ0O,EAEhBzY,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACH0uC,cAAe,IACV1uC,EAAO0uC,cACVvuB,QAASpW,EACTi7B,iBAAiB73B,EAAAA,EAAAA,SAGrBpC,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,iBAAkBuI,UACjC,MAAM,gBAAE0wB,GAAoBhlC,EAAO2uC,WACnC,GAAI3J,IAAmB73B,EAAAA,EAAAA,MAAkB63B,EAxMR,GAyM/B,OAGF,MAAMvsB,QAAevD,EAAAA,EAAAA,IAAQ,mBAC7B,IAAKuD,EACH,OAGF,MAAM,IAAE1O,GAAQ0O,EAEhBzY,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACH2uC,WAAY,IACP3uC,EAAO2uC,WACVxuB,QAASpW,EACTi7B,iBAAiB73B,EAAAA,EAAAA,SAGrBpC,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,iBAAkBuI,MAAOtU,EAAQmD,EAASyO,KACzD,MAAM,OACJxQ,EAAM,SAAEyvB,EAAQ,MAAEF,EAAK,OAAE5K,EAAM,MAC/B1hB,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,IAAIg9B,GAAgB1uC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOilC,WAAWC,WAAW1Y,GACxE,IAAsB,IAAlB+d,EAAJ,CAIA,QAAsBtlC,IAAlBslC,EAA6B,CAC/B,MAAQj6B,KAAMk6B,EAAS,KAAEzrC,SAAe8R,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE2b,cAAe,CAAC,EAEpF,GADA7wB,GAASmL,EAAAA,EAAAA,OACJ0jC,IAAczrC,EAGjB,OAFApD,EAASopC,GAAyBppC,EAAQ6wB,GAAU,EAAOxsB,QAC3D0G,EAAAA,EAAAA,IAAU/K,GAIZ4uC,EAAgB,CACdtsC,GAAIusC,EAAUvsC,GACdquB,MAAO,GACP5K,OAAQ,GACR+oB,cAAUxlC,EACVylC,aAAa,EACbxtC,QAAS,GACTytC,UAAW,GAGbhvC,EAASopC,GAAyBppC,EAAQ6wB,EAAU+d,EAAevqC,IACnE0G,EAAAA,EAAAA,IAAU/K,EACZ,EAEI2wB,IAAUie,EAAcje,OAAUie,EAAcG,cAI/CpD,GAAsB,MA21B7Br3B,eAAsDtU,GAAW,SAC/D6wB,EAAQ,cACR+d,EAAa,OACbxtC,EAAM,MACNuvB,EAAK,OACL5K,OAOK1hB,GAAQC,EAAAA,EAAAA,QACbtE,GAASmL,EAAAA,EAAAA,MACT,MAAM6jB,GAAMpa,EAAAA,EAAAA,KAAW5U,EAAQ4uC,EAActsC,IACvCc,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAK4tB,IAAQ5rB,EACX,OAGF,MAAM6rC,EAAwBL,EAAcje,QAAUA,EAEtD3wB,EAASopC,GADTppC,EAASwpC,GAA2BxpC,GAAQ,EAAMqE,GACRwsB,EAAU,IAC/C+d,EACHje,WACIse,GAAyB,CAAElpB,YAAQzc,EAAW/H,QAAS,KAC1D8C,IACH0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD8Z,MACA5rB,OACAutB,QACA5K,OAAQkpB,OAAwB3lC,EAAYyc,IAG9C/lB,GAASmL,EAAAA,EAAAA,MACT,MAAM+jC,GAAmBhvC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOilC,WAAWC,WAAW1Y,GAE7E,GADA7wB,EAASwpC,GAA2BxpC,GAAQ,EAAOqE,IAC9CoU,IAAWy2B,GAAoBve,IAAUue,EAAiBve,MAE7D,YADA5lB,EAAAA,EAAAA,IAAU/K,GAIZ,MAAM2uB,EAAa,IAAI1kB,KAAKilC,EAAiB3tC,SAAW,IAAIqN,IAAKgd,GAASA,EAAKtpB,KACzE6sC,EAAa12B,EAAOlX,QAAQO,OAAQ8pB,IAAU+C,EAAWjkB,IAAIkhB,EAAKtpB,KAExEtC,EAASopC,GAAyBppC,EAAQ6wB,EAAU,IAC/Cqe,EACHE,KAAM32B,EAAO22B,KACbJ,UAAWvsC,KAAKC,MAA2B,IAAnB+V,EAAOu2B,aAC3BG,EAAWttC,QAAU,CAAEwtC,UAAW52B,EAAO42B,cACzC52B,EAAOq2B,UAAY,CAAEA,SAAUr2B,EAAOq2B,aACtCr2B,EAAO62B,eAAiB,CAAEA,cAAe72B,EAAO62B,eACpDP,YAAat2B,EAAOlX,QAAQM,OAAS,GAAKuU,QAAQqC,EAAO6N,YACzD/kB,QAAqC,KAA5B2tC,EAAiBnpB,QAAiBmpB,EAAiBnpB,SAAWtN,EAAO6N,WAC1E7N,EAAOlX,SACN2tC,EAAiB3tC,SAAW,IAAIuP,OAAOq+B,GAC5CppB,OAAQopB,EAAWttC,OAAS4W,EAAO6N,WAAa,IAC/CjiB,IAEH0G,EAAAA,EAAAA,IAAU/K,EACZ,CAx5BIuvC,CAAgBvvC,EAAQ,CACtB6wB,WACA+d,gBACAxtC,SACAuvB,QACA5K,UACC1hB,IApCL,KAwCF0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,MACJ+e,EAAK,WAAE+c,EAAU,UAAEzmC,EAAS,OAAEnF,EAAM,MAAEuC,GAAQC,EAAAA,EAAAA,OAC5CsN,EACJ,IAAI,MACFkd,GACEld,EACJ,MAAMxO,GAAOwhB,EAAAA,EAAAA,KAAkB5kB,EAAQqE,GACvC,IAAKjB,EACH,OAGF,IAAK0rB,GAAS7nB,EAAW,CACvB,MAAMjG,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoD,EAAKd,GAAI2E,GACnD,IAAKjG,EACH,OAEF,MAAM6sC,GAASC,EAAAA,EAAAA,KAAa9tC,EAAQgB,GACpC8tB,EAAQ9tB,EAAQmtC,UAAYN,GAAQvrC,EACtC,CAEA,IAAKwsB,EACH,OAGF,MAAM0gB,GAAY56B,EAAAA,EAAAA,KAAW5U,EAAQ8uB,GAChC0gB,GAILrsC,EAAQssC,kBAAkB,CACxB7hC,KAAM,CACJA,KAAM,KAAI8hC,EAAAA,EAAAA,IAAgBF,MAAc7e,KAE1CvvB,OAAQssC,EAAatqC,EAAKd,QAAKgH,EAC/BxH,SACAuC,aAKJ0H,EAAAA,EAAAA,IAAiB,yBAA0BuI,MAAOtU,EAAQmD,EAASyO,KACjE,MAAM,KACJxO,EAAI,GAAEd,EAAE,QAAEqtC,EAAO,UAAElpC,EAAS,OAAE4P,EAAM,SAAER,EAAQ,YAAEC,EAAW,eAAE85B,GAC3Dh+B,QAEEsD,EAAAA,EAAAA,IAAQ,sBAAuB,CACnC9R,OACAysC,SAAUvtC,EACVqtC,UACAlpC,YACA4P,SACAR,WACAi6B,aAAch6B,EACd85B,mBAGEA,GAAgBzsC,EAAQ6jB,oBAG9Bjb,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,GACJtP,EAAE,QAAEqtC,EAAO,SAAE95B,EAAQ,YAAEC,EAAW,SAAElO,EAAQ,OAAExG,EAAM,MACpDiD,GAAQC,EAAAA,EAAAA,OACNsN,EACJ,IAAKtP,EACH,OAGF,MAAMc,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1B0b,GAAiBxG,EAAAA,EAAAA,KAAYtW,EAAQoB,EAAQwG,IAAWnB,UAExDA,GAAYqO,EAAAA,EAAAA,KAAuB9U,EAAQoB,EAAQwG,EAAUkV,GAEnE3Z,EAAQorC,oBAAoB,CAAElqC,UAC9BlB,EAAQ+Z,oBAAoB,CAAE7Y,UAE9B,MAAM2a,QAA2B/E,GAAuBja,EAAQoB,GAC1DmW,EAAS,CACbnU,OACAd,KACAqtC,UACAlpC,YACA4P,QAAQ3U,EAAAA,EAAAA,KAAa1B,EAAQoB,GAC7ByU,WACAC,cACA85B,eAAgB5wB,GAEbA,GAKL7b,EAAQ4sC,uBAAuB,IAAKx4B,IAEpCpU,EAAQqM,iBAAiB,CACvBF,QAASqgC,EACTjgC,MAAO,CAAED,IAAK,4BAA6BiQ,UAAW,CAAE/G,MAAO,GAAK/F,QAAS,CAAE+M,YAAa,IAC5F3e,QAAS,CACPyO,IAAK,2BAA4BiQ,UAAW,CAAEG,QAAQC,EAAAA,EAAAA,IAAkBC,EAAAA,EAAAA,MAAoBf,KAG9FgB,KAAM,OACNC,qBAAqB,EACrB7d,KAAM,cACNiC,WAhBAlB,EAAQ4sC,uBAAuBx4B,MAoBnCxL,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,SAAEif,EAAQ,MAAE/nB,EAAK,MAAEzE,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEvD,IAAIg9B,GAAgB1uC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOilC,WAAWC,WAAW1Y,GAEnE+d,KAIA9lC,GAASrG,KAAKC,MAAQksC,EAAcI,YAEzCJ,EAAgB,CACdtsC,GAAIssC,EAActsC,GAClBquB,MAAO,GACP5K,OAAQ,GACR+oB,cAAUxlC,EACVylC,aAAa,EACbxtC,QAAS,GACTytC,UAAW,GAGbhvC,EAASopC,GAAyBppC,EAAQ6wB,EAAU+d,EAAevqC,IACnE0G,EAAAA,EAAAA,IAAU/K,QAGZ+L,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C03B,GAAappC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOilC,WAAWC,WAE5DzhC,OAAO4G,KAAK46B,GAAYpnC,QAAS2uB,IAC/B1tB,EAAQ6sC,eAAe,CAAEnf,WAAUxsB,eAIvC0H,EAAAA,EAAAA,IAAiB,WAAYuI,MAAOtU,EAAQmD,EAASyO,KACnD,MAAM,MAAEkd,EAAK,MAAEmhB,GAAUr+B,EAEnBod,GAAMpa,EAAAA,EAAAA,KAAW5U,EAAQ8uB,GAC/B,IAAKE,EACH,OAGF,IAAI1U,GAAWC,EAAAA,EAAAA,KAAmBva,EAAQ8uB,GAC1C,IAAKxU,EAAU,CACb,MAAM7B,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5S,GAAI0sB,EAAI1sB,GAAIkpB,WAAYwD,EAAIxD,aAC5ElR,EAAW7B,GAAQ6B,QACrB,CAEIA,GAAU41B,iBACNh7B,EAAAA,EAAAA,IAAQ,cAAe,CAAEP,KAAMqa,UAGjC9Z,EAAAA,EAAAA,IAAQ,WAAY,CACxB8Z,MACAmhB,WAAYF,OAIhBlkC,EAAAA,EAAAA,IAAiB,oBAAqBuI,MAAOtU,EAAQmD,EAASyO,KAC5D,MAAM,MAAEkd,GAAUld,EACZod,GAAMpa,EAAAA,EAAAA,KAAW5U,EAAQ8uB,GAC/B,IAAKE,EACH,OAGF,IAAI1U,GAAWC,EAAAA,EAAAA,KAAmBva,EAAQ8uB,GAC1C,IAAKxU,EAAU,CACb,MAAM7B,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5S,GAAI0sB,EAAI1sB,GAAIkpB,WAAYwD,EAAIxD,aAC5ElR,EAAW7B,GAAQ6B,QACrB,CAEIA,GAAU41B,iBACNh7B,EAAAA,EAAAA,IAAQ,cAAe,CAAEP,KAAMqa,IAGvChvB,GAASmL,EAAAA,EAAAA,MACT,MAAM/H,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQ8uB,GAC1BshB,GAAcx7B,EAAAA,EAAAA,KAAW5U,EAAQA,EAAOiC,eAE9C,IAAKmB,EAAM,OACX,MAAM+D,GAAgB+B,EAAAA,EAAAA,KAAwBlJ,EAAQoD,EAAKd,UAErD4S,EAAAA,EAAAA,IAAQ,cAAe,CAC3B9R,OACAitC,QAAS,CACPj9B,UAAW,UACXgyB,UAAWgL,EAAYhL,WAAa,GACpCD,SAAUiL,EAAYjL,UAAY,GAClCqB,YAAa4J,EAAY5J,aAAe,GACxC9lB,OAAQ0vB,EAAY9tC,IAEtB6E,qBAIJ4E,EAAAA,EAAAA,IAAiB,uBAAwBuI,MAAOtU,EAAQmD,EAASyO,KAC/D,MAAM,IACJkX,EAAG,MAAEgG,EAAK,MAAEif,EAAK,WAAEG,EAAU,eAAEoC,EAAc,oBAAEC,EAAmB,WAAEJ,EAAU,MAC9E9rC,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,GAAIk6B,GAAsB9rC,EAAQ8uB,EAAOzqB,EAAOykB,GAAM,OAEtD,MAAMkG,GAAMpa,EAAAA,EAAAA,KAAW5U,EAAQ8uB,GAC/B,IAAKE,EAAK,OAEV,KAAKwhB,EAAAA,EAAAA,KAAmBxwC,EAAQ8uB,GAY9B,OAXA9uB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BywC,gBAAiB,CACf3hB,QACA1sB,KAAM,SACNsuC,UAAW,CACTrmC,OAAQ,uBACRuH,aAGHvN,QACH0G,EAAAA,EAAAA,IAAU/K,GAIZ,MAAM2wC,QAAmBz7B,EAAAA,EAAAA,IAAQ,uBAAwB,CACvD4T,MACAkG,MACA+e,QACAoC,aACAG,iBACAC,wBAEGI,IAYL3wC,EAASkqC,GARTlqC,GAASmL,EAAAA,EAAAA,MACoB,CAC3B4gC,WAAYjjB,EACZ8nB,QAAS5hB,EAAIoW,UACbtc,IAAK6nB,EACL7hB,QACAof,eAEiD,GAAM,EAAM7pC,IAC/D0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,iBAAkBuI,MAAOtU,EAAQmD,EAASyO,KACzD,MAAM,IACJkX,EAAG,MAAEgG,EAAK,OAAE9sB,EAAM,MAAE+rC,EAAK,SAAEl4B,EAAQ,WAAEq4B,EAAU,cAAE2C,EAAa,WAAEV,EAAU,aAAEroB,EAAY,MACxFzjB,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,GAAIk6B,GAAsB9rC,EAAQ8uB,EAAOzqB,EAAOykB,GAAM,OAEtD,MAAMkG,GAAMpa,EAAAA,EAAAA,KAAW5U,EAAQ8uB,GAC/B,IAAKE,EAAK,OACV,MAAM9U,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EAAM,OAEX,KAAKs2B,EAAAA,EAAAA,KAAmBxwC,EAAQ8uB,GAY9B,OAXA9uB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BywC,gBAAiB,CACf3hB,QACA1sB,KAAM,SACNsuC,UAAW,CACTrmC,OAAQ,iBACRuH,aAGHvN,QACH0G,EAAAA,EAAAA,IAAU/K,GAIZ,MAAM2M,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAEtD,OAAEjD,EAAM,SAAEwG,EAAWD,EAAAA,IAAmBgF,GAAsB,CAAC,EAC/DmQ,EAAiB1b,GAASkV,EAAAA,EAAAA,KAAYtW,EAAQoB,EAAQwG,IAAWnB,eAAY6C,EAC7E7C,EAAYrF,GAAS0T,EAAAA,EAAAA,KAAuB9U,EAAQoB,EAAQwG,EAAUkV,QAAkBxT,EAExF+M,EAASjV,GAASM,EAAAA,EAAAA,KAAa1B,EAAQoB,QAAUkI,EACjDmP,QAAevD,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C4T,MACAkG,MACA9U,OACA6zB,QACAl4B,WACApP,YACAoqC,gBACAV,aACA95B,SACAyR,iBAEF,IAAKrP,EACH,OAGF,MAAQqQ,IAAK6nB,EAAU,QAAEhB,EAAO,aAAEmB,GAAiBr4B,EAanDzY,EAASkqC,GAXTlqC,GAASmL,EAAAA,EAAAA,MACoB,CAC3B4gC,WAAYjjB,EACZA,IAAK6nB,EACLC,QAAS5hB,EAAIoW,UACbtW,QACA9sB,SACA2tC,UACAlpC,YACAynC,eAEiD,GAAM,EAAM7pC,IAC/D0G,EAAAA,EAAAA,IAAU/K,GAEN8wC,IAAgBC,EAAAA,EAAAA,OAClB5tC,EAAQ6tC,uBAAuB,CAAEC,MAAO,aAAc5sC,aAI1D0H,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM,MACJkd,EAAK,OAAE9sB,EAAM,MAAE+rC,EAAK,WAAEoC,EAAU,KAAEe,EAAI,qBAAEC,EAAoB,MAC5D9sC,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAE5B,YADAmD,EAAQiuC,uBAAuB,CAAE/sC,UAInC,GAAIynC,GAAsB9rC,EAAQ8uB,EAAOzqB,GAAQ,OAEjD,MAAM2qB,GAAMpa,EAAAA,EAAAA,KAAW5U,EAAQ8uB,GAC/B,IAAKE,EAAK,OACV,MAAM9U,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EAAM,OAEX,KAAKs2B,EAAAA,EAAAA,KAAmBxwC,EAAQ8uB,GAAQ,CACtC,IAAIqiB,EAcF,OAXAnxC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BywC,gBAAiB,CACf3hB,QACA1sB,KAAM,SACNsuC,UAAW,CACTrmC,OAAQ,qBACRuH,aAGHvN,QACH0G,EAAAA,EAAAA,IAAU/K,GAZVmD,EAAQkuC,eAAe,CAAEviB,QAAOwiB,gBAAgB,EAAMjtC,SAe1D,CAEA,MAAMoU,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CACjD8Z,MACA9U,OACA6zB,QACAoC,aACAe,SAEF,IAAKz4B,EACH,OAGF,MAAQqQ,IAAK6nB,EAAU,QAAEhB,EAAO,aAAE7nB,GAAiBrP,EAWnDzY,EAASkqC,GATTlqC,GAASmL,EAAAA,EAAAA,MACoB,CAC3B2d,IAAK6nB,EACLC,QAAS5hB,EAAIoW,UACbtW,QACA9sB,SACA2tC,UACAzB,WAAY,KAEqC,GAAM,EAAM7pC,IAC/D0G,EAAAA,EAAAA,IAAU/K,GAEN8nB,IAAgBipB,EAAAA,EAAAA,OAClB5tC,EAAQ6tC,uBAAuB,CAAEC,MAAO,aAAc5sC,aAI1D0H,EAAAA,EAAAA,IAAiB,oBAAqBuI,MAAOtU,EAAQmD,EAASyO,KAC5D,MAAM,MACJkd,GACEld,EACEod,GAAMpa,EAAAA,EAAAA,KAAW5U,EAAQ8uB,GAC/B,IAAKE,EAAK,OAEV,MAAMuiB,QAAer8B,EAAAA,EAAAA,IAAQ,qBAAsB,CACjD8Z,QAGFhvB,GAASmL,EAAAA,EAAAA,MACLomC,IACFvxC,EAAS,IACJA,EACH8hC,MAAO,IACF9hC,EAAO8hC,MACV0P,oBAAqB,IAChBxxC,EAAO8hC,MAAM0P,oBAChB,CAAC1iB,GAAQyiB,MAKfxmC,EAAAA,EAAAA,IAAU/K,OAId+L,EAAAA,EAAAA,IAAiB,oCAAqC,CAAC/L,EAAQmD,EAASyO,KACtE,MAAM,MACJvN,GAAQC,EAAAA,EAAAA,OACNsN,GAAW,CAAC,EAEhB,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByxC,qCAAqC,GACpCptC,MAGL0H,EAAAA,EAAAA,IAAiB,qCAAsC,CAAC/L,EAAQmD,EAASyO,KACvE,MAAM,mBAAE8/B,EAAkB,MAAErtC,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAMtE,OAJA5R,GAAS2xC,EAAAA,EAAAA,KAAqB3xC,EAAQ,CACpC4xC,kCAAmCx7B,QAAQs7B,MAGtC3jC,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByxC,yCAAqCnoC,GACpCjF,MAGL0H,EAAAA,EAAAA,IAAiB,oBAAqBuI,MAAOtU,EAAQmD,EAASyO,KAC5D,MAAM,MACJkd,EAAK,QAAE8hB,EAAO,SAAEiB,EAAQ,KAAEX,EAAI,MAAEnD,EAAK,eAAEuD,EAAc,cAAEQ,EAAa,0BAAEC,EAAyB,MAC/F1tC,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,GAAIk6B,GAAsB9rC,EAAQ8uB,EAAOzqB,EAAOusC,GAAU,OAE1D,MAAM5hB,GAAMpa,EAAAA,EAAAA,KAAW5U,EAAQ8uB,GAC/B,IAAKE,EAAK,OAGV,MAAMgjB,EAAuB57B,QAAQpW,EAAOiyC,WAAWC,KAAKljB,EAAI1sB,KAChE,GAAI0sB,EAAImjB,cAAgBL,IAAkBE,EAAsB,CAC9D,MAAMv5B,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C8Z,QAEF,GAAIvW,EAAQ,CACVzY,GAASmL,EAAAA,EAAAA,MAET,MAAMinC,EAAY35B,EAAOuW,IAGzB,GAFwBojB,EAAUC,oBAAsBD,EAAUE,iBAAmBF,EAAUG,cAgB7F,OAbAvyC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BwyC,0BAA2B,CACzBxjB,IAAKojB,EACL1B,UAAW,CACTrmC,OAAQ,oBACRuH,QAAS,IACJA,EACHkgC,eAAe,MAIpBztC,QACH0G,EAAAA,EAAAA,IAAU/K,EAGd,CACF,CAEA,MAAMyyC,QAAev9B,EAAAA,EAAAA,IAAQ,cAAe,CAC1C8Z,MACA4hB,YAIF,GAFA5wC,GAASmL,EAAAA,EAAAA,OAEJsnC,EAEH,YADAtvC,EAAQqM,iBAAiB,CAAExO,SAAS6f,EAAAA,EAAAA,IAAa,8BAA+Bxc,UAMlF,IAF+B0tC,IAA8BU,EAAOC,cAAelC,EAAAA,EAAAA,KAAmBxwC,EAAQ8uB,IAgB5G,OAbAld,EAAQmgC,2BAA4B,EACpC/xC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BywC,gBAAiB,CACf3hB,QACAyd,yBAA0BkG,EAAOlG,yBACjCnqC,KAAM,SACNsuC,UAAW,CACTrmC,OAAQ,oBACRuH,aAGHvN,QACH0G,EAAAA,EAAAA,IAAU/K,GAIZ,MAAMka,GAAO0K,EAAAA,EAAAA,KAAkB5kB,EAAQqE,IAEjC,IAAEykB,EAAG,aAAEhB,SAAuB5S,EAAAA,EAAAA,IAAQ,oBAAqB,CAC/DgF,KAAMA,GAAQ8U,EACd2jB,IAAKF,EACLtC,WAAY0B,EACZX,OACAI,iBACAvD,UAIF,GAFA/tC,GAASmL,EAAAA,EAAAA,OAEJ2d,EAAK,OAEV9oB,GAASmL,EAAAA,EAAAA,MAET,MAAMnJ,EAAUkY,EAAOA,EAAK5X,GAAK0sB,EAAI1sB,GASrCtC,EAASkqC,GAAoBlqC,EAPA,CAC3B8oB,MACA8nB,QAASA,GAAW5hB,EAAIoW,UACxBpjC,SACA8sB,QACAof,WAAY,KAEqC,GAAM,EAAM7pC,IAC/D0G,EAAAA,EAAAA,IAAU/K,GAEN8nB,IAAgBipB,EAAAA,EAAAA,OAClB5tC,EAAQ6tC,uBAAuB,CAAEC,MAAO,aAAc5sC,aAI1D0H,EAAAA,EAAAA,IAAiB,iBAAkBuI,MAAOtU,EAAQmD,EAASyO,KACzD,MAAM,MACJkd,EAAK,OAAE9sB,EAAM,SAAE6T,EAAQ,UAAEpP,EAAS,QAAEkpC,EAAO,MAAEtrC,GAAQC,EAAAA,EAAAA,OACnDsN,EAEEod,GAAMpa,EAAAA,EAAAA,KAAW5U,EAAQ8uB,GAC/B,IAAKE,EAAK,OACV,MAAM9U,GAAO3S,EAAAA,EAAAA,KAAWvH,EAAQgC,GAChC,IAAKkY,EAAM,OAEX,MAAM7D,GAAS3U,EAAAA,EAAAA,KAAa1B,EAAQgC,SAEfkT,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C8Z,MACA9U,OACArE,WACApP,YACAkpC,UACAt5B,YAIAlT,EAAQyvC,kBAAkB,CAAEvuC,aAIhC0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,IACJod,EAAG,KAAEpD,EAAI,WAAEsiB,GACTt8B,GAEJsD,EAAAA,EAAAA,IAAQ,kBAAmB,CACzB8Z,MACApD,OACAsiB,kBAIJniC,EAAAA,EAAAA,IAAiB,iBAAkBuI,gBA4CnCA,eAAqDtU,GACnD,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE0a,UA5C3CijB,IA6CN,GAAKp6B,EAcL,OAVAzY,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHiyC,WAAY,CACVriB,KAAMnX,EAAOmX,KACbsiB,KAAMz5B,EAAOy5B,QAGjBnnC,EAAAA,EAAAA,IAAU/K,GAEHyY,CACT,CA5DQo6B,CAAe7yC,IAErB8yC,EAAAA,GAAAA,GAAqB,CACnBzoC,OAAQ,iBACRuH,aAAStI,GACRypC,EAAAA,QAGLhnC,EAAAA,EAAAA,IAAiB,kBAAmBuI,MAAOtU,EAAQmD,EAASyO,KAC1D,MAAM,MAAEkd,EAAK,eAAEwiB,EAAc,UAAE0B,GAAcphC,EAEvCod,GAAMpa,EAAAA,EAAAA,KAAW5U,EAAQ8uB,GAE1BE,SAEC9Z,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE8Z,MAAKsiB,iBAAgB0B,iBA+C1DjnC,EAAAA,EAAAA,IAAiB,gBAAiB,CAAC/L,EAAQmD,EAASyO,KAClD,MAAM,IACJod,EAAG,WAAEmhB,EAAU,cAAE2B,EAAa,MAAEztC,GAAQC,EAAAA,EAAAA,OACtCsN,EACE0+B,EAAiB,mBAAoB1+B,GAAWA,EAAQ0+B,eAExDO,GAAiB7hB,EACjBikB,GAA4BpC,IAAkB7wC,EAAOiyC,WAAWC,KAAKljB,EAAI1sB,KAC1E0sB,GAAK0jB,YAAc1jB,GAAKqjB,mBAE7B,IAAKP,GAAiBmB,EACpB,OAAOllC,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BwyC,0BAA2B,CACzBxjB,MACA0hB,UAAW,CACTrmC,OAAQ,gBACRuH,QAAS,IACJA,EACHkgC,eAAe,MAIpBztC,GAGL,MAAM0pC,GAAQC,EAAAA,GAAAA,KAYd,GAXIsC,GACFntC,EAAQ8qC,qBAAqB,CAC3Bnf,MAAOE,EAAK1sB,GACZ4rC,WAAY,GACZoC,gBAAgB,EAChBH,aACApC,QACA1pC,UAIA,WAAYuN,EAAS,CACvB,MAAM,OAAExQ,EAAM,SAAEwG,EAAWD,EAAAA,GAAc,IAAEmhB,GAAQlX,EACnDzO,EAAQgoB,WAAW,CAAE/pB,SAAQwG,WAAUvD,UACvClB,EAAQirC,eAAe,CACrBtlB,MACA9mB,OAAQZ,EACR0tB,MAAQ+hB,EAAgBzvC,EAAS4tB,EAAI1sB,GACrCyrC,QACAG,WAAY,GACZ2C,gBACAV,aACA9rC,SAEJ,KAKF0H,EAAAA,EAAAA,IAAiB,0BAA2BuI,MAAOtU,EAAQmD,EAASyO,KAClE,MAAM,eAAE0/B,EAAc,MAAEjtC,GAAQC,EAAAA,EAAAA,OAAsBsN,GAChD,0BAAE4gC,IAA8BtyC,EAAAA,EAAAA,KAAeF,EAAQqE,IAEvD,IAAE2qB,EAAG,UAAE0hB,GAAc8B,EAE3BxyC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BwyC,+BAA2BlpC,GAC1BjF,IACH0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMkzC,GAAUt+B,EAAAA,EAAAA,KAAW5U,EAAQgvB,EAAI1sB,IACvC,GAAK4wC,IAEL/vC,EAAQkuC,eAAe,CAAEviB,MAAOE,EAAI1sB,GAAIgvC,iBAAgBjtC,gBAClD6Q,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE8Z,IAAKkkB,EAAS5B,iBAAgB0B,WAAW,IACxEtC,GAAW,CACb,MAAM,OAAErmC,EAAQuH,QAASuhC,GAAkBzC,EAE3CvtC,EAAQkH,GAAQ8oC,EAClB,KAGFpnC,EAAAA,EAAAA,IAAiB,oBAAqBuI,MAAOtU,EAAQmD,EAASyO,KAC5D,MAAM,OACJxQ,EAAM,SAAEktC,EAAQ,UAAErnC,EAAS,IAAE6hB,EAAG,MAAEzkB,GAAQC,EAAAA,EAAAA,OACxCsN,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD9R,OACAkrC,WACArnC,cAGGwR,IACLzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqsC,QAAS,CACPvjB,MACAokB,OAAQ,CACNoB,WACArnC,YACA7F,OAAQgC,EAAKd,MAGhB+B,IACH0G,EAAAA,EAAAA,IAAU/K,GACVosC,GAAoBpsC,EAAQmD,EAAS2lB,EAAKrQ,EAAQpU,OAGpD0H,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,eAAE0/B,EAAc,MAAEjtC,GAAQC,EAAAA,EAAAA,OAAsBsN,EAChD9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,IAAKyJ,EAASu+B,SAASa,OAAQ,OAC/B,MAAM,OACJA,EAAM,IAAEpkB,GACNhb,EAASu+B,SACP,OAAEjrC,EAAM,UAAE6F,EAAS,SAAEqnC,GAAapB,EAElC9pC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C9R,OACA6D,YACAqnC,WACAgD,mBAEG74B,GAEL2zB,GADApsC,GAASmL,EAAAA,EAAAA,MACmBhI,EAAS2lB,EAAKrQ,EAAQpU,MAGpD0H,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM,IAAEkX,EAAG,MAAEzkB,GAAQC,EAAAA,EAAAA,OAAsBsN,EAErC6G,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE4T,QAChDrQ,IACLzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqsC,QAAS,CACPvjB,QAEDzkB,IACH0G,EAAAA,EAAAA,IAAU/K,GACVosC,GAAoBpsC,EAAQmD,EAAS2lB,EAAKrQ,EAAQpU,OAGpD0H,EAAAA,EAAAA,IAAiB,oBAAqBuI,MAAOtU,EAAQmD,EAASyO,KAC5D,MAAM,eAAE0/B,EAAc,MAAEjtC,GAAQC,EAAAA,EAAAA,OAAsBsN,EAChD9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,IAAKyJ,EAASu+B,SAASvjB,IAAK,OAC5B,MAAM,IAAEA,GAAQhb,EAASu+B,QAEnB5zB,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE4T,MAAKwoB,mBACpD74B,GAEL2zB,GADApsC,GAASmL,EAAAA,EAAAA,MACmBhI,EAAS2lB,EAAKrQ,EAAQpU,MAGpD0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqsC,aAAS/iC,GACRjF,MAoKL0H,EAAAA,EAAAA,IAAiB,aAAcuI,MAAOtU,EAAQmD,EAASyO,KACrD,MAAM,IACJod,EAAG,KAAEokB,EAAMhwB,YAAaiwB,EAAK,MAC7BhvC,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,IAAI,SAAE0hC,GAAa1hC,EACd0hC,IAAUA,GAAWC,EAAAA,GAAAA,GAAqBvzC,GAAQu0B,UAEvD,MAAM,cAAEtyB,GAAkBjC,EACrBiC,GAAkB+sB,IAIvBhvB,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+8B,EAAAA,EAAAA,KAAyB/8B,EAAQ08B,EAAAA,GAAmBC,WAAYt4B,IACzE0G,EAAAA,EAAAA,IAAU/K,IAENozC,GAAQC,UACWn+B,EAAAA,EAAAA,IAAQ,aAAc,CACzC8Z,MAAKskB,WAAUF,OAAMC,YAIrBrzC,GAASmL,EAAAA,EAAAA,MACTnL,GAAS6kC,EAAAA,EAAAA,KACP7kC,EACAgvB,EAAI1sB,GACJ,CACE8iC,UAAWgO,IAGfpzC,GAASuoB,EAAAA,EAAAA,KAAmBvoB,EAAQgvB,EAAI1sB,GAAI,CAAEkxC,IAAKH,KACnDtoC,EAAAA,EAAAA,IAAU/K,IAIdA,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+8B,EAAAA,EAAAA,KAAyB/8B,EAAQ08B,EAAAA,GAAmBM,SAAU34B,IACvE0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,kCAAmCuI,MAAOtU,EAAQmD,EAASyO,KAC1E,MAAM,MACJkd,EAAK,UAAEkkB,EAAS,wBAAES,GAChB7hC,EAEEod,GAAMwf,EAAAA,EAAAA,KAAUxuC,EAAQ8uB,GAEzBA,GAAUE,SAIM9Z,EAAAA,EAAAA,IAAQ,kCAAmC,CAC9D8Z,MAAKgkB,gBAKPhzC,GAASmL,EAAAA,EAAAA,MACTnL,GAASuoB,EAAAA,EAAAA,KAAmBvoB,EAAQ8uB,EAAO,CACzC4kB,0BAA2BV,EAC3BS,6BAEF1oC,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,+BAAgC,CAAC/L,EAAQmD,EAASyO,KACjE,MAAM,MACJkd,EAAK,gBAAE6kB,GACL/hC,EAEEod,GAAMpa,EAAAA,EAAAA,KAAW5U,EAAQ8uB,GAC1BE,IAELhvB,GAASmL,EAAAA,EAAAA,MACTnL,GAAS4zC,EAAAA,EAAAA,KAAwB5zC,EAAQgvB,EAAI1sB,GAAI,CAAEuxC,YAAaF,KAChE5oC,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,6BAA8BuI,MAAOtU,EAAQmD,EAASyO,KACrE,MAAM,MACJq+B,EAAK,MACL5rC,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,IAAKg6B,GAAa,CAChB,MAAMxoC,QAAa0wC,EAAAA,EAAAA,IAAoB9zC,EAAQ+zC,EAAAA,KAC/C,IAAK3wC,EACH,OAEFwoC,GAAcxoC,EAAKd,EACrB,CAEI2tC,GACF9sC,EAAQ6wC,SAAS,CAAEllB,MAAO8c,GAAaqE,UAGzC9sC,EAAQuf,SAAS,CAAEpgB,GAAIspC,GAAavnC,aAGtC0H,EAAAA,EAAAA,IAAiB,sBAAuBuI,UACtC,MAAM2/B,EAASj0C,EAAO2pB,WAAWuqB,gBACjC,IAAKD,EAAQ,OACb,MAAME,EAAoBF,GAASG,EAAAA,EAAAA,IAAwBH,QAAU3qC,EACrE,IAAK6qC,EAAmB,OACxB,MAAM/wC,QAAa0wC,EAAAA,EAAAA,IAAoB9zC,EAAQm0C,GAC/Cn0C,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHq0C,kBAAmBjxC,GAAMd,KAE3ByI,EAAAA,EAAAA,IAAU/K,K,UCv5CZ+L,EAAAA,EAAAA,IAAiB,mBAAoBuI,UACnC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,mBACxBuD,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAASksB,EAAAA,EAAAA,KAAgBlsB,EAAQ,CAAEs0C,YAAa77B,EAAO67B,cACvDt0C,GAASu0C,EAAAA,EAAAA,KAAoBv0C,EAAQ,CAAEw0C,KAAM/7B,EAAO+7B,QACpDzpC,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,gBAAiBuI,MAAOtU,EAAQmD,EAASyO,KACxD,MAAM,gBAAE6iC,EAAe,UAAEC,GAAc9iC,EAEvC5R,GAASu0C,EAAAA,EAAAA,KAAoBv0C,EAAQ,CAAE00B,WAAW,EAAMigB,cAAUrrC,KAClEyB,EAAAA,EAAAA,IAAU/K,GAEV,MAAM40C,QAAkB1/B,EAAAA,EAAAA,IAAQ,gBAAiBu/B,GAEjDz0C,GAASmL,EAAAA,EAAAA,MACTnL,GAASu0C,EAAAA,EAAAA,KAAoBv0C,EAAQ,CAAE00B,WAAW,KAClD3pB,EAAAA,EAAAA,IAAU/K,GAEN40C,GACFF,OAIJ3oC,EAAAA,EAAAA,IAAiB,gBAAiBuI,MAAOtU,EAAQmD,EAASyO,KACxD,MAAM,gBAAE6iC,EAAe,UAAEC,GAAc9iC,EAEvC5R,GAASu0C,EAAAA,EAAAA,KAAoBv0C,EAAQ,CAAE00B,WAAW,EAAMigB,cAAUrrC,KAClEyB,EAAAA,EAAAA,IAAU/K,GAEV,MAAM40C,QAAkB1/B,EAAAA,EAAAA,IAAQ,gBAAiBu/B,GAEjDz0C,GAASmL,EAAAA,EAAAA,MACTnL,GAASu0C,EAAAA,EAAAA,KAAoBv0C,EAAQ,CAAE00B,WAAW,KAClD3pB,EAAAA,EAAAA,IAAU/K,GAEN40C,GACFF,OAIJ3oC,EAAAA,EAAAA,IAAiB,iBAAkBuI,MAAOtU,EAAQmD,EAASyO,KACzD,MAAM,gBACJ6iC,EAAe,SAAEI,EAAQ,KAAEL,EAAI,MAAEM,EAAK,UAAEJ,GACtC9iC,EAEJ5R,GAASu0C,EAAAA,EAAAA,KAAoBv0C,EAAQ,CAAE00B,WAAW,EAAMigB,cAAUrrC,KAClEyB,EAAAA,EAAAA,IAAU/K,GAEV,MAAM40C,QAAkB1/B,EAAAA,EAAAA,IAAQ,iBAAkBu/B,EAAiBI,EAAUL,EAAMM,GAEnF90C,GAASmL,EAAAA,EAAAA,MACTnL,GAASu0C,EAAAA,EAAAA,KAAoBv0C,EAAQ,CAAE00B,WAAW,KAClD3pB,EAAAA,EAAAA,IAAU/K,GAEN40C,GACFF,OAIJ3oC,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,gBACJ6iC,EAAe,MAAEK,EAAK,UAAEJ,EAAS,MACjCrwC,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ5R,GAASu0C,EAAAA,EAAAA,KAAoBv0C,EAAQ,CAAE00B,WAAW,EAAMigB,cAAUrrC,IAClEtJ,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B+0C,cAAeD,GACdzwC,IACH0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAM40C,QAAkB1/B,EAAAA,EAAAA,IAAQ,sBAAuBu/B,EAAiBK,GAExE90C,GAASmL,EAAAA,EAAAA,MACTnL,GAASu0C,EAAAA,EAAAA,KAAoBv0C,EAAQ,CAAE00B,WAAW,EAAOsgB,4BAAwB1rC,IACjFtJ,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B+0C,mBAAezrC,GACdjF,IACH0G,EAAAA,EAAAA,IAAU/K,GAEN40C,GACFF,OAIJ3oC,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,KAAEqjC,GAASrjC,GAEZsD,EAAAA,EAAAA,IAAQ,2BAA4B+/B,MAG3ClpC,EAAAA,EAAAA,IAAiB,kBAAoB/L,IAC5Bu0C,EAAAA,EAAAA,KAAoBv0C,EAAQ,CAAE20C,cAAUrrC,KCxGjD,MAAM4rC,GAA+C,CACnDC,4BAA6B,CAC3BC,MAAO,aACPp0C,QAAS,yBAEXq0C,eAAgB,CACdD,MAAO,aACPp0C,QAAS,yBAEXs0C,OAAQ,CACNF,MAAO,aACPp0C,QAAS,yBAEXu0C,SAAU,CACRH,MAAO,SACPp0C,QAAS,kBAEXw0C,UAAW,CACTJ,MAAO,SACPp0C,QAAS,mBAEXy0C,oBAAqB,CACnBL,MAAO,SACPp0C,QAAS,kBAEX00C,qBAAsB,CACpBN,MAAO,SACPp0C,QAAS,mBAEX20C,IAAK,CACHP,MAAO,MACPp0C,QAAS,iBAEX40C,YAAa,CACXR,MAAO,MACPp0C,QAAS,kB,gBCkhCbsT,eAAeuhC,GACb71C,EAAW81C,EAA+BC,MACtC1xC,GAAQC,EAAAA,EAAAA,QAEZ,MAAMnB,GAAU8b,EAAAA,EAAAA,MACV+2B,EAAUh2C,EAAOi2C,OAAOD,QAE9B,QAAgB1sC,IAAZ0sC,EAAuB,OAE3B,GAAIA,EAAQn2B,OAASk2B,EAEnB,YADA5yC,EAAQ+yC,sBAAsB,CAAE7xC,UAIlC,MAAM8xC,GAAsBC,EAAAA,GAAAA,IAAuBp2C,EAAQ81C,GAC3D,IAAKK,EACH,OAGFn2C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bq2C,sBAAsB,GACrBhyC,IACH0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAM+tC,GAAQC,EAAAA,GAAAA,KACRsI,QAAaphC,EAAAA,EAAAA,IAAQ,iBAAkBihC,EAAqBpI,GAE7DuI,IAILt2C,GAASmL,EAAAA,EAAAA,MAETnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bq2C,sBAAsB,GACrBhyC,IACH0G,EAAAA,EAAAA,IAAU/K,GAEN,UAAWs2C,EACbC,GAAuBD,EAAK5iC,MAAOrP,GAIrClB,EAAQqzC,oBAAoB,CAC1BC,WAAY,CACVX,eACAY,OAAQJ,EAAKI,QAEfryC,UAEJ,CAsEA,SAASkyC,GAAuB7iC,EAAerP,GAC/B,iBAAVqP,GAUJuL,EAAAA,EAAAA,MAAa0M,WAAW,CAAEC,KAAM,CAAE5qB,QAAS0S,EAAOijC,aAAa,GAAQtyC,WATrE4a,EAAAA,EAAAA,MAAazP,iBAAiB,CAC5BxO,QAAS,CACPyO,IAAK,0BAEPpL,SAMN,EAloCA0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,YAAEglC,EAAW,SAAEC,EAAQ,MAAExyC,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEvDkkC,GAAegB,EAAAA,EAAAA,KAA0B92C,EAAQqE,GACvD,IAAKyxC,EACH,OAGF,MAAMK,GAAsBC,EAAAA,GAAAA,IAAuBp2C,EAAQ81C,GACtDK,GAgiBP7hC,eACEtU,EAAW81C,EAAsCc,EAAkBG,MAC/D1yC,GAAQC,EAAAA,EAAAA,QAEZ,MAAMmU,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD4gC,eAAcc,cAAaG,eAE7B,IAAKt+B,EACH,OAGF,MAAM,GAAEnW,EAAE,gBAAE00C,GAAoBv+B,EAChCzY,GAASmL,EAAAA,EAAAA,MAETnL,GAASi3C,EAAAA,EAAAA,KAAiBj3C,EAAQsC,EAAI+B,GAClC2yC,GAAiBn1C,QACnB7B,GAASk3C,EAAAA,EAAAA,KAAsBl3C,EAAQg3C,EAAiB3yC,GACxDrE,GAASm3C,EAAAA,EAAAA,KAAen3C,EAAQo3C,EAAAA,GAAYC,SAAUhzC,IAEtDrE,GAASm3C,EAAAA,EAAAA,KAAen3C,EAAQo3C,EAAAA,GAAYE,SAAUjzC,IAExD0G,EAAAA,EAAAA,IAAU/K,EACZ,CAljBEu3C,CAAsBv3C,EAAQm2C,EAAqBS,EAAaC,EAAUxyC,MAG5E0H,EAAAA,EAAAA,IAAiB,cAAeuI,MAAOtU,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,SAAsBwxC,GAAiBlkC,EAEjDukC,GAAsBC,EAAAA,GAAAA,IAAuBp2C,EAAQ81C,GAC3D,IAAKK,EACH,OAGFn2C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bq2C,sBAAsB,GACrBhyC,IACH0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAM+tC,GAAQC,EAAAA,GAAAA,KACRsI,QAAaphC,EAAAA,EAAAA,IAAQ,iBAAkBihC,EAAqBpI,GAElE,GAAKuI,EAAL,CAUA,GANAt2C,GAASmL,EAAAA,EAAAA,MAETnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bq2C,sBAAsB,GACrBhyC,GAEC,UAAWiyC,EAIb,OAHAvrC,EAAAA,EAAAA,IAAU/K,QAEVu2C,GAAuBD,EAAK5iC,MAAOrP,GAInB,YAAdiyC,EAAKl0C,OACPpC,GAASw3C,EAAAA,EAAAA,KAAcx3C,EAAQ,CAC7B81C,aAAclkC,EACd0kC,OACAmB,oBAAoB,EACpBC,gBAAkB9lC,EAAgB8lC,gBAClCC,YAAQruC,GACPjF,GACHrE,GAASm3C,EAAAA,EAAAA,KAAen3C,EAAQo3C,EAAAA,GAAYE,SAAUjzC,IAGtC,UAAdiyC,EAAKl0C,OACPpC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B43C,aAAc,CACZ9B,eACAQ,OACAqB,OAAQ,YAETtzC,KAGL0G,EAAAA,EAAAA,IAAU/K,EApCV,KAuCF+L,EAAAA,EAAAA,IAAiB,eAAgB,CAAC/L,EAAQmD,EAASyO,KACjD,MAAM,KACJimC,EAAI,OAAE71C,EAAM,QAAEhB,EAAO,eAAE82C,EAAc,cAAEC,EAAa,MAAE1zC,GAAQC,EAAAA,EAAAA,OAC5DsN,EAWJikC,GAAoB71C,EAT0B,CAC5CoC,KAAM,WACNJ,SACAg2C,OAAQH,EAAKv1C,GACbtB,UACA82C,iBACAC,cAAeA,QAAiBzuC,GAGQuuC,EAAK5B,MAAO5xC,MAGxD0H,EAAAA,EAAAA,IAAiB,cAAe,CAAC/L,EAAQmD,EAASyO,KAChD,MAAM,KACJqmC,EAAI,OAAEj2C,EAAM,MAAEi0C,EAAK,MAAE5xC,GAAQC,EAAAA,EAAAA,OAC3BsN,EAQJikC,GAAoB71C,EANgC,CAClDoC,KAAM,iBACN61C,OACAj2C,UAGwCi0C,EAAO5xC,MAGnD0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,OACJ8O,EAAM,OAAEw3B,EAAM,OAAEr4B,EAAM,QAAE7e,EAAO,MAAEqD,GAAQC,EAAAA,EAAAA,OACvCsN,EASJikC,GAAoB71C,EAPkC,CACpDoC,KAAM,mBACNse,SACAw3B,SACAl3C,WAGwC6e,EAAQxb,MAGpD0H,EAAAA,EAAAA,IAAiB,aAAcuI,MAAOtU,EAAQmD,EAASyO,KACrD,MAAM,OACJxQ,EAAM,UAAE6F,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OACzBsN,EACExO,EAAOhC,IAAUmG,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1C,IAAK6F,IAAc7D,EACjB,OAGF,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,aAAc9R,EAAM6D,GAC5CwR,IAILzY,GAASmL,EAAAA,EAAAA,MAEPnL,EAD0B,UAAxByY,EAAO0/B,QAAQ/1C,MACRg2C,EAAAA,EAAAA,KAAgCp4C,EAAQyY,EAAO0/B,QAAS9zC,IAExDg0C,EAAAA,EAAAA,KAAWr4C,EAAQyY,EAAO0/B,QAAS9zC,IAE9C0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD5R,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bs4C,QAAS,KACJp4C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOi0C,QACjC5kC,WAAOpK,IAERjF,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,eAAgB,CAAC/L,EAAQmD,EAASyO,KACjD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs4C,QAAS,KACJp4C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOi0C,QACjCH,aAAS7uC,IAEVjF,MAGL0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,YAAE2mC,EAAW,MAAEl0C,GAAQC,EAAAA,EAAAA,OAAsBsN,GAE7C,eAAE4mC,IAAmBt4C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOi0C,QAAQhC,MAC3D,KAAE1qB,GAAS2sB,EAEjB,GAAuB,WAAnBC,EAA6B,CAC/B,MAAMC,GAAiBC,EAAAA,EAAAA,KAA6B14C,EAAQqE,GAC5D,IAAKo0C,EACH,QAkHNnkC,eACEtU,EACA4rB,EACA6sB,MACIp0C,GAAQC,EAAAA,EAAAA,QAEZ,MAAMqsB,EC7VD,SAA0B/E,GAC/B,MAAM+E,EAAQ7oB,OAAO4G,KAAKkd,GAAMhd,IAAKw8B,GAAM,GAAGA,KAAKxf,EAAKwf,MAAMtqB,KAAK,KACnE,OAAO6P,EAAM9uB,OAAS,EAAI,IAAI8uB,IAAU,EAC1C,CD0VgBgoB,CAAiB,CAC7B,eAAgB/sB,EAAKgtB,WACrB,kBAAmBhtB,EAAKitB,YACxB,iBAAkBjtB,EAAKktB,WACvB,YAAaltB,EAAKmtB,IAClB,oBAAqBntB,EAAKotB,IAC1B,wBAAyBptB,EAAKqtB,UAG1B31B,QAAiB41B,MAAM,mCAAmCvoB,IAAS,CACvEwoB,OAAQ,OACRZ,YAAa,cACba,QAAS,CACP,eAAgB,oCAChBC,cAAe,UAAUZ,OAGvBhgC,QAAe6K,EAASg2B,OAC9B,GAAI7gC,EAAO/E,MAAO,CAChB,MAAMA,EDvUH,SAAwBA,GAK7B,MAAQ1S,QAASoiB,EAAW,KAAE6xB,EAAI,MAAEhF,GAAUv8B,GACxC,MAAE0hC,EAAK,QAAEp0C,GAAYivC,EAAQiF,GAAcjF,GAASiF,GAAcD,GAExE,MAAO,CAAEG,QAAOp0C,UAASoiB,cAC3B,CC8TkBm2B,CAAe9gC,EAAO/E,OAYpC,OAXA1T,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bs4C,QAAS,KACJp4C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOi0C,QACjCX,OAAQ,SACRjkC,MAAO,IACFA,KAGNrP,QACH0G,EAAAA,EAAAA,IAAU/K,EAEZ,CACAA,GAASmL,EAAAA,EAAAA,MACTnL,GAASw5C,EAAAA,EAAAA,KAAkBx5C,EAAQ,CACjCoC,KAAMqW,EAAOrW,KACbE,GAAImW,EAAOnW,IACV+B,GACHrE,GAASm3C,EAAAA,EAAAA,KAAen3C,EAAQo3C,EAAAA,GAAYE,SAAUjzC,IACtD0G,EAAAA,EAAAA,IAAU/K,EACZ,CA9JSy5C,CAAsBz5C,EAAQ4rB,EAAM6sB,EAAgBp0C,EAC3D,MAAO,GAAuB,gBAAnBm0C,EAAkC,CAC3C,MAAMkB,GAAcC,EAAAA,EAAAA,KAA0B35C,EAAQqE,GACtD,IAAKq1C,EACH,QA4JNplC,eACEtU,EACA4rB,EACA8tB,MACIr1C,GAAQC,EAAAA,EAAAA,QAEZ,MAAMiT,EAAS,CACbqiC,KAAM,CACJtE,OAAQ1pB,EAAKgtB,WAAWxe,QAAQ,OAAQ,IACxCyf,iBAAkBjuB,EAAKitB,YACvBiB,gBAAiBluB,EAAKktB,WACtBiB,cAAenuB,EAAKmtB,IAAI3e,QAAQ,OAAQ,MAItC4f,GAAc95C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOi0C,QAAQhC,MAAM2D,aAAaD,YAE7E,IAAIlxB,EAEFA,EADEoxB,EAAAA,IACI,+DAEA,oDAGJF,GAAaG,WAAW,aACvBH,EAAYI,SAAS,4CACxBtxB,EAAMkxB,GAGR,MAAM12B,QAAiB41B,MAAMpwB,EAAK,CAChCqwB,OAAQ,OACRC,QAAS,CACPiB,OAAQ,mBACR,eAAgB,mBAChB,iBAAkBX,GAEpBY,KAAMC,KAAKC,UAAUjjC,KAEjBkB,QAAe6K,EAASg2B,OAE9B,GAAsB,OAAlB7gC,EAAOk/B,OAAiB,CAE1B,MAAMjkC,EAAQ,CAAE+mC,eAAgB,CAAEhrC,IAAK,oBAYvC,OAXAzP,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bs4C,QAAS,KACJp4C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOi0C,QACjCX,OAAQ,SACRjkC,MAAO,IACFA,KAGNrP,QACH0G,EAAAA,EAAAA,IAAU/K,EAEZ,CAEAA,GAASmL,EAAAA,EAAAA,MACTnL,GAAS06C,EAAAA,EAAAA,KAAuB16C,EAAQ,CACtCoC,KAAM,OACNu4C,MAAOliC,EAAOmT,KAAK+uB,OAClBt2C,GACHrE,GAASm3C,EAAAA,EAAAA,KAAen3C,EAAQo3C,EAAAA,GAAYE,SAAUjzC,IACtD0G,EAAAA,EAAAA,IAAU/K,EACZ,CA1NS46C,CAA2B56C,EAAQ4rB,EAAM8tB,EAAar1C,EAC7D,KAGF0H,EAAAA,EAAAA,IAAiB,kBAAmBuI,MAAOtU,EAAQmD,EAASyO,KAC1D,MAAM,iBACJipC,EAAgB,gBAAEC,EAAe,kBAAEC,EAAiB,UAAEC,EAAS,MAC/D32C,GAAQC,EAAAA,EAAAA,OACNsN,EACEqpC,GAAgBC,EAAAA,EAAAA,KAAuBl7C,EAAQqE,GAC/C82C,GAAej7C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOi0C,SAC7C,KAAEhC,EAAI,kBAAE8E,EAAiB,aAAEtF,GAAiBqF,EAElD,IAAKrF,IAAiBQ,EACpB,OAGF,MAAM,eAAEkC,EAAc,OAAE9B,GAAWJ,EAE7BH,GAAsBC,EAAAA,GAAAA,IAAuBp2C,EAAQ81C,GAC3D,IAAKK,EACH,OAGFn2C,GAASw3C,EAAAA,EAAAA,KAAcx3C,EAAQ,CAAE23C,OAAQ,WAAatzC,IACtD0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMu4C,EAAc,CAClB8C,KAAMP,EACNlvB,KAAyB,WAAnB4sB,GACF8C,EAAAA,EAAAA,KAAwBt7C,EAAQqE,IAASk3C,EAAAA,EAAAA,KAA6Bv7C,EAAQqE,UAE/D6Q,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C4gC,aAAcK,EACdO,SACA6B,cACAiD,gBAAiBP,EACjBJ,mBACAE,oBACAK,kBAAmBA,GAAmB1P,MACtCsP,gBAOFh7C,GAASmL,EAAAA,EAAAA,MACTnL,GAASw3C,EAAAA,EAAAA,KAAcx3C,EAAQ,CAAE23C,OAAQ,QAAUtzC,GACnDrE,GAASy7C,EAAAA,EAAAA,KAAaz7C,EAAQqE,IAC9B0G,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQsL,UAAU,CAChB,QAAS,8BACT0sC,eACA92C,cAIJ0H,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,WAAE6kC,EAAU,MAAEpyC,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC5C8pC,GAAcC,EAAAA,EAAAA,KAAmB37C,EAAQqE,GACzCyxC,EAAe4F,GAAa5F,cAAgBW,GAAYX,aAC9D,IAAKA,EAAc,OAEnB,MAAMK,GAAsBC,EAAAA,GAAAA,IAAuBp2C,EAAQ81C,GAC3D,IAAKK,EACH,OAGF,MAAMO,EAAUgF,EAAYpF,MAAMI,QAAUgF,EAAYE,kBAAkBC,oBAAsBpF,GAAYC,OAE5G12C,GAAS87C,EAAAA,EAAAA,KAAmB97C,EAAQ,CAAE23C,OAAQ,WAAatzC,IAC3D0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD4gC,aAAcK,EACdO,WAGF,IAAKj+B,EAMH,OALAzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS87C,EAAAA,EAAAA,KAAmB97C,EAAQ,CAAE23C,OAAQ,UAAYtzC,IAC1D0G,EAAAA,EAAAA,IAAU/K,GACVmD,EAAQ44C,uBAAuB,CAAE13C,eACjClB,EAAQ64C,eAAe,CAAE33C,UAI3BrE,GAASmL,EAAAA,EAAAA,MACTnL,GAAS87C,EAAAA,EAAAA,KAAmB97C,EAAQ,CAAE23C,OAAQ,QAAUtzC,IACxD0G,EAAAA,EAAAA,IAAU/K,GACVmD,EAAQ44C,uBAAuB,CAAE13C,UAE7B,cAAeoU,GACjBtV,EAAQuf,SAAS,CAAEpgB,GAAImW,EAAOhG,UAAWpO,UAG3ClB,EAAQsL,UAAU,CAChB,QAAS,kCACT0sC,aAAc1E,EAAa,CAAEX,gBAAiB4F,EAC9Cr3C,UAEFlB,EAAQ6jB,oBAqHVjb,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,MAAiB,KAAElC,EAAI,MAAEu4C,GAAU/oC,EACnD,OAAO8oC,EAAAA,EAAAA,KAAuB16C,EAAQ,CACpCoC,OACAu4C,SACCt2C,MAGL0H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,KAAEqqC,EAAI,MAAE53C,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC5C,OAAOulC,EAAAA,EAAAA,KAAen3C,EAAQi8C,GAAQ7E,EAAAA,GAAYE,SAAUjzC,MAG9D0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAE5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,GAAKyJ,EAASouC,aACd,OAAOnuC,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bk8C,aAAc,CACZC,MAAOruC,EAASouC,aAAaC,MAC7BC,QAAQ,IAET/3C,MAGL0H,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,eACJoW,EAAc,WAAEq0B,EAAU,UAAEzH,EAAS,OAAE0H,EAAM,aAAEC,EAAY,SAAEC,EAAQ,MACrEn4C,GAAQC,EAAAA,EAAAA,OACNsN,GAAW,CAAC,EAEhBzO,EAAQs5C,sBAER,MAAMhkC,QAAevD,EAAAA,EAAAA,IAAQ,qBACxBuD,IAELzY,GAASmL,EAAAA,EAAAA,MAETnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bk8C,aAAc,CACZC,MAAO1jC,EAAO0jC,MACdn0B,iBACAo0B,QAAQ,EACRC,aACAG,WACAF,SACAC,eACA3H,cAEDvwC,IACH0G,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQu5C,oBAAoB,CAAEr4C,cAGhC0H,EAAAA,EAAAA,IAAiB,oBAAqBuI,MAAOtU,EAAQmD,EAASyO,KAC5D,MAAM,OACJxQ,EAAM,gBAAEu7C,EAAe,MACvBt4C,GAAQC,EAAAA,EAAAA,OACNsN,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,4BAA6B,CACxD9R,SAGIw5C,QAAoB1nC,EAAAA,EAAAA,IAAQ,6BAE7BuD,GAAWmkC,IAIhB58C,GAASmL,EAAAA,EAAAA,MAETnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B68C,cAAe,CACbz7C,SACA07C,MAAOrkC,EACP2jC,QAAQ,EACRO,kBACAC,gBAEDv4C,IACH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,gBAAiBuI,MAAOtU,EAAQmD,EAASyO,KACxD,MAAM,UACJmrC,EAAS,MAAE14C,GAAQC,EAAAA,EAAAA,OACjBsN,EAEJ,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAE5B,YADAmD,EAAQiuC,uBAAuB,CAAE/sC,UAInC,MAAMy4C,QAAc5nC,EAAAA,EAAAA,IAAQ,4BAA6B,CAAC,GACrD4nC,IAEL98C,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bg9C,UAAW,CACTC,UAAWF,EACXD,UAEDz4C,IACH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM,UACJmrC,EAAS,MACT14C,GAAQC,EAAAA,EAAAA,OACNsN,GAAW,CAAC,EAEhB,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAE5B,YADAmD,EAAQiuC,uBAAuB,CAAE/sC,UAInC,MAAM64C,QAAyBhoC,EAAAA,EAAAA,IAAQ,sBAAuB,CAAC,GAE/DlV,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bm9C,eAAgB,CACdf,QAAQ,EACRW,YACAG,qBAED74C,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2BuI,MAAOtU,EAAQmD,EAASyO,KAClE,MAAM,SAAEijC,EAAQ,MAAExwC,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC1C6G,QAAevD,EAAAA,EAAAA,IAAQ,gCAAiC2/B,GAE9D70C,GAASmL,EAAAA,EAAAA,MAKPnL,EAHGyY,EAEM,UAAWA,GACX++B,EAAAA,EAAAA,KAAcx3C,EAAQ,CAAE0T,MAAO,CAAEzP,WAAYwU,EAAOxU,WAAYmxC,MAAO,aAAgB/wC,IAEvFmzC,EAAAA,EAAAA,KAAcx3C,EAAQ,CAAEo7C,kBAAmB3iC,EAAQwjC,KAAM7E,EAAAA,GAAYE,UAAYjzC,IAJjFmzC,EAAAA,EAAAA,KAAcx3C,EAAQ,CAAE0T,MAAO,CAAEzP,WAAY,CAAEwL,IAAK,mBAAqB2lC,MAAO,aAAgB/wC,IAO3G0G,EAAAA,EAAAA,IAAU/K,MA2BZ+L,EAAAA,EAAAA,IAAiB,iBAAkBuI,MAAOtU,EAAQmD,EAASyO,KACzD,MAAM,OAAExQ,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsBsN,EACxCxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,KAAU2e,EAAAA,EAAAA,IAAc3e,MAAS4e,EAAAA,EAAAA,IAAiB5e,GAAQ,OAE/DpD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo9C,WAAY,CACVh8C,WAEDiD,IACH0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C9R,SAGF,IAAKqV,EAEH,YADAtV,EAAQk6C,gBAAgB,CAAEh5C,UAI5BrE,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo9C,WAAY,CACVh8C,SACAk8C,YAAa7kC,IAEdpU,IACH0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMu9C,QAAiBroC,EAAAA,EAAAA,IAAQ,iBAE/B,IAAKqoC,EAAU,OAEfv9C,GAASmL,EAAAA,EAAAA,MACT,MAAM2C,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACnCyJ,EAASsvC,aAEdp9C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo9C,WAAY,IACPtvC,EAASsvC,WACZG,SAAUA,EAASC,SAEpBn5C,IACH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,OAAExQ,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsBsN,EAExCxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EAAM,OAEXpD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9By9C,gBAAiB,CACfr8C,WAEDiD,IACH0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAO09C,EAAiBC,EACtBC,SAA2Bp9B,QAAQC,IAAI,EACvCvL,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE9R,UAC5B8R,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE9R,OAAMy6C,SAAS,KAC3C3oC,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE9R,WAIhC,GADApD,GAASmL,EAAAA,EAAAA,OACJuyC,IAAoBC,IAAwBC,EAK/C,OAJA59C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9By9C,qBAAiBn0C,GAChBjF,QACH0G,EAAAA,EAAAA,IAAU/K,GAIZA,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9By9C,gBAAiB,CACfr8C,SACAk8C,YAAaM,EACbt3B,WAAYo3B,EAAgBp3B,WAC5Bk3B,OAAQ,CACN7kC,MAAO+kC,EAAgB/kC,MACvBmlC,KAAMJ,EAAgBK,WAExBC,aAAc,CACZrlC,MAAOglC,GAAqBhlC,MAC5BmlC,KAAMH,GAAqBI,aAG9B15C,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,6BAA8B,CAAC/L,EAAQmD,EAASyO,KAC/D,MAAM,OAAExQ,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsBsN,GAEjCrK,EAAAA,EAAAA,KAAWvH,EAAQoB,KAGhCpB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bi+C,uBAAwB,CACtB78C,WAEDiD,IACH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,QAAEisC,EAAO,MAAEx5C,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC3D,IAAI9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACtC,IAAKyJ,EAAS2vC,gBAAiB,OAE/B,MAAMr6C,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQ8N,EAAS2vC,gBAAgBr8C,QACzD,IAAKgC,EAAM,OAEXpD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9By9C,gBAAiB,IACZ3vC,EAAS2vC,gBACZS,mBAAmB,IAEpB75C,IACH0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C9R,OACA2iB,OAAQjY,EAAS2vC,gBAAgBn3B,WACjCu3B,YAEF,IAAKplC,EAAQ,OAKb,GAHAzY,GAASmL,EAAAA,EAAAA,MAET2C,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,IAC7ByJ,EAAS2vC,gBAAiB,OAE/B,MAAMU,GAAoBN,EACtB/vC,EAAS2vC,gBAAgBO,cAAcF,MAAQ,GAC/ChwC,EAAS2vC,gBAAgBD,QAAQM,MAAQ,IAAIhtC,OAAO2H,EAAOslC,WAE/D/9C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9By9C,gBAAiB,IACZ3vC,EAAS2vC,gBACZn3B,WAAY7N,EAAO6N,WACnB43B,mBAAmB,EACnB,CAACL,EAAU,eAAiB,UAAW,CACrCllC,MAAOF,EAAOE,MACdmlC,KAAMK,KAGT95C,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,aAAcuI,MAAOtU,EAAQmD,EAASyO,KACrD,MAAM,OAAExQ,EAAM,MAAEg9C,EAAK,MAAE/5C,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE/CxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMi7C,GAAkBh+B,EAAAA,EAAAA,KAAmBrgB,EAAQoB,GAC7Ck9C,EAAmBD,GAAiBE,eAAiB,EAErDC,EAAqBJ,EAAMv8C,OAEjC,IAAIiM,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACtC,MAAMo6C,EAAY3wC,EAASsvC,YAAYE,YAEvC,GAAImB,EAAW,CACb,MAAMC,EAAiBD,EAAUE,gBAAkBF,EAAUE,gBAAkBF,EAAUG,mBAAqB,EACxGC,EAAYJ,EAAUjB,OAASgB,EAC/BM,EAAYL,EAAUE,iBAAmBE,GAAaJ,EAAUE,gBAChEI,EAAwBD,EAAYL,EAAUE,gBAAmBF,EAAUG,mBAC3EI,EAAqBF,EAAYL,EAAUE,gBAAmBD,EAAiBD,EAAUE,gBAE/F3+C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo9C,WAAY,IACPtvC,EAASsvC,WACZE,YAAa,IACRmB,EACHQ,MAAOH,EAAYL,EAAUQ,MAAQ,EAAIR,EAAUQ,MACnDL,mBAAoBG,EACpBJ,gBAAiBK,EACjBE,YAAY,EACZ1B,OAAQqB,KAGXx6C,IACH0G,EAAAA,EAAAA,IAAU/K,EACZ,CAEAA,GAASmL,EAAAA,EAAAA,MACT2C,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAClC,MAAM86C,EAAcrxC,EAASsvC,YAAYG,SAEzC,GAAI4B,EAAa,CACf,MAAMC,GAAUjyC,EAAAA,EAAAA,MACVkyC,EAAcF,EAAYvwC,IAAK0wC,GAC/BlB,EAAM35C,SAAS66C,EAAMC,MAChB,IACFD,EACHl+C,SACA4T,KAAMoqC,EACNI,cAAeJ,EA9wBI,OAixBhBE,GAGTt/C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo9C,WAAY,IACPtvC,EAASsvC,WACZG,SAAU8B,IAEXh7C,IACH0G,EAAAA,EAAAA,IAAU/K,EACZ,CAEA,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,aAAc,CACzCkpC,QACAh7C,SAKF,GAFApD,GAASmL,EAAAA,EAAAA,OAEJsN,EAAQ,CAEX,MAAM2kC,GAAal9C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO+4C,WAWjD,YAVIA,IACFp9C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo9C,WAAY,IACPA,EACHE,YAAamB,EACblB,SAAU4B,IAEX96C,IACH0G,EAAAA,EAAAA,IAAU/K,IAGd,CAEA8N,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAC9Bg6C,IACFr+C,GAASqnB,EAAAA,EAAAA,KAAmBrnB,EAAQoB,EAAQ,CAC1Cm9C,cAAeD,EAAmBF,EAAMv8C,UAIxCiM,EAASsvC,aACXp9C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo9C,WAAY,IACPtvC,EAASsvC,WACZG,SAAU9kC,EAAO+kC,SAElBn5C,KAEL0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,gBAAiBuI,MAAOtU,EAAQmD,EAASyO,KACxD,MAAM,KAAEqmC,EAAI,QAAEj3C,EAAO,MAAEqD,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE/C6G,QAAevD,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C+iC,SAGGx/B,GAQLzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9By/C,cAAe,CACbxH,OACAyH,KAAMjnC,EAAOw8B,KACbj0C,YAEDqD,IACH0G,EAAAA,EAAAA,IAAU/K,IAfRmD,EAAQqM,iBAAiB,CACvBxO,QAAS8yB,EAAAA,GAA0B,yBACnCzvB,aAgBN0H,EAAAA,EAAAA,IAAiB,gBAAiBuI,MAAOtU,EAAQmD,EAASyO,KACxD,MAAM,KAAEqmC,EAAI,MAAE5zC,GAAQC,EAAAA,EAAAA,OAAsBsN,QAEvBsD,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C+iC,WAMF90C,EAAQw8C,gBAAgB,CAAEC,WAAW,EAAMv7C,UAC3ClB,EAAQ08C,mBAAmB,CAAEx7C,cAG/B0H,EAAAA,EAAAA,IAAiB,wBAAyBuI,MAAOtU,EAAQmD,EAASyO,KAChE,MAAM,OACJxQ,EAAM,WAAE0+C,EAAU,eAAEC,EAAc,MAAE17C,GAAQC,EAAAA,EAAAA,OAC1CsN,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAM48C,EAAqBD,GAAgBE,sBAAsBrxC,IAAKtM,IAAOiF,EAAAA,EAAAA,KAAWvH,EAAQsC,IAAKR,OAAOsU,eAEvFlB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD9R,OACA08C,aACAC,eAAgB,CACd39C,KAAM,WACNgB,OACA88C,kBAAmBH,GAAgBG,kBACnCF,qBACAG,UAAWJ,GAAgBI,UAC3BC,iBAAkBL,EAAeK,iBACjCC,UAAWN,EAAeM,UAC1BC,SAAUP,EAAeO,SACzBzgC,OAAQkgC,EAAelgC,WAQ3B1c,EAAQo9C,oBAAoB,CAAEn/C,SAAQiD,aAGxC0H,EAAAA,EAAAA,IAAiB,6BAA8BuI,MAAOtU,EAAQmD,EAASyO,KACrE,MAAM,OACJxQ,EAAM,WAAE0+C,EAAU,eAAEC,EAAc,MAAE17C,GAAQC,EAAAA,EAAAA,OAC1CsN,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAM48C,EAAqBD,GAAgBE,sBAAsBrxC,IAAKtM,IAAOiF,EAAAA,EAAAA,KAAWvH,EAAQsC,IAAKR,OAAOsU,eAEvFlB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD9R,OACA08C,aACAC,eAAgB,CACd39C,KAAM,gBACNgB,OACA88C,kBAAmBH,GAAgBG,kBACnCF,qBACAG,UAAWJ,GAAgBI,UAC3BC,iBAAkBL,EAAeK,iBACjCC,UAAWN,EAAeM,UAC1BC,SAAUP,EAAeO,SACzBzgC,OAAQkgC,EAAelgC,OACvBo2B,MAAO8J,EAAe9J,MACtBnU,MAAOie,EAAeje,UAQ1B3+B,EAAQo9C,oBAAoB,CAAEn/C,SAAQiD,aAGxC0H,EAAAA,EAAAA,IAAiB,cAAe,CAAC/L,EAAQmD,EAASyO,KAChD,MAAM,KACJimC,EAAI,0BAAE2I,EAAyB,aAAEC,EAAY,MAAEp8C,GAAQC,EAAAA,EAAAA,OACrDsN,EAEE8uC,GAAmBC,EAAAA,GAAAA,IAA6B3gD,EAAQ63C,GACzD6I,IAIL1gD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B4gD,6BAA6B,GAC5Bv8C,IAEH0G,EAAAA,EAAAA,IAAU/K,GACVA,GAASmL,EAAAA,EAAAA,MAEThI,EAAQ09C,sBAAsB,CAAEx8C,UAChClB,EAAQ29C,mBAAmB,CAAEz8C,UAExBo8C,EAeL5K,GAAoB71C,EANa,CAC/BoC,KAAM,kBACN2+C,eAAgBlJ,EAChB2I,0BAA2BA,QAA6Bl3C,GAGrBm3C,EAAcp8C,IAdjD6Q,EAAAA,EAAAA,IAAQ,kBAAmB,CACzB6rC,eAAgBL,EAChBF,0BAA2BA,QAA6Bl3C,QAe9DyC,EAAAA,EAAAA,IAAiB,eAAgB,CAAC/L,EAAQmD,EAASyO,KACjD,MAAM,KACJimC,EAAI,YAAEmJ,EAAW,cAAEC,EAAa,MAAE58C,GAAQC,EAAAA,EAAAA,OACxCsN,EAEEsI,GAAO3S,EAAAA,EAAAA,KAAWvH,EAAQghD,GAE1BN,GAAmBC,EAAAA,GAAAA,IAA6B3gD,EAAQ63C,GACzD39B,GAASwmC,IAId1gD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BkhD,8BAA8B,GAC7B78C,IAEH0G,EAAAA,EAAAA,IAAU/K,GACVA,GAASmL,EAAAA,EAAAA,MAEThI,EAAQg+C,uBAAuB,CAAE98C,UACjClB,EAAQ29C,mBAAmB,CAAEz8C,UAExB48C,EAeLpL,GAAoB71C,EANa,CAC/BoC,KAAM,mBACN2+C,eAAgBlJ,EAChBmJ,eAGmCC,EAAe58C,IAdlD6Q,EAAAA,EAAAA,IAAQ,mBAAoB,CAC1B6rC,eAAgBL,EAChBU,OAAQlnC,QAmEdnO,EAAAA,EAAAA,IAAiB,uBAAwBuI,MAAOtU,EAAQmD,EAASyO,KAC/D,MAAM,KACJqmC,EAAI,MAAE5zC,GAAQC,EAAAA,EAAAA,OACZsN,EAEEimC,QAAa3iC,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE+iC,SAE/CJ,EAUL10C,EAAQk+C,kBAAkB,CAAExJ,OAAMxzC,UAThClB,EAAQqM,iBAAiB,CACvBxO,QAAS,CACPyO,IAAK,mBAEPpL,aAQN0H,EAAAA,EAAAA,IAAiB,4BAA6BuI,MAAOtU,EAAQmD,EAASyO,KACpE,MAAM,KACJimC,EAAI,SAAEhD,EAAQ,MAAExwC,GAAQC,EAAAA,EAAAA,OACtBsN,EAEJ,IAAI0vC,GAAoBphD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOi9C,kBACtD,IAAKA,EAAmB,OAExBthD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BshD,kBAAmB,IACdA,EACH5sB,WAAW,EACXigB,cAAUrrC,IAEXjF,IACH0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMuhD,GAAYZ,EAAAA,GAAAA,IAA6B3gD,EAAQ63C,GACvD,IAAK0J,EACH,OAGF,MAAM9oC,QAAevD,EAAAA,EAAAA,IAAQ,6BAA8B,CAAEqsC,YAAW1M,aAExE,GAAKp8B,IAILzY,GAASmL,EAAAA,EAAAA,MACTm2C,GAAoBphD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOi9C,kBAC7CA,GAAL,CAEA,GAAI,UAAW7oC,EASb,OARAzY,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BshD,kBAAmB,IACdA,EACH5sB,WAAW,EACXigB,SAAUl8B,EAAOxU,aAElBI,QACH0G,EAAAA,EAAAA,IAAU/K,GAIZmD,EAAQ4pC,QAAQ,CAAEjkB,IAAKrQ,EAAOqQ,IAAKC,iBAAiB,EAAM1kB,UAC1DlB,EAAQq+C,uBAAuB,CAAEn9C,SAfH,KEloChC0H,EAAAA,EAAAA,IAAiB,iBAAkBuI,UACjC,MAAMmtC,EAAgBzhD,EAAOi2C,MACvByL,GAAqBD,GAAeE,cAEnChK,EAAQgK,SAAsBnhC,QAAQC,IAAI,EAC/CvL,EAAAA,EAAAA,IAAQ,oBACRwsC,GAAoBxsC,EAAAA,EAAAA,IAAQ,+BAA4B5L,KAGrDquC,GAAW+J,IAAsBC,IAItC3hD,GAASmL,EAAAA,EAAAA,MAETnL,EAAS,IACJA,EACHi2C,MAAO,IACFwL,EACHzL,QAAS2B,EAAO3B,QAChB2L,aAAcA,GAAgBF,EAAeE,aAC7CC,QAAS,CACPnhC,SAAKnX,EACLu4C,aAASv4C,EACTw4C,cAAUx4C,GAEZy4C,mBAAez4C,IAIfquC,EAAOiK,UACT5hD,GAASgiD,EAAAA,EAAAA,KAAwBhiD,EAAQ,MAAO23C,EAAOiK,QAASjK,EAAOsK,oBAGrEtK,EAAOoK,gBACT/hD,GAASkiD,EAAAA,EAAAA,KAAyBliD,EAAQ23C,EAAOoK,cAAepK,EAAOwK,0BAGzEp3C,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,wBAAyBuI,MAAOtU,EAAQmD,EAASyO,KAChE,MAAM,KAAExP,GAASwP,EAEXgwC,EAAU5hD,EAAOi2C,OAAO2L,QAAQx/C,GAChC2jB,EAAS67B,GAASt7B,WACxB,GAAIs7B,IAAY77B,EAAQ,OAExB,MAAMtN,QAAevD,EAAAA,EAAAA,IAAQ,yBAA0B,CACrDktC,UAAoB,YAAThgD,QAAsBkH,EACjC+4C,WAAqB,aAATjgD,QAAuBkH,EACnCyc,OAAQA,GAAU,KAGftN,IAILzY,GAASmL,EAAAA,EAAAA,MAETnL,GAASsiD,EAAAA,EAAAA,KAAmBtiD,EAAQyY,EAAOu9B,SACvCv9B,EAAOmpC,UACT5hD,GAASgiD,EAAAA,EAAAA,KAAwBhiD,EAAQoC,EAAMqW,EAAOmpC,QAASnpC,EAAO6N,cAExEvb,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,gBAAiBuI,UAChC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,kBAE7B,IAAKuD,EACH,OAGF,MAAMzP,GAAOkG,EAAAA,EAAAA,IAAqBuJ,EAAQ,MAEpC8pC,EAAwD,CAC5D9hC,IAAK,GACL+hC,MAAO,GACPC,QAAS,GACTC,OAAQ,IAGJC,EAAiB76C,OAAO4G,KAAK1F,GAC7B45C,EAAe96C,OAAOC,OAAOiB,GAE7B65C,EAAqBD,EAAah0C,IAAKipC,GAAUA,EAAKiL,UAAYjL,EAAKv1C,QAAKgH,GAC/ExH,OAAOsU,SAEJ2sC,EAAqBH,EAAah0C,IAAKipC,GAC3CA,EAAKmL,sBAAwBnL,EAAKoL,kBAAoBpL,EAAKv1C,QAAKgH,GAC/DxH,OAAOsU,SAEJ8sC,EAAoBN,EAAah0C,IAAKipC,GAAUA,EAAKsL,mBAAqBtL,EAAKv1C,QAAKgH,GACvFxH,OAAOsU,SAEVmsC,EAAkB9hC,IAAMkiC,EACxBJ,EAAkBE,QAAUI,EAC5BN,EAAkBC,MAAQO,EAC1BR,EAAkBG,OAASQ,EAE3BN,EAAa1gD,QAAS21C,IACpB,MAAMuL,EAAgBvL,EAAK5B,MACtBsM,EAAkBa,KACrBb,EAAkBa,GAAiB,IAErCb,EAAkBa,GAAe33C,KAAKosC,EAAKv1C,MAG7CtC,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHqjD,UAAW,CACTr6C,OACAs6C,cAAef,KAGnBx3C,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,OACJ9P,EAAM,MAAEuC,GAAQC,EAAAA,EAAAA,OACdsN,EAEE9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxCrE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BujD,YAAa,IACRz1C,EAASy1C,YACZzhD,WAEDuC,GACCyJ,EAASy1C,YAAYvL,QACvB70C,EAAQqgD,gBAAgB,CAAExL,OAAQlqC,EAASy1C,YAAYvL,OAAQyL,eAAe,EAAMp/C,WAGtF0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,kBAAmBuI,MAAOtU,EAAQmD,EAASyO,KAC1D,MAAM,OACJomC,EAAM,cAAEyL,EAAa,MAAEp/C,GAAQC,EAAAA,EAAAA,OAC7BsN,EAEJ,IAAI9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACtC,GAAIyJ,EAASy1C,YAAY7uB,WAAc5mB,EAASy1C,YAAYG,cAAgBD,EAAgB,OAE5FzjD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BujD,YAAa,IACRz1C,EAASy1C,YACZ7uB,WAAW,KACP+uB,GAAiB,CACnB9qC,MAAO,EACP2N,gBAAYhd,EACZo6C,aAAa,KAGhBr/C,IACH0G,EAAAA,EAAAA,IAAU/K,GAEVA,GAASmL,EAAAA,EAAAA,MACT2C,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAClC,MAAMiiB,EAAaxY,EAASy1C,YAAYj9B,WAClCq9B,EAAiB71C,EAASy1C,YAAYI,eACtC7hD,EAASgM,EAASy1C,YAAYzhD,OAE9B2W,QAAevD,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C8iC,SACAjyB,OAAQO,EACR5N,MAAOkrC,EAAAA,IACPD,iBACA7hD,WAGF,IAAK2W,EACH,OAGF,MAAM,MACJ1P,EAAK,MACL+4B,GACErpB,EAEJzY,GAASmL,EAAAA,EAAAA,MACT2C,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAElC,MAAMw/C,EAAe/1C,EAASy1C,YAAYzG,MACpCgH,EAAYL,EAAoDhrC,EAAOqkC,MAA3C+G,EAAa/yC,OAAO2H,EAAOqkC,OACvDiH,EAAyBj2C,EAASy1C,YAAYS,gBAE9CA,EADwBl2C,EAASy1C,YAAYvL,SAAWA,GAAUyL,EACxBM,EAAyB,EAAIA,EAC7E/jD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BujD,YAAa,IACRz1C,EAASy1C,YACZvL,SACAr/B,MAAOF,EAAOE,OAAS7K,EAASy1C,YAAY5qC,MAC5CmkC,MAAOgH,EACPG,WAAYxrC,EAAOwrC,YAAcn2C,EAASy1C,YAAYU,WACtDC,SAAUzrC,EAAOyrC,UAAYp2C,EAASy1C,YAAYW,SAClDP,eAAgBlrC,EAAOkrC,eACvBr9B,WAAY7N,EAAO6N,WACnBoO,WAAW,EACXgvB,aAAcjrC,EAAO6N,WACrB09B,oBAED3/C,GAEHrE,GAAS6hC,EAAAA,EAAAA,KAAY7hC,GAAQkP,EAAAA,EAAAA,IAAqB4yB,EAAO,OACzD9hC,GAAS4hC,EAAAA,EAAAA,KAAY5hC,GAAQkP,EAAAA,EAAAA,IAAqBnG,EAAO,QAEzDgC,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MACJvN,GAAQC,EAAAA,EAAAA,OACNsN,GAAW,CAAC,EAEV9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BujD,YAAa,CACXS,gBAAiBl2C,EAASy1C,YAAYS,gBAAkB,EACxDliD,OAAQqiD,EAAAA,IACRxrC,MAAO,EACPmkC,MAAO,KAERz4C,MAGL0H,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM,OACJ5P,EAAM,cAAEyhD,EAAa,MAAEp/C,GAAQC,EAAAA,EAAAA,OAC7BsN,EAEEsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EAAM,OAEXla,GAASmL,EAAAA,EAAAA,MAET,MAAM04C,GAAeO,EAAAA,EAAAA,KAAqBpkD,EAAQgC,EAAQqC,GACpDggD,EAAkBR,GAAcv9B,WAEtC,IAAKm9B,GAAiBI,IAAiBQ,EAAiB,OAExD,MAAMC,GAAiBC,EAAAA,EAAAA,KAAwBvkD,EAAQgC,EAAQqC,GAEzDoU,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDgF,OACA6L,OAAS09B,EAAkC,GAAlBY,EACzBviD,OAAQwiD,IAGVtkD,GAASmL,EAAAA,EAAAA,MACT,MAAMq5C,GAAgBD,EAAAA,EAAAA,KAAwBvkD,EAAQgC,EAAQqC,GAE9D,IAAKoU,GAAU+rC,IAAkBF,EAC/B,OAGF,MAAMR,EAAWD,IAAiBJ,EAAgBI,EAAa/G,MAAMhsC,OAAO2H,EAAOqkC,OAASrkC,EAAOqkC,MAEnG98C,GAASykD,EAAAA,EAAAA,KAAsBzkD,EAAQgC,EAAQ8hD,EAAUrrC,EAAO6N,WAAYjiB,IAC5E0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,OACJ5P,GACE4P,EAEJ9J,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAS4L,KACjCs2C,EAAAA,EAAAA,KAAqBpkD,EAAQgC,EAAQ8L,EAASxL,KAChDa,EAAQuhD,mBAAmB,CAAE1iD,SAAQyhD,eAAe,EAAMp/C,MAAOyJ,EAASxL,UAKhFyJ,EAAAA,EAAAA,IAAiB,yBAA0BuI,UACzC,MAAMytC,EAAgB/hD,EAAOi2C,OAAO8L,cAC9Bh8B,EAASg8B,GAAez7B,WAC9B,GAAIy7B,IAAkBh8B,EAAQ,OAE9B/lB,GAAS2kD,EAAAA,EAAAA,KAA+B3kD,GAAQ,IAChD+K,EAAAA,EAAAA,IAAU/K,GAEV,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,0BAA2B,CACtD6Q,OAAQA,GAAU,KAGftN,IAILzY,GAASmL,EAAAA,EAAAA,MAETnL,GAASsiD,EAAAA,EAAAA,KAAmBtiD,EAAQyY,EAAOu9B,SAC3Ch2C,GAASkiD,EAAAA,EAAAA,KAAyBliD,EAAQyY,EAAOspC,cAAetpC,EAAO6N,aACvEvb,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2BuI,MAAOtU,EAAQmD,EAASyO,KAClE,MAAM,OAAE5P,EAAM,GAAEM,EAAE,YAAEsiD,GAAgBhzC,EAE9BsI,EAAOlY,GAASmY,EAAAA,EAAAA,KAAWna,EAAQgC,QAAUsH,EAE/CtH,IAAWkY,UAEThF,EAAAA,EAAAA,IAAQ,0BAA2B,CACvCgF,OACA2qC,eAAgBviD,EAChBsiD,gBAGFzhD,EAAQ6jB,qBAGVjb,EAAAA,EAAAA,IAAiB,2BAA4BuI,MAAOtU,EAAQmD,EAASyO,KACnE,MAAM,OAAE5P,EAAM,GAAEM,GAAOsP,EAEjBsI,EAAOlY,GAASmY,EAAAA,EAAAA,KAAWna,EAAQgC,QAAUsH,EAE/CtH,IAAWkY,UAEThF,EAAAA,EAAAA,IAAQ,2BAA4B,CACxCgF,OACA2qC,eAAgBviD,IAGlBa,EAAQ6jB,qBAGVjb,EAAAA,EAAAA,IAAiB,uBAAwBuI,MAAOtU,EAAQmD,EAASyO,KAC/D,MAAM,KAAEimC,EAAI,aAAEpkB,EAAY,MAAEpvB,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEpD5P,EAAuB,SAAd61C,EAAKz1C,KAAkBpC,EAAOiC,cAAiB41C,EAAKz2C,OAE7D0jD,GAAmBnE,EAAAA,GAAAA,IAA6B3gD,EAAQ63C,GAC9D,IAAKiN,EAAkB,OAEvB,MAAMC,GAAW7kD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO2gD,WAAWC,cAAcjjD,GACxE,GAAI+iD,GAAUjI,OAAOj7C,OAAQ,CAC3B,MAAMiiD,EAAWiB,EAASjI,MAAMluC,IAAKs2C,GAC/BA,EAAE3D,YAAa4D,EAAAA,GAAAA,IAAwBD,EAAE3D,UAAW1J,GAC/C,IACFqN,EACHE,UAAW3xB,GAGRyxB,GAETllD,GAASykD,EAAAA,EAAAA,KAAsBzkD,EAAQgC,EAAQ8hD,EAAUiB,EAASz+B,WAAYjiB,IAC9E0G,EAAAA,EAAAA,IAAU/K,EACZ,CAEA,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,eAAgB,CAC3CqsC,UAAWuD,EACXrxB,iBAIF,GAFAzzB,GAASmL,EAAAA,EAAAA,OAEJsN,EAGH,OAFAzY,GAASykD,EAAAA,EAAAA,KAAsBzkD,EAAQgC,EAAQ+iD,EAASjI,MAAOiI,EAASz+B,WAAYjiB,QACpF0G,EAAAA,EAAAA,IAAU/K,GAKZ8H,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAS4L,KACjCs2C,EAAAA,EAAAA,KAAqBpkD,EAAQgC,EAAQqC,IACvClB,EAAQuhD,mBAAmB,CAAE1iD,SAAQyhD,eAAe,EAAMp/C,MAAOyJ,EAASxL,UAKhFyJ,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM,KAAEimC,EAAI,MAAExzC,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEtCkzC,GAAmBnE,EAAAA,GAAAA,IAA6B3gD,EAAQ63C,GAC9D,IAAKiN,EAAkB,OAMvB,UAJqB5vC,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C6rC,eAAgB+D,IAIhB,OAGF,MAAM9iD,EAAuB,SAAd61C,EAAKz1C,KAAkBpC,EAAOiC,cAAiB41C,EAAKz2C,OACnE0G,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAS4L,KACjCs2C,EAAAA,EAAAA,KAAqBpkD,EAAQgC,EAAQ8L,EAASxL,KAChDa,EAAQuhD,mBAAmB,CAAE1iD,SAAQyhD,eAAe,EAAMp/C,MAAOyJ,EAASxL,OAG9Ea,EAAQ+yC,sBAAsB,CAAE7xC,aAGlC0H,EAAAA,EAAAA,IAAiB,uBAAwBuI,MAAOtU,EAAQmD,EAASyO,KAC/D,MAAM,OACJomC,EAAM,KAAEH,EAAI,OAAE71C,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OAC5BsN,EAEEyzC,QAAgBnwC,EAAAA,EAAAA,IAAQ,8BAA+B,CAC3D8iC,WAGGqN,IAELrlD,GAASmL,EAAAA,EAAAA,MAETnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BslD,iBAAkB,CAChBtE,YAAah/C,EACb61C,OACA0N,iBAAkBF,IAEnBhhD,IAEH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,wBAAyBuI,MAAOtU,EAAQmD,EAASyO,KAChE,MAAM,KAAEimC,EAAI,OAAE71C,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE9CsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EAAM,OAEX,MAAM8qC,GAAaZ,EAAAA,EAAAA,KAAqBpkD,EAAQgC,EAAQqC,GACxD,IAAK2gD,EAAY,OACjB,MAAMQ,EAAWxlD,EAAO2pB,WAAW87B,kBAC7BC,EAAqBV,EAAWlI,MAAMh7C,OAAQojD,GAAMA,EAAE70C,UACtDs1C,EAAiB9N,EAAKxnC,SACxBq1C,EAAmB5jD,OAAQojD,GAAOA,EAAErN,KAA2BI,OAAUJ,EAAKA,KAA2BI,MACzG,IAAIyN,EAAoB7N,GAItB+N,GAFqBJ,EAAWG,EAAexuC,OAAOquC,GAAYG,GAE7B/2C,IAAKs2C,IAAMvE,EAAAA,GAAAA,IAA6B3gD,EAAQklD,EAAE3D,YAC1Fz/C,OAAOsU,eAEWlB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD0wC,kBACA1rC,UAKFpS,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAS4L,KACjCs2C,EAAAA,EAAAA,KAAqBpkD,EAAQgC,EAAQ8L,EAASxL,KAChDa,EAAQuhD,mBAAmB,CAAE1iD,SAAQyhD,eAAe,EAAMp/C,MAAOyJ,EAASxL,UAKhFyJ,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,KACJimC,EAAI,MAAE9B,GACJnkC,EAEE8uC,GAAmBC,EAAAA,GAAAA,IAA6B3gD,EAAQ63C,GAEzD6I,SAIgBxrC,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD6rC,eAAgBL,EAChB3K,WAKF5yC,EAAQ0iD,qBAAqB,CAAE7jD,OAAQhC,EAAOiC,kB,gBCzchD,IAAI6jD,GAAqB,GAEzB/5C,EAAAA,EAAAA,IAAiB,yBAA0BuI,UACzC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,2BACxBuD,IAKLA,EAAOvW,QAAS6jD,IACVA,EAAkBC,iBACpBC,GAAAA,GAAkB,UAAUF,EAAkBC,gBAAgB1jD,KAAM4jD,EAAAA,GAAeC,SAEjFJ,EAAkBK,YACpBH,GAAAA,GAAkB,UAAUF,EAAkBK,WAAW9jD,KAAM4jD,EAAAA,GAAeC,SAE5EJ,EAAkBM,iBACpBJ,GAAAA,GAAkB,UAAUF,EAAkBM,gBAAgB/jD,KAAM4jD,EAAAA,GAAeC,SAEjFJ,EAAkBO,iBACpBL,GAAAA,IAAkBM,EAAAA,EAAAA,IAAqBR,EAAkBO,gBAAiB,QAAUJ,EAAAA,GAAeC,WAIvGnmD,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVklD,mBAAoB/tC,KAGxB1N,EAAAA,EAAAA,IAAU/K,IAEV8yC,EAAAA,GAAAA,GAAqB,CACnBzoC,OAAQ,yBACRuH,aAAStI,GACRypC,EAAAA,SAGLhnC,EAAAA,EAAAA,IAAiB,uBAAwBuI,UACvC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,yBAC7B,IAAKuD,EACH,OAGF,MAAM,QAAEsa,EAAO,OAAED,EAAM,SAAEhD,GAAarX,EAChCnX,EAAgC,GAEhCmlD,GAAav3C,EAAAA,EAAAA,IAAqB6jB,EAAS,MAEjD,IAAK,MAAM2zB,KAAU3zB,EACnB,GAAI2zB,EAAOC,kBAAmB,CAC5B,MAAMxkD,EAA6B,CACjCC,KAAM,QACNwkD,SAAUF,EAAOE,UAEnBtlD,EAAUmK,KAAKtJ,EACjB,CAGFnC,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACH6mD,oBAAqBJ,EACrB32B,SAAU,IACL9vB,EAAO8vB,SACV42B,OAAQ,CACN52B,WACAgD,WAGJxxB,UAAW,IACNtB,EAAOsB,UACVwlD,gBAAiBxlD,KAGrByJ,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,4BAA6B,CAAC/L,EAAQmD,EAASyO,KAC9D,MAAM,MACJ/D,EAAK,EAAE5N,EAAC,EAAE8mD,EAAC,UAAEC,EAAS,WAAEC,EAAU,MAAE5iD,GAAQC,EAAAA,EAAAA,OAC1CsN,EAEEs1C,EAAyB,CAC7B5kD,GAAIwjD,KACJ53C,eAAgBL,EAChB5N,EAAGF,EAA6BC,EAAQC,GA1FV,GA0FeU,KAAKsN,SACpBk5C,GAC9BJ,EAAGA,EA5F2B,GA4FvBpmD,KAAKsN,SAAuCk5C,GACnDH,YACAC,cAGF,OAAOl5C,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BgO,wBAAyB,KAAK9N,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO2J,yBAA2B,GAAKk5C,IAC3F7iD,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,UACJ3K,EAAS,OAAE7F,EAAM,MAAEyM,EAAK,aAAEu5C,GACxBx1C,EACJ,GAA+B,yBAA3B5R,EAAOkkB,gBAA4C,OAEvD,MAAM9gB,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAE3BgC,GAASyK,KAAS1M,EAAAA,EAAAA,KAAqBnB,EAAQoB,KAI/C8T,EAAAA,EAAAA,IAAQ,uBAAwB,CACnC9R,OACA6D,YACA2/C,SAAU/4C,EACVw5C,WAAYD,OAIhBr7C,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,OACJxQ,EAAM,UAAE6F,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OACzBsN,EACEzP,GAAWmlD,EAAAA,EAAAA,KAAsBtnD,EAAQoB,GACzCJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAE7C9E,GAAanB,KAAWyH,EAAAA,EAAAA,IAAezH,IAE5CmC,EAAQokD,eAAe,CACrBnmD,SACA6F,YACA9E,WACAkC,aAIJ0H,EAAAA,EAAAA,IAAiB,iBAAkBuI,MAAOtU,EAAQmD,EAASyO,KACzD,MAAM,OACJxQ,EAAM,SACNe,EAAQ,kBACRqlD,EAAiB,MACjBnjD,GAAQC,EAAAA,EAAAA,OACNsN,EACJ,IAAI,UAAE3K,GAAc2K,EAEpB,MAAMxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAIJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAEhD,IAAK7D,IAASpC,EACZ,OAGF,MAAMymD,GAAYtmD,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAEzCsmD,EAAoBtxC,QAAQpV,EAAQqd,aAAerd,EAAQ2mD,UAC3DC,EAA8BF,GAChCG,EAAAA,EAAAA,KAA0B7nD,EAAQoB,EAAQJ,EAAQqd,WAAa,QAC/D/U,EACJtI,EAAU0mD,IACNziD,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQwmD,IAClC5mD,EACJiG,EAAYjG,GAASsB,IAAM2E,EAE3B,MAAMhG,GAAgB6mD,EAAAA,EAAAA,IAAiB9mD,GACjC+mD,EAAc9mD,EAAcuQ,KAAMw2C,IAAiB/tB,EAAAA,EAAAA,IAAe+tB,EAAc7lD,IAEhF8lD,EAAmBF,EACrB9mD,EAAca,OAAQkmD,KAAkB/tB,EAAAA,EAAAA,IAAe+tB,EAAc7lD,IAAa,IAAIlB,EAAekB,GAEnGuW,GAAQwvC,EAAAA,EAAAA,KAAuBloD,IAC9BmoD,EAAeC,IAAoB1xC,EAAAA,EAAAA,IAAUuxC,EAAmBxkD,GAAiB,SAAXA,EAAErB,MACzEimD,EAA0BD,EAAiBjxC,OAAOuB,GAClD4vC,EAAiB,IAAIH,KAAkBE,GACvCpkD,GAAaC,EAAAA,EAAAA,IAAclD,IAE7BgD,EAAAA,EAAAA,KAA+BhE,EAAQ,qBACrC+nD,EACF5kD,EAAQolD,mBAAmB,CAAEnkD,YAAaH,EAAY9B,WAAUkC,UAEhElB,EAAQgB,oBAAoB,CAAEC,YAAaH,EAAY9B,WAAUkC,WAIrErE,EAASe,EAAmBf,EAAQgB,EAASsnD,IAC7Cv9C,EAAAA,EAAAA,IAAU/K,GAEV,UACQkV,EAAAA,EAAAA,IAAQ,eAAgB,CAC5B9R,OACA6D,YACA3F,UAAW+mD,EACXb,sBAGEC,GACFtkD,EAAQqlD,uBAEZ,CAAE,MAAO90C,GAEP1T,EAASe,EADTf,GAASmL,EAAAA,EAAAA,MAC2BnK,EAASC,IAC7C8J,EAAAA,EAAAA,IAAU/K,EACZ,KAGF+L,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,OACJxQ,EAAM,UAAE6F,EAAS,MAAE0R,EAAK,2BAAE8vC,GAA6B,EAAK,MAAEpkD,GAAQC,EAAAA,EAAAA,OACpEsN,EACE82C,EAAiB1oD,EAAOg/B,SAAS2pB,oBACjC/kD,EAAa6kD,EAAoE72C,EAAQhO,UAAtB,cAAzB8kD,GAAgBtmD,KAC1DJ,EAAUymD,EAC4D72C,EAAQ5P,OAAtD,SAAzB0mD,GAAgBtmD,KAAkBsmD,EAAe1mD,YAASsH,EAEzDlG,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAElD,IAAK7D,IAASpC,EACZ,OAGF,MAAMK,EAAmBL,EAAQM,WAAWC,SAAW,GACjDqnD,GAAe9kD,EAAAA,EAAAA,IAAgBzC,EAAkBsX,EAAO/U,EAAW5B,GACzEhC,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQgB,EAAQI,OAAQJ,EAAQsB,GAAI,CAC7DhB,UAAW,IACND,EACHE,QAASqnD,MAGb79C,EAAAA,EAAAA,IAAU/K,GAEV,MAAMiE,GAAaC,EAAAA,EAAAA,IAAclD,IAC7BgD,EAAAA,EAAAA,KAA+BhE,EAAQ,oBACzCmD,EAAQgB,oBAAoB,CAC1BC,YAAaH,EACb9B,SAAU,CACRC,KAAM,QAERiC,aAKN0H,EAAAA,EAAAA,IAAiB,mBAAoBuI,MAAOtU,EAAQmD,EAASyO,KAC3D,MAAM,OACJxQ,EAAM,UAAE6F,EAAS,aAAE4hD,EAAY,MAAExkD,GAAQC,EAAAA,EAAAA,OACvCsN,EACExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAElD,IAAK7D,IAASpC,EACZ,OAGF,MAAM8nD,EAAe9nD,EAAQM,WAAWC,SAASiC,KAAMC,GAA0B,SAApBA,EAAEtB,SAASC,MAClEuW,EAAQkwC,GAAgBC,GAAcplD,aAAe,EAC3D,GAAKiV,EAAL,CAGAxV,EAAQ4lD,wBAAwB,CAAE3nD,SAAQ6F,cAE1C,UACQiO,EAAAA,EAAAA,IAAQ,mBAAoB,CAChC9R,OACA6D,YACA0R,QACA/U,UAAWklD,GAAcnlD,eACzB3B,OAAQ8mD,GAAcjlD,aAE1B,CAAE,MAAO6P,GAC6B,oBAA/BA,EAAmB1S,SACtBmC,EAAQ+yC,sBAAsB,CAAE8S,eAAgB,CAAE5nD,SAAQ6F,YAAW4Y,OAAQlH,GAAStU,SAE1F,CAfA,KAkBF0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,YAAExN,EAAW,SAAEjC,EAAQ,MAAEkC,GAAQC,EAAAA,EAAAA,OAAsBsN,EACvD9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,KAAKL,EAAAA,EAAAA,KAA+BhE,EAAQ,mBAAoB,OAEhE,MAAMipD,EAAyBn7C,EAASo7C,gBAAgB9kD,IAAgB,GACxE,GAAI6kD,EAAuBz3C,KAAM23C,IAAWlvB,EAAAA,EAAAA,IAAekvB,EAAQhnD,IACjE,OAGF,MAAMinD,EAAqBH,EAAuBn4C,OAAO3O,GAEzD,OAAO4L,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BkpD,gBAAiB,IACZp7C,EAASo7C,gBACZ,CAAC9kD,GAAcglD,IAEhB/kD,MAGL0H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,YAAExN,EAAW,SAAEjC,EAAQ,MAAEkC,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEvD9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAElC4kD,EAAyBn7C,EAASo7C,gBAAgB9kD,IAAgB,GAElEilD,EAA4BlnD,EAC9B8mD,EAAuBnnD,OAAQqnD,KAAYlvB,EAAAA,EAAAA,IAAekvB,EAAQhnD,IAAa,GAE7EinD,EAAqBC,EAA0BxnD,OAAS,IACzDiM,EAASo7C,gBACZ,CAAC9kD,GAAcilD,IACbt5C,EAAAA,EAAAA,IAAKjC,EAASo7C,gBAAiB,CAAC9kD,IAEpC,OAAO2J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BkpD,gBAAiBE,GAChB/kD,MAGL0H,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,MAAM,SAAEzP,GAAayP,QAEAsD,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE/S,gBAKrDnC,GAASmL,EAAAA,EAAAA,OAEG6L,QAKZhX,EAAS,IACJA,EACHgX,OAAQ,IACHhX,EAAOgX,OACVsyC,gBAAiBnnD,KAGrB4I,EAAAA,EAAAA,IAAU/K,IAXRmD,EAAQomD,iBAcZx9C,EAAAA,EAAAA,IAAiB,6BAA8B,CAAC/L,EAAQmD,EAASyO,KAC/D,MAAM,GAAEtP,EAAE,MAAE+B,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE1C,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BgO,yBAAyB9N,EAAAA,EAAAA,KAAeF,EAAQqE,GAC7C2J,yBAAyBlM,OAAQqnD,GAAWA,EAAO7mD,KAAOA,IAC5D+B,MAGL0H,EAAAA,EAAAA,IAAiB,eAAgBuI,MAAOtU,EAAQmD,EAASyO,KACvD,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAAS,OAEvC,MAAM,OAAEoB,EAAM,UAAE6F,EAAS,SAAE9E,GAAayP,EAClCxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BJ,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAClD,IAAK7D,IAASpC,EACZ,OAGF,MAAM+kB,EAAS/kB,EAAQwoD,UAAUljC,WAC3B7N,QAAevD,EAAAA,EAAAA,IAAQ,4BAA6B,CACxD/S,WACAiB,OACA6D,YACA8e,WAGGtN,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ6F,EAAW,CACpDuiD,SAAU/wC,KAEZ1N,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAAS,OAEvC,MAAM,IAAE+J,EAAG,OAAE3I,GAAWwQ,EAElBxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAE3BgC,GAAmC,yBAA3BpD,EAAOkkB,kBAIpBhP,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEnL,MAAK3G,YAG1C2I,EAAAA,EAAAA,IAAiB,+BAAgC,CAAC/L,EAAQmD,EAASyO,KACjE,MAAM,OACJxQ,EAAM,SAAEwlD,EAAQ,EAAE3mD,EAAC,EAAE8mD,EAAC,UAAEC,EAAS,WAAEC,EAAU,GAAE3kD,EAAE,MAAE+B,GAAQC,EAAAA,EAAAA,OACzDsN,EAEExO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAE1B0M,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,GAAKjB,GAAS0K,EAASE,yBAAyBwD,KAAMi4C,GAAgBA,EAAYnnD,KAAOA,MACpFnB,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAQlC,MAJ+B,yBAA3BpB,EAAOkkB,kBACThP,EAAAA,EAAAA,IAAQ,+BAAgC,CAAE9R,OAAMwjD,cAG3C74C,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BgO,wBAAyBF,EAASE,wBAAwBY,IAAKs4C,GACzDA,EAAuB5kD,KAAOA,EACzB,IACF4kD,EACHjnD,EAAGF,EAA6BC,EAAQC,GACxC8mD,IACAC,YACAC,cAGGC,IAER7iD,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwBuI,MAAOtU,EAAQmD,EAASyO,KAC/D,MAAM,OAAExQ,EAAM,SAAEsW,GAAa9F,EACvBxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMqV,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE9R,OAAMsU,WAAUK,UAAWL,GAAY,OAAIpO,IAGlG,IAAKmP,IAAWA,EAAOnI,SAASzO,OAO9B,OALA7B,EAAS4C,EADT5C,GAASmL,EAAAA,EAAAA,MAC8B/J,EAAQ,CAC7CwD,qBAAsB,SAGxBmG,EAAAA,EAAAA,IAAU/K,GAIZ,MAAM,SAAEsQ,GAAamI,EAEfzP,GAAOkG,EAAAA,EAAAA,IAAqBoB,EAAU,MACtCvG,EAAMjC,OAAO4G,KAAK1F,GAAM4F,IAAIhE,QAElC5K,GAASmL,EAAAA,EAAAA,MAETnL,EAAS4C,EADT5C,GAAS+Y,EAAAA,EAAAA,KAAoB/Y,EAAQoD,EAAKd,GAAI0G,GACP5H,EAAQ,CAC7CoD,iBAAiBsH,EAAAA,EAAAA,IAAO,IAAK1I,EAAKoB,iBAAmB,MAAQuF,IAAMlF,KAAK,CAACC,EAAGC,IAAMA,EAAID,MAGxFiG,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,WAAE7C,EAAU,MAAE1K,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE5CxO,GAAOwhB,EAAAA,EAAAA,KAAkB5kB,EAAQqE,GACvC,IAAKjB,EAAM,OAEX,IAAKA,EAAKwB,qBACR,OAAOhC,EAAsB5C,EAAQoD,EAAKd,GAAI,CAC5CkC,gBAAiB,KAIrB,MAAMI,EAAuBjE,KAAKE,IAAIuC,EAAKwB,qBAAuBmK,EAAWlN,OAAQ,GAC/E2C,GAAmBpB,EAAKoB,iBAAmB,IAAI1C,OAAQQ,IAAQyM,EAAWtK,SAASnC,IAEzFtC,EAAS4C,EAAsB5C,EAAQoD,EAAKd,GAAI,CAC9CkC,kBACAI,0BAGFmG,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQulB,iBAAiB,CAAE3Z,aAAY4V,4BAA4B,EAAMtgB,WAEpEL,EAAAA,EAAAA,KAA+BhE,EAAQ,qBAE5CA,GAASmL,EAAAA,EAAAA,MAET4D,EAAW7M,QAASI,IAClB,MAAMtB,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoD,EAAKd,GAAIA,GACnD,IAAKtB,EAAS,OAEd,MAAM,SAAEmB,EAAQ,MAAEJ,EAAK,SAAEgC,GAAa/C,EAAQM,WAAWM,kBAAkB,IAAM,CAAC,EAClF,GAAIO,GAAY4B,IAAahC,EAAO,CAClC,MAAMkC,GAAaC,EAAAA,EAAAA,IAAclD,GACjCmC,EAAQgB,oBAAoB,CAAEC,YAAaH,EAAY9B,WAAUkC,OAAOC,EAAAA,EAAAA,OAC1E,QAMJyH,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5CxO,GAAOwhB,EAAAA,EAAAA,KAAkB5kB,EAAQqE,GAEvC,IAAKjB,GAAMoB,gBACT,OAAIpB,GAAMwB,sBACD9B,EAAAA,EAAAA,KAAW9C,EAAQoD,EAAKd,GAAI,CACjCsC,qBAAsB,SAG1B,EAGFzB,EAAQ0J,aAAa,CACnBzL,OAAQgC,EAAKd,GAAI2E,UAAW7D,EAAKoB,gBAAgB,GAAIH,QAAOqlD,qBAAsB,QAEpFvmD,EAAQulB,iBAAiB,CAAE3Z,WAAY,CAAC3L,EAAKoB,gBAAgB,IAAKH,aAIpE0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,OAAExQ,EAAM,SAAEwG,EAAWD,EAAAA,IAAmBiK,EACxCxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,GAAKgC,EAIL,OAFA8R,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE9R,OAAMwE,SAAUA,IAAaD,EAAAA,QAAiB2B,EAAY1B,IAEpFA,IAAaD,EAAAA,GACR/E,EAAsB5C,EAAQoD,EAAKd,GAAI,CAC5CsC,0BAAsB0E,EACtB9E,qBAAiB8E,SAHrB,KAWFyC,EAAAA,EAAAA,IAAiB,mBAAoBuI,UACnC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD0a,KAAM5vB,EAAOsB,UAAUsuB,KAAK+5B,eAEzBlxC,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVqoD,aAAclxC,EAAOnX,UACrBsuB,KAAM,IACD5vB,EAAOsB,UAAUsuB,KACpB+5B,aAAclxC,EAAOmX,SAI3B7kB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,sBAAuBuI,UACtC,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CACnD0a,KAAM5vB,EAAOsB,UAAUsuB,KAAKhuB,kBAEzB6W,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVM,gBAAiB6W,EAAOnX,UACxBsuB,KAAM,IACD5vB,EAAOsB,UAAUsuB,KACpBhuB,gBAAiB6W,EAAOmX,SAI9B7kB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,uBAAwBuI,gBAClBY,EAAAA,EAAAA,IAAQ,0BAK7BlV,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVM,gBAAiB,MAGrBmJ,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2BuI,UAC1C,MAAMmE,QAAevD,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD0a,KAAM5vB,EAAOsB,UAAUsuB,KAAKg6B,cAEzBnxC,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVsoD,YAAanxC,EAAOnX,UACpBsuB,KAAM,IACD5vB,EAAOsB,UAAUsuB,KACpBg6B,YAAanxC,EAAOmX,SAI1B7kB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,wBAAyBuI,UACxC,MAAM,KAAEsb,GAAS5vB,EAAO6pD,mBAAqB,CAAC,EAExCpxC,QAAevD,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE0a,SACzD,IAAKnX,EACH,OAGFzY,GAASmL,EAAAA,EAAAA,MAET,MAAM2+C,GAAYC,EAAAA,EAAAA,IAA0BtxC,EAAOuxC,KAAOC,GAAS,EAACC,EAAAA,EAAAA,IAAeD,EAAI9nD,UAAW8nD,IAElGjqD,EAAS,IACJA,EACH6pD,kBAAmB,CACjBj6B,KAAMnX,EAAOmX,KACbu6B,MAAOL,KAGX/+C,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,uBAAwBuI,MAAOtU,EAAQmD,EAASyO,KAC/D,MAAM,SAAEzP,EAAQ,MAAEuN,GAAUkC,EAI5B,UAFqBsD,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE/S,WAAUuN,UAGjE,OAGF1P,GAASmL,EAAAA,EAAAA,MACT,MAAM2+C,EAAY9pD,EAAO6pD,mBAAmBM,MAC5C,IAAKL,EAAW,OAEhB,MAAMr6C,GAAMy6C,EAAAA,EAAAA,IAAe/nD,GAGrBioD,EAAS,IAFHN,EAAUr6C,GAIpBC,SAGF1P,EAAS,IACJA,EACH6pD,kBAAmB,IACd7pD,EAAO6pD,kBACVM,MAAO,IACFL,EACH,CAACr6C,GAAM26C,MAIbr/C,EAAAA,EAAAA,IAAU/K,MC3rBZ+L,EAAAA,EAAAA,IAAiB,iBAAkBuI,MAAOtU,EAAQmD,EAASyO,KACzD,MAAM,OAAExQ,EAAM,QAAEipD,EAAO,MAAEhmD,GAAQC,EAAAA,EAAAA,OAAsBsN,EACjDxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BkZ,GAAW+F,EAAAA,EAAAA,KAAmBrgB,EAAQoB,GAC5C,IAAKgC,IAASkX,EACZ,OAGF,MAAM7B,QAAevD,EAAAA,EAAAA,IACnBm1C,EAAU,uBAAyB,yBACnC,CAAEjnD,OAAMknD,KAAMhwC,EAASiwC,iBAEzB,IAAK9xC,EACH,OAGF,MAAM,MAAE+xC,GAAU/xC,EAClBzY,GAASmL,EAAAA,EAAAA,MACTnL,GAASyqD,EAAAA,EAAAA,KAAiBzqD,EAAQoB,EAAQopD,EAAOnmD,IACjD0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,oCAAqCuI,MAAOtU,EAAQmD,EAASyO,KAC5E,MAAM,OACJ5P,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OACdsN,EACEsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAC1Boe,GAAeC,EAAAA,EAAAA,KAAmBrgB,EAAQgC,GAChD,IAAKkY,EACH,OAGF,MAAMowC,EAAOlqC,GAAcmqC,eACrBC,QAAct1C,EAAAA,EAAAA,IAAQ,qCAAsC,CAAEgF,OAAMowC,SAErEE,IAILxqD,GAASmL,EAAAA,EAAAA,MACTnL,GAAS0qD,EAAAA,EAAAA,KAAoC1qD,EAAQwqD,EAAOnmD,IAC5D0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,wBAAyBuI,MAAOtU,EAAQmD,EAASyO,KAChE,MAAM,OAAExQ,EAAM,UAAE6F,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OAAsBsN,EACnDxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BkZ,GAAW+F,EAAAA,EAAAA,KAAmBrgB,EAAQoB,GAC5C,IAAKgC,IAASkX,EACZ,OAGF,MAAMgwC,EAAOhwC,EAASiwC,eACtB,IAAI9xC,QAAevD,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE9R,OAAM6D,YAAWqjD,SACnE7xC,IACHA,EAAS,CAAC,GAGZzY,GAASmL,EAAAA,EAAAA,MAET,MAAM,WACJ4hB,EAAU,cACVE,EAAa,UACb3rB,IACEsI,EAAAA,EAAAA,KAAmB5J,EAAQoB,GAAQ6F,IAAc,CAAC,EACtDwR,EAAOsU,WAAaA,EACpBtU,EAAOwU,cAAgBA,EACvBxU,EAAOkyC,eAAiBrpD,GAAWC,QAC/BD,GAAWC,QAAQmc,OAAO,CAACC,EAAKxb,IAAawb,EAAMxb,EAASwW,MAAO,QACnErP,EAEJtJ,GAAS4qD,EAAAA,EAAAA,KAAwB5qD,EAAQyY,EAAQpU,IACjD0G,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQ0nD,0BAA0B,CAChCzpD,SACA6F,YACA5C,aAIJ0H,EAAAA,EAAAA,IAAiB,4BAA6BuI,MAAOtU,EAAQmD,EAASyO,KACpE,MAAM,OAAExQ,EAAM,UAAE6F,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OAAsBsN,EACnDxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BkZ,GAAW+F,EAAAA,EAAAA,KAAmBrgB,EAAQoB,GAC5C,IAAKgC,IAASkX,EACZ,OAGF,MAAMgwC,EAAOhwC,EAASiwC,eAChBC,GAAQtqD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOymD,WAAWrlD,gBAAkB,CAAC,EAE1E,GAAI+kD,GAAOO,iBAAmBP,EAAMlkC,WAAY,OAEhD,MAAMykC,QAAuB71C,EAAAA,EAAAA,IAAQ,6BAA8B,CACjE9R,OAAM6D,YAAWqjD,OAAMvkC,OAAQykC,EAAMlkC,cAEjC,SACJ4G,EAAQ,WACR5G,EAAU,MACV3N,GACEoyC,GAAkB,CAAC,EAGjBC,EAAyBR,EAAMS,oBAAoBppD,QAAUqrB,GAAUrrB,SACxEyB,EAAAA,EAAAA,GAAaknD,EAAMS,mBAAmBT,EAAMS,mBAAmBppD,OAAS,GAAIqrB,EAAS,IAE1FltB,GAASmL,EAAAA,EAAAA,MACTnL,GAAS4qD,EAAAA,EAAAA,KAAwB5qD,EAAQ,IACpCwqD,EACHO,eAAgBpyC,GAASuU,GAAUrrB,OACnCopD,oBAAqBT,EAAMS,oBAAsB,IAAIn6C,OACnDk6C,EAAyB99B,EAAS/V,MAAM,GAAM+V,GAAY,IAE5D5G,cACCjiB,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,2BAA4BuI,MAAOtU,EAAQmD,EAASyO,KACnE,MAAM,OACJxQ,EAAM,MAAEu5C,EAAK,KAAEvH,EAAI,aAAE8X,EAAY,MAAE7mD,GAAQC,EAAAA,EAAAA,OACzCsN,EACE0I,GAAW+F,EAAAA,EAAAA,KAAmBrgB,EAAQoB,GAC5C,IAAKkZ,EACH,OAGF,MAAMgwC,EAAOhwC,EAASiwC,eAChB9xC,QAAevD,EAAAA,EAAAA,IAAQ,4BAA6B,CAAEylC,QAAO2P,OAAMY,iBAEpEzyC,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAASmrD,EAAAA,EAAAA,KAAsBnrD,EAAQoB,EAAQgyC,EAAM36B,EAAQpU,IAC7D0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,OAAExQ,EAAM,QAAEqL,EAAO,MAAEpI,GAAQC,EAAAA,EAAAA,OAAsBsN,EACjDxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BkZ,GAAW+F,EAAAA,EAAAA,KAAmBrgB,EAAQoB,GAC5C,IAAKgC,IAASkX,EACZ,OAGF,MAAMgwC,EAAOhwC,EAASiwC,eACtB,IAAI9xC,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE9R,OAAMqJ,UAAS69C,SAC/D7xC,IACHA,EAAS,CAAC,GAEZzY,GAASmL,EAAAA,EAAAA,MAET,MAAM2gB,GAAQC,EAAAA,EAAAA,KAAgB/rB,EAAQoB,EAAQqL,IACxC,cACJwgB,EAAgB,EAAC,WACjBF,EAAa,EAAC,eACd49B,EAAiB,GACf7+B,GAAS,UAAWA,GAASA,EAAMkB,MAAQlB,EAAMkB,MAAQ,CAAC,EAC9DvU,EAAOsU,WAAaA,EACpBtU,EAAOwU,cAAgBA,EACvBxU,EAAOkyC,eAAiBA,EACxB3qD,GAASmL,EAAAA,EAAAA,MACTnL,GAASorD,EAAAA,EAAAA,KAAsBprD,EAAQyY,EAAQpU,IAC/C0G,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQkoD,wBAAwB,CAC9BjqD,SACAqL,UACApI,aAIJ0H,EAAAA,EAAAA,IAAiB,0BAA2BuI,MAAOtU,EAAQmD,EAASyO,KAClE,MAAM,OAAExQ,EAAM,QAAEqL,EAAO,MAAEpI,GAAQC,EAAAA,EAAAA,OAAsBsN,EACjDxO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1BkZ,GAAW+F,EAAAA,EAAAA,KAAmBrgB,EAAQoB,GAC5C,IAAKgC,IAASkX,EACZ,OAGF,MAAMgwC,EAAOhwC,EAASiwC,eAChBC,GAAQtqD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOymD,WAAWQ,cAAgB,CAAC,EAExE,GAAId,GAAOO,iBAAmBP,EAAMlkC,WAAY,OAEhD,MAAM,eACJykC,EAAc,MACdpyC,EAAK,WACL2N,SACQpR,EAAAA,EAAAA,IAAQ,2BAA4B,CAC5C9R,OAAMqJ,UAAS69C,OAAMvkC,OAAQykC,EAAMlkC,cAC/B,CAAC,EAEPtmB,GAASmL,EAAAA,EAAAA,MACTnL,GAASorD,EAAAA,EAAAA,KAAsBprD,EAAQ,IAClCwqD,EACHO,eAAgBpyC,GAASoyC,GAAgBlpD,OACzCopD,oBAAqBT,EAAMS,oBAAsB,IAAIn6C,OACnDi6C,GAAkB,IAEpBzkC,cACCjiB,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,0CAA2CuI,MAAOtU,EAAQmD,EAASyO,KAClF,MAAM,OACJ5P,EAAM,gBAAEyyC,EAAe,MAAEpwC,GAAQC,EAAAA,EAAAA,OAC/BsN,EAEJ5R,GAASurD,EAAAA,EAAAA,KAA8BvrD,EAAQ,CAC7C00B,WAAW,GACVrwB,IACH0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMka,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EACH,OAGF,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,wCAAyC,CAAEgF,OAAMu6B,oBAEzEh8B,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAASurD,EAAAA,EAAAA,KAA8BvrD,EAAQ,CAC7C00B,WAAW,EACXigB,SAAU,UAAWl8B,EAASA,EAAOxU,gBAAaqF,GACjDjF,IACH0G,EAAAA,EAAAA,IAAU/K,GAEN,QAASyY,IACXtV,EAAQ4pC,QAAQ,CACdjkB,IAAKrQ,EAAOqQ,IACZC,iBAAiB,EACjB1kB,QACA2kB,iBAAiB,IAEnB7lB,EAAQqoD,mCAAmC,CAAEnnD,eCpOjD0H,EAAAA,EAAAA,IAAiB,iBAAkBuI,UACjC,IAAIjP,EAAI,EAER,KAAOrF,EAAOyrD,QAAQC,SAAS,CAC7B,GAAIrmD,KANqB,IAYvB,YALIo6B,EAAAA,KAEFjlB,QAAQ9G,MAAM,qDAMlB1T,GAASmL,EAAAA,EAAAA,MACT,MAAM,UAAEwgD,EAAS,QAAED,GAAY1rD,EAAOyrD,QACtC,GAAIE,IAAcD,EAChB,OAGF,MAAMjzC,QAAevD,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C02C,gBAAiBD,EACjBA,cAGF,IAAKlzC,EACH,QAGFzY,GAASmL,EAAAA,EAAAA,OACFsgD,QAAQE,UAAYlzC,EAAOw4B,MAE9B,gBAAiBx4B,IACnBzY,GAAS6rD,EAAAA,EAAAA,KAAW7rD,EAAQyY,EAAOqzC,aACnC9rD,GAAS+rD,EAAAA,EAAAA,KAAuB/rD,EAAQyY,EAAOqzC,cAC/C9rD,GAASgsD,EAAAA,EAAAA,KAAkBhsD,EAAQyY,EAAOwzC,cACnCR,QAAQC,QAAUjzC,EAAOyzC,UAGlCnhD,EAAAA,EAAAA,IAAU/K,EACZ,KAGF+L,EAAAA,EAAAA,IAAiB,uBAAwBuI,UACvC,IAAIjP,EAAI,EAER,KAAOrF,EAAOyrD,QAAQU,kBAAkB,CACtC,GAAI9mD,KAhDqB,IAsDvB,YALIo6B,EAAAA,KAEFjlB,QAAQ9G,MAAM,2DAMlB1T,GAASmL,EAAAA,EAAAA,MACT,MAAM,iBAAEihD,EAAgB,iBAAED,GAAqBnsD,EAAOyrD,QACtD,GAAIW,IAAqBD,EACvB,OAGF,MAAM1zC,QAAevD,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C02C,gBAAiBQ,EACjBT,UAAWS,EACXC,UAAU,IAGZ,IAAK5zC,EACH,QAGFzY,GAASmL,EAAAA,EAAAA,OACFsgD,QAAQW,iBAAmB3zC,EAAOw4B,MAErC,gBAAiBx4B,IACnBzY,GAAS6rD,EAAAA,EAAAA,KAAW7rD,EAAQyY,EAAOqzC,aACnC9rD,GAAS+rD,EAAAA,EAAAA,KAAuB/rD,EAAQyY,EAAOqzC,cAC/C9rD,GAASgsD,EAAAA,EAAAA,KAAkBhsD,EAAQyY,EAAOwzC,cACnCR,QAAQU,iBAAmB1zC,EAAOyzC,UAG3CnhD,EAAAA,EAAAA,IAAU/K,EACZ,KAGF+L,EAAAA,EAAAA,IAAiB,yBAA0BuI,MAAOtU,EAAQmD,EAASyO,KACjE,MAAM,OAAE5P,GAAW4P,EACbsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAC1B8pD,GAAcQ,EAAAA,EAAAA,KAAkBtsD,EAAQgC,GAC9C,IAAKkY,IAAS4xC,EACZ,OAEF,MAAMS,EAAkBzkD,OAAOC,OAAO+jD,EAAY9iD,MAAM0U,OAAO,CAACC,EAAKmO,KAC7D,YAAaA,GACjBnO,EAAIlS,KAAKqgB,EAAMxpB,IAGVqb,GACN,IAEH,GAA+B,IAA3B4uC,EAAgB1qD,OAClB,OAGF,MAAM4W,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDgF,OACAnQ,IAAKwiD,IAGF9zC,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAASwsD,EAAAA,EAAAA,KAAkBxsD,EAAQgC,EAAQyW,EAAOgzC,QAAShzC,EAAO9H,YAClE5F,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,YAAauI,MAAOtU,EAAQmD,EAASyO,KACpD,MAAM,OAAE5P,EAAM,QAAEyK,EAAO,MAAEpI,GAAQC,EAAAA,EAAAA,OAAsBsN,EACjDsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAC1B8pB,GAAQC,EAAAA,EAAAA,KAAgB/rB,EAAQgC,EAAQyK,GAC9C,IAAKyN,IAAS4R,KAAW,YAAaA,GACpC,OAGF9rB,GAASysD,EAAAA,EAAAA,KAA6BzsD,EAAQgC,EAAQyK,EAASpI,IAC/D0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAM0sD,GAAav/C,EAAAA,EAAAA,MAEf2e,EAAM+R,WAAa6uB,GAAc5gC,EAAM6gC,cACpCz3C,EAAAA,EAAAA,IAAQ,YAAa,CAAEgF,OAAMzN,aAGlBzM,EAAOyrD,QAAQmB,SAAS5qD,GAAQ6qD,YAAc,GAAK/gC,EAAMxpB,UAKtD4S,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CgF,OACAzN,cAOFzM,GAASmL,EAAAA,EAAAA,MACTnL,GAAS8sD,EAAAA,EAAAA,KAA2B9sD,EAAQgC,EAAQyK,IACpD1B,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,cAAeuI,MAAOtU,EAAQmD,EAASyO,KACtD,MAAM,OAAE5P,EAAM,QAAEyK,GAAYmF,EAEtBsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAC3BkY,SAIgBhF,EAAAA,EAAAA,IAAQ,cAAe,CAAEgF,OAAMzN,cAMpDzM,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+sD,EAAAA,EAAAA,KAAgB/sD,EAAQgC,EAAQyK,IACzC1B,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,uBAAwBuI,MAAOtU,EAAQmD,EAASyO,KAC/D,MAAM,OAAE5P,EAAM,QAAEyK,EAAO,YAAEkgD,GAAgB/6C,EAEnCsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EACH,OAGF,MAAM4R,GAAQC,EAAAA,EAAAA,KAAgB/rB,EAAQgC,EAAQyK,GACxCugD,EAAkBlhC,GAAS,YAAaA,EAAQA,EAAM6gC,iBAAcrjD,EAC1EtJ,GAASitD,EAAAA,EAAAA,KAAgBjtD,EAAQgC,EAAQyK,EAAS,CAAEkgD,gBACpD3sD,GAASktD,EAAAA,EAAAA,KAAuBltD,EAAQgC,EAAQyK,EAASkgD,IACzD5hD,EAAAA,EAAAA,IAAU/K,GAEV,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEgF,OAAMzN,UAASkgD,gBACjEl0C,GAAQ5W,SACX7B,GAASmL,EAAAA,EAAAA,MACTnL,GAASitD,EAAAA,EAAAA,KAAgBjtD,EAAQgC,EAAQyK,EAAS,CAAEkgD,YAAaK,IACjEhtD,GAASktD,EAAAA,EAAAA,KAAuBltD,EAAQgC,EAAQyK,EAASugD,IACzDjiD,EAAAA,EAAAA,IAAU/K,OAId+L,EAAAA,EAAAA,IAAiB,yBAA0BuI,MAAOtU,EAAQmD,EAASyO,KACjE,MAAM,OAAE5P,EAAM,QAAEyK,GAAYmF,EACtBsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAC1B8pD,GAAcQ,EAAAA,EAAAA,KAAkBtsD,EAAQgC,GAC9C,IAAKkY,IAAS4xC,EACZ,OAGF,MAAMqB,GAAeC,EAAAA,EAAAA,KAAoBptD,EAAQgC,IAAS4M,IAAKy+C,GAAMA,EAAE/qD,KAAO,GAExEuO,EADas8C,EAAa1oD,SAASgI,GACP0gD,EAAarrD,OAAQQ,GAAOA,IAAOmK,GAAW,IAAI0gD,EAAc1gD,GAElGzM,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHyrD,QAAS,IACJzrD,EAAOyrD,QACVmB,SAAU,IACL5sD,EAAOyrD,QAAQmB,SAClB,CAAC5qD,GAAS,IACL8pD,EACHn7C,UAAWE,EAAahM,KAAK,CAACC,EAAGC,IAAMA,EAAID,QAKnDiG,EAAAA,EAAAA,IAAU/K,SACWkV,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEgF,OAAMozC,SAAUz8C,MAGvE7Q,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHyrD,QAAS,IACJzrD,EAAOyrD,QACVmB,SAAU,IACL5sD,EAAOyrD,QAAQmB,SAClB,CAAC5qD,GAAS,IACL8pD,EACHn7C,UAAWw8C,OAKnBpiD,EAAAA,EAAAA,IAAU/K,OAId+L,EAAAA,EAAAA,IAAiB,kBAAmBuI,MAAOtU,EAAQmD,EAASyO,KAC1D,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAAS,OAEvC,MAAM,OAAEgC,GAAW4P,EACbsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EAAM,OAEX,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEgF,SAC9CzB,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAASwsD,EAAAA,EAAAA,KAAkBxsD,EAAQgC,EAAQyW,EAAOgzC,SAC9ChzC,EAAO80C,kBACTvtD,GAAS8sD,EAAAA,EAAAA,KAA2B9sD,EAAQgC,EAAQyW,EAAO80C,mBAE7DxiD,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,yBAA0BuI,MAAOtU,EAAQmD,EAASyO,KACjE,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAAS,OAEvC,MAAM,OAAEgC,EAAM,SAAE0V,GAAa9F,EACvBsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAI8pD,GAAcQ,EAAAA,EAAAA,KAAkBtsD,EAAQgC,GAC5C,IAAKkY,GAAQ4xC,GAAajmB,cACxB,OAGF,MAAMptB,QAAevD,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEgF,OAAMxC,aAC3De,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAASwsD,EAAAA,EAAAA,KAAkBxsD,EAAQgC,EAAQyW,EAAOgzC,QAAShzC,EAAO9H,WAClEm7C,GAAcQ,EAAAA,EAAAA,KAAkBtsD,EAAQgC,IACK,IAAzC8F,OAAOC,OAAO0Q,EAAOgzC,SAAS5pD,QAC5BiqD,GAAa0B,YAAY3rD,QAAUiqD,GAAa0B,WAAW3rD,QAAU4W,EAAOE,SAChF3Y,GAASytD,EAAAA,EAAAA,KAA6BztD,EAAQgC,GAAQ,KAGxD+I,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,qBAAsBuI,MAAOtU,EAAQmD,EAASyO,KAC7D,IAAIyS,EAAAA,EAAAA,KAA0BrkB,GAAS,OAEvC,MAAM,OAAEgC,EAAM,SAAE0V,GAAa9F,EACvBsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAI8pD,GAAcQ,EAAAA,EAAAA,KAAkBtsD,EAAQgC,GAC5C,IAAKkY,GAAQ4xC,GAAa4B,qBAAsB,OAEhD,MAAMj1C,QAAevD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEgF,OAAMxC,aACvDe,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAASwsD,EAAAA,EAAAA,KAAkBxsD,EAAQgC,EAAQyW,EAAOgzC,aAASniD,GAAW,GAEtEwiD,GAAcQ,EAAAA,EAAAA,KAAkBtsD,EAAQgC,IACK,IAAzC8F,OAAOC,OAAO0Q,EAAOgzC,SAAS5pD,QAC5BiqD,GAAa6B,YAAY9rD,QAAUiqD,GAAa6B,WAAW9rD,QAAU4W,EAAOE,SAChF3Y,GAASytD,EAAAA,EAAAA,KAA6BztD,EAAQgC,GAAQ,GAAM,KAE9D+I,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,uBAAwBuI,MAAOtU,EAAQmD,EAASyO,KAC/D,MAAM,OAAE5P,EAAM,SAAEsrD,GAAa17C,EACvBsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EACH,OAGF,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEgF,OAAMnQ,IAAKujD,IAC9D70C,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAASwsD,EAAAA,EAAAA,KAAkBxsD,EAAQgC,EAAQyW,EAAOgzC,UAClD1gD,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,iBAAkBuI,MAAOtU,EAAQmD,EAASyO,KACzD,MAAM,OAAE5P,EAAM,QAAEyK,GAAYmF,EACtBsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EACH,OAGF,MAAMzB,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEgF,OAAMozC,SAAU,CAAC7gD,KAEhEgM,IAILzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS4tD,EAAAA,EAAAA,KAAqB5tD,EAAQgC,EAAQyK,EAASgM,EAAOuU,QAC9DjiB,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,oBAAqBuI,MAAOtU,EAAQmD,EAASyO,KAC5D,MAAM,OACJ5P,EAAM,QACNyK,EAAO,OACPsZ,EAAM,kBACN8nC,EAAiB,gBACjBC,EAAe,MACfn9B,EAAK,MACLjY,EAAK,MACLrU,GAAQC,EAAAA,EAAAA,OACNsN,EAEEsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EACH,OAGFla,GAAS+tD,EAAAA,EAAAA,KAAwB/tD,GAAQ,EAAMqE,IAC/C0G,EAAAA,EAAAA,IAAU/K,GAEV,MAAMyY,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDgF,OACAzN,UACAsZ,SACA8nC,oBACAC,kBACAp1C,QACAiY,UAEF,IAAKlY,EAIH,OAHAzY,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+tD,EAAAA,EAAAA,KAAwB/tD,GAAQ,EAAOqE,QAChD0G,EAAAA,EAAAA,IAAU/K,GAIZA,GAASmL,EAAAA,EAAAA,MACTnL,GAASguD,EAAAA,EAAAA,KAAiBhuD,EAAQyM,EAASgM,EAAOuU,MAAOvU,EAAO6N,WAAYjiB,IAC5E0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,cAAeuI,MAAOtU,EAAQmD,EAASyO,KACtD,MAAM,OACJ5P,EAAM,QACNyK,EAAO,YACP2W,EAAc,GAAE,OAChBC,EAAS,GAAE,MACXhf,GAAQC,EAAAA,EAAAA,OACNsN,EACEsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EACH,OAGF,MAAMoJ,QAAiBpO,EAAAA,EAAAA,IAAQ,cAAe,CAC5CgF,OACAzN,UACA2W,cACAC,WAGF,IAAKC,EAAU,OAEf,MAAM,OAAE7K,EAAM,MAAE/E,GAAU4P,EAE1B,GAAI5P,IAAU6P,EAAAA,IAMZ,OALApgB,EAAQqM,iBAAiB,CACvBxO,SAAS6f,EAAAA,EAAAA,IAAa,qCACtBxc,eAEFlB,EAAQqgB,iBAAiB,CAAEnf,UAI7B,GAAKoU,EAAL,CAEA,GAAoB,aAAhBA,EAAOrW,KAQT,OAPAe,EAAQqM,iBAAiB,CACvBxO,QAASyX,GACLoI,EAAAA,EAAAA,IAAa,2BACb,2EACJxc,eAEFlB,EAAQqgB,iBAAiB,CAAEnf,UAI7B,GAAoB,iBAAhBoU,EAAOrW,KAAyB,CAClCpC,GAASmL,EAAAA,EAAAA,MACT,MAAMsY,GAAcvjB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOqf,aAAaC,SACzDC,EAAiBH,IAAcA,EAAY5hB,OAAS,IAAI+Q,SAASpP,KAAMqgB,GAAMA,EAAER,SAAWA,GAC1FS,EAAa,CACjBpU,MAAO+I,EAAO/I,MACdkD,QAAS6F,EAAO7F,QAChBmR,SAAUH,GAAgBhW,MAE5B5N,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B0jB,YAAa,CACX3U,WAAY,CAACtC,GACbuX,QAAS,QACThiB,SACAohB,cACAO,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzDzf,IACH0G,EAAAA,EAAAA,IAAU/K,EACZ,CAEA,GAAoB,YAAhByY,EAAOrW,KAAoB,CAC7BpC,GAASmL,EAAAA,EAAAA,MACT,MAAMsY,GAAcvjB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOqf,aAAaC,SACzDC,EAAiBH,IAAcA,EAAY5hB,OAAS,IAAI+Q,SAASpP,KAAMqgB,GAAMA,EAAER,SAAWA,GAC1FS,EAAa,CACjBG,WAAYxL,EAAOwL,WACnBZ,OAAQ5K,EAAO4K,OACf3T,MAAOkU,GAAgBhW,MAEzB5N,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B0jB,YAAa,CACX3U,WAAY,CAACtC,GACb2W,cACAphB,SACAgiB,QAAS,QACTL,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzDzf,IACH0G,EAAAA,EAAAA,IAAU/K,EACZ,CArDmB,KAwDrB+L,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,OACJ5P,EAAM,QACNyK,EAAO,QACPwhD,GACEr8C,EAEEsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EACH,OAGF,MAAMg0C,EAAa,IAAID,EAAQE,gBAAiBF,EAAQG,cAClDC,EAAa,IAAIJ,EAAQK,gBAAiBL,EAAQM,cAElDC,GAAeC,EAAAA,EAAAA,IAA0BzuD,EAAQ,CACrD0uD,WAAYT,EAAQS,WACpBC,cAAeV,EAAQU,cACvBT,aACAG,aACAO,YAAa,UAGV15C,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/BgF,OACA5X,GAAImK,EACJwhD,QAASO,OAIbziD,EAAAA,EAAAA,IAAiB,sBAAuBuI,MAAOtU,EAAQmD,EAASyO,KAC9D,MAAM,OAAE5P,EAAM,SAAEqqD,GAAaz6C,EACvBsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAC3BkY,SAEgBhF,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEgF,OAAMmyC,eAG5DrsD,GAASmL,EAAAA,EAAAA,MACTnL,GAAS6uD,EAAAA,EAAAA,KAAwB7uD,EAAQgC,EAAQqqD,IACjDthD,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,oBAAqBuI,MAAOtU,EAAQmD,EAASyO,KAC5D,MAAM,QAAEykB,GAAYzkB,EACdk9C,EAAQz4B,EAAQznB,IAAK5M,IAAWmY,EAAAA,EAAAA,KAAWna,EAAQgC,IAASF,OAAOsU,SACzE,IAAK04C,EAAMjtD,OAAQ,OAEnB,MAAM4W,QAAevD,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE45C,UACrD,IAAKr2C,EAAQ,OAEb,MAAMs2C,EAA0B,GAEhC/uD,GAASmL,EAAAA,EAAAA,MACTsN,EAAOvW,QAAQ,CAACiO,EAAO9K,KACrB,MAAM6U,EAAO40C,EAAMzpD,GACnBrF,GAASgvD,EAAAA,EAAAA,KAAWhvD,EAAQka,EAAK5X,GAAI,CACnC2sD,WAAY9+C,EACZ++C,WAAsB,IAAV/+C,IAGA,IAAVA,GACF4+C,EAActjD,KAAKyO,EAAK5X,OAG5ByI,EAAAA,EAAAA,IAAU/K,GAEV+uD,GAAe7sD,QAASF,GAAWmB,EAAQwjC,gBAAgB,CAAE3kC,eAG/D+J,EAAAA,EAAAA,IAAiB,oBAAqBuI,MAAOtU,EAAQmD,EAASyO,KAC5D,MAAM,OACJ5P,EAAM,QAAEyK,EAAO,YAAErI,EAAW,SAAEjC,EAAQ,kBAAEqlD,EAAiB,MAAEnjD,GAAQC,EAAAA,EAAAA,OACjEsN,EACEsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EAAM,OAEX,MAAM4R,GAAQC,EAAAA,EAAAA,KAAgB/rB,EAAQgC,EAAQyK,GAC9C,IAAKqf,KAAW,YAAaA,GAAQ,OAErC,MAAMqjC,EAAmBrjC,EAAMsjC,aAC/BpvD,GAASqvD,EAAAA,EAAAA,KAAwBrvD,EAAQgC,EAAQyK,EAAStK,IAC1D4I,EAAAA,EAAAA,IAAU/K,GAENmC,EACFgB,EAAQgB,oBAAoB,CAAEC,cAAajC,WAAUkC,UAErDlB,EAAQolD,mBAAmB,CAAEnkD,cAAaC,UAG5C,MAAMoU,QAAevD,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDgF,OAAMzN,UAAStK,WAAUqlD,sBAG3BxnD,GAASmL,EAAAA,EAAAA,MACJsN,IACHzY,GAASqvD,EAAAA,EAAAA,KAAwBrvD,EAAQgC,EAAQyK,EAAS0iD,KAE5DpkD,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,UAAE09C,GAAY,EAAI,YAAEC,GAAc,GAAS39C,GAAW,CAAC,GAE7DsD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEo6C,UAAWA,IAAa,EAAMC,YAAaA,IAAe,M,0BC3lB7FxjD,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,OACJxQ,EAAM,SACNwG,EAAWD,EAAAA,GAAc,KACzBvF,EAAO,SAAQ,qBACfotD,GAAuB,EAAK,kBAC5BC,GAAoB,EAAK,kBACzBC,EAAiB,MACjBrrD,GAAQC,EAAAA,EAAAA,OACNsN,EAEEjF,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAEtDyJ,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GA6CxC,GA5CIyJ,EAASouC,cAAcC,OAASruC,EAASouC,cAAcE,SACzDp8C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bk8C,aAAc,IACTpuC,EAASouC,aACZE,QAAQ,IAET/3C,IAELlB,EAAQwsD,qBAAqB,CAAEtrD,UAE/BlB,EAAQqmB,iBAAiB,CAAEnlB,UAC3BlB,EAAQysD,uBAAuB,CAAEvrD,UACjClB,EAAQ0sD,2BAA2B,CAAExrD,UAEhCsI,GACHA,EAAmBvL,SAAWA,GAC3BuL,EAAmB/E,WAAaA,GAChC+E,EAAmBvK,OAASA,IAE3BhB,IACFpB,GAAS8vD,EAAAA,EAAAA,KAAsB9vD,EAAQoB,EAAQwG,EAAU,aAAc,GAAIvD,GAE3ErE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BkpD,gBAAiB,CAAC,EAClB6G,gCAAgC,GAC/B1rD,GAEHrE,GAASgwD,EAAAA,EAAAA,KAAkBhwD,EAAQoB,EAAQwG,EAAUvD,IAGvDrE,GAASqrB,EAAAA,EAAAA,KAAsBrrB,EAAQqE,GAEvCrE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BiwD,mBAAmB,EACnBhS,4BAAwB30C,EACxBm0C,qBAAiBn0C,EACjBsT,0BAAsBtT,KAClBlI,KAAWlB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOsR,gBAAgBL,UAAY,CACvEK,gBAAiB,CAAC,EAClB8B,0BAA0B,IAE3BpT,IAGDjD,EAAQ,CACV,MAAMgC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAE5BgC,GAAMgG,UAAYsmD,EACpBvsD,EAAQ+sD,eAAe,CAAE9uD,SAAQiD,UACxBjD,KAAWlB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO8rD,kBAClDhtD,EAAQitD,gBAAgB,CAAE/rD,SAE9B,CAIA,OAFAlB,EAAQktD,gBAAgB,CAAEhsD,WAEnBisD,EAAAA,EAAAA,KAAyBtwD,EAAQoB,EAAQwG,EAAUxF,EAAMotD,EAAsBC,EAAmBprD,MAG3G0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,OAAExQ,EAAM,SAAEwG,EAAWD,EAAAA,IAAmBiK,EAExC2+C,GAAUC,EAAAA,GAAAA,IAAqBpvD,EAAQ,SAAUwG,GAEnD6oD,EAAAA,GACFzmC,OAAO0mC,SAAUC,cAAcJ,GAE/BvmC,OAAOC,KAAKsmC,EAAS,aAIzBxkD,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OADAzO,EAAQktD,gBAAgB,CAAEhsD,WACnBisD,EAAAA,EAAAA,KAAyBtwD,OAAQsJ,OAAWA,OAAWA,OAAWA,OAAWA,EAAWjF,MAGjG0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,WAAEg/C,EAAU,sBAAEC,GAAwB,EAAK,MAAExsD,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEjF5R,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,KAC3BE,EAAAA,EAAAA,KAAeF,EAAQqE,GAC1BysD,iBAAiB,EACjBC,eAAgBH,EAChBC,yBACCxsD,GACHrE,EAAS,IAAKA,EAAQgxD,qBAAqB,IAC3CjmD,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQuf,SAAS,IAAK9Q,EAASvN,aAGjC0H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEtC5R,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,KAC3BE,EAAAA,EAAAA,KAAeF,EAAQqE,GAC1BysD,iBAAiB,GAChBzsD,GACHrE,EAAS,IAAKA,EAAQgxD,qBAAqB,IAC3CjmD,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQgoB,WAAW,IAAKvZ,EAASvN,aAGnC0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,OACJxQ,EAAM,KAAEwM,EAAI,SAAEhG,EAAWD,EAAAA,GAAc,MAAEspD,EAAK,OAAEnvD,EAAM,MAAEuC,GAAQC,EAAAA,EAAAA,OAC9DsN,EAMJ,OAJIxQ,GACF+B,EAAQgoB,WAAW,CAAE/pB,SAAQwG,WAAUvD,WAGlC0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BkxD,eAAgB,CACd9vD,SACAwM,OACAqjD,QACAnvD,WAEDuC,MAGL0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BmxD,kBAAc7nD,GACbjF,MAGL0H,EAAAA,EAAAA,IAAiB,+BAAgC,CAAC/L,EAAQmD,EAASyO,KACjE,MAAM,uBAAEw/C,EAAsB,MAAE/sD,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC9D,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BoxD,0BACC/sD,MAGL0H,EAAAA,EAAAA,IAAiB,eAAgB,CAAC/L,EAAQmD,EAASyO,KACjD,MAAM,iBAAEy/C,EAAgB,WAAEC,EAAU,MAAEjtD,GAAQC,EAAAA,EAAAA,OAAsBsN,GAE9D,OAAExQ,IAAWwL,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EAE/D,IAAKjD,EAEH,YADA+B,EAAQuf,SAAS,CAAEpgB,GAAIgvD,EAAW,GAAIjtD,UAIxC,MAAMktD,EAAWD,EAAW/1B,QAAQn6B,GAEpC,IAAkB,IAAdmwD,EACF,OAEF,MAAMC,EAASF,EAAWC,EAAWF,GAErCluD,EAAQuf,SAAS,CAAEpgB,GAAIkvD,EAAQhC,sBAAsB,EAAMnrD,aAG7D0H,EAAAA,EAAAA,IAAiB,6BAA8B,CAAC/L,EAAQmD,EAASyO,KAC/D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByxD,6BAAyBnoD,GACxBjF,MAGL0H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B0xD,mBAAepoD,GACdjF,MAGL0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,OAAExQ,EAAM,eAAE0S,EAAc,MAAEzP,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC9D,OAAO+/C,EAAAA,EAAAA,KAA+B3xD,EAAQoB,EAAQ0S,EAAgBzP,MAGxE0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B4xD,qBAAiBtoD,GAChBjF,MC3LL0H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAC/L,EAAQmD,EAASyO,KAClD,MAAM,OACJu4B,EAAM,MAAE9lC,GAAQC,EAAAA,EAAAA,OACdsN,EAECu4B,IAGLnqC,EAASkqC,GADTlqC,GAASmL,EAAAA,EAAAA,MAC4Bg/B,GAAQ,GAAM,EAAM9lC,IACzD0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,eAAgB,CAAC/L,EAAQmD,EAASyO,KACjD,MAAM,IACJnC,EAAG,OAAE5M,EAAM,MAAEwB,GAAQC,EAAAA,EAAAA,OACnBsN,EACJ,OAAO63B,GAAazpC,EAAQyP,EAAK5M,EAAQwB,MAG3C0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAGlD,OADA5R,EXqFK,SACLA,MAAeqE,GAAQC,EAAAA,EAAAA,QAEvB,MACMomC,GADkBxqC,EAAAA,EAAAA,KAAeF,EAAQqE,GACPwlC,QAAQa,gBAEhD,OAAKA,EAEEI,GAAyB9qC,EAAQ0qC,GAAiB,EAAOrmC,GAFnCrE,CAG/B,CW9FW6xD,CAA+B7xD,EAAQqE,GAC3CmnC,GAAiBxrC,EAAQqE,GAEvBrE,EAFsCyrC,GAAyBzrC,GAAQ,EAAOqE,MAKvF0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAE5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GASxC,OARS0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B6pC,QAAS,IACJ/7B,EAAS+7B,QACZa,qBAAiBphC,EACjBqhC,qBAAqB,IAEtBtmC,MAKL0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAE5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAElCulC,EAAgB97B,EAAS+7B,QAAQD,cAEjC0B,EAAoBxjC,OAAO4G,KAAKk7B,GAChC2B,EAAqBD,EAAkBzpC,OAW7C,OATSkM,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B6pC,QAAS,IACJ/7B,EAAS+7B,QACZc,qBAAqB,EACrBD,gBAAiBa,EAAqBD,EAAkBC,EAAqB,QAAKjiC,EAClFshC,YAAaW,EAAqB,IAEnClnC,MAKL0H,EAAAA,EAAAA,IAAiB,cAAe,CAAC/L,EAAQmD,EAASyO,KAChD,MAAM,IAAEnC,EAAG,wBAAEs7B,EAAuB,MAAE1mC,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAGhF,OAAK45B,GADLxrC,EAAS8qC,GAAyB9qC,EAAQyP,EAAKs7B,EAAyB1mC,GAC1CA,GAEvBrE,EAFsCyrC,GAAyBzrC,GAAQ,EAAOqE,MAKvF0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,uBAAEkgD,EAAsB,MAAEztD,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAEpEmgD,GAA0BD,KAC1Bve,EAAAA,GAAAA,GAAqBvzC,GAAQ4xC,mCXiJ9B,SACL5xC,MAAeqE,GAAQC,EAAAA,EAAAA,QAEvB,OAAOwD,OAAO4G,MAAKxO,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwlC,QAAQD,eAAe/nC,OAAS,CACnF,CWrJ0EmwD,CAA4BhyD,EAAQqE,GAE5G,OAAI0tD,GACF5uD,EAAQ8uD,kCAAkC,CAAE5tD,UACrCrE,IAGTA,EX+EK,SACLA,MACIqE,GAAQC,EAAAA,EAAAA,QAEZ,MAAMqlC,GAAkBzpC,EAAAA,EAAAA,KAAeF,EAAQqE,GAEzC6tD,EAA2BpqD,OAAOqqD,YACtCrqD,OAAO4I,QAAQi5B,EAAgBE,QAAQD,eAAe9nC,OACpD,EAAE,CAAEqoC,KAAYA,EAAOa,uBAIrBonB,EAAiCtqD,OAAOC,OAAOmqD,GAGrD,KAFiCE,EAA+BvwD,OAAS,GAGvE,OAAOkM,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6pC,QAAS,IACJF,EAAgBE,QACnBa,qBAAiBphC,EACjBsgC,cAAe,CAAC,EAChBW,kBAAmB,GACnBE,YAAa,KAEdpmC,GAGL,MAAMguD,GAAsBC,EAAAA,EAAAA,KAAmBtyD,EAAQqE,GAEjDkuD,EAAkBF,GAAqBrnB,qBACzCqnB,EAAsBD,EAA+B,GAEnDI,GAAqBvoB,EAAAA,GAAAA,IAAasoB,GAEpCC,IACFN,EAAyBM,GAAsB,IAC1CD,EACHtnB,kBAAkB,IAGtB,MAAMX,EAAgBX,EAAgBE,QAAQU,kBAAkBzoC,OAAQspC,GAAM8mB,EAAyB9mB,IAEvG,OAAOr9B,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6pC,QAAS,IACJF,EAAgBE,QACnBa,gBAAiB8nB,EACjB7nB,qBAAqB,EACrBf,cAAesoB,EACf3nB,kBAAmBD,IAEpBjmC,EACL,CWlIWouD,CAAmBzyD,EAAQqE,GAC/BmnC,GAAiBxrC,EAAQqE,GAEvBrE,EAFsCyrC,GAAyBzrC,GAAQ,EAAOqE,OAKvF0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEq/B,EAAK,MAAE5sC,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE7C,OXuIK,SACL5R,EAAW6qC,MACPxmC,GAAQC,EAAAA,EAAAA,QAEZ,MAAMqlC,GAAkBzpC,EAAAA,EAAAA,KAAeF,EAAQqE,GAC/C,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6pC,QAAS,IACJF,EAAgBE,QACnBgB,eAEDxmC,EACL,CWlJSquD,CAAwB1yD,EAAQixC,EAAO5sC,MAGhD0H,EAAAA,EAAAA,IAAiB,8BAA+B,CAAC/L,EAAQmD,EAASyO,KAChE,MAAM,SAAE2/C,GAAa3/C,EAKrB,OAHS+/B,EAAAA,EAAAA,KAAqB3xC,EAAQ,CACpC2yD,uBAAwBpB,OAK5BxlD,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,KAAEghD,GAAShhD,EAMjB,OAJS+/B,EAAAA,EAAAA,KAAqB3xC,EAAQ,CACpC6yD,mBAAoBD,OAMxB7mD,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,EAChCkhD,GAAeR,EAAAA,EAAAA,KAAmBtyD,EAAQqE,GAChD,GAAKyuD,GAAchqC,IAInB,OAAO2gB,GAAazpC,GAFRiqC,EAAAA,EAAAA,IAAa6oB,GAEQ,CAAE7a,KAAMrmC,EAAQqmC,MAAQ5zC,MAG3D0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BywC,qBAAiBnnC,GAChBjF,MAGL0H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,MAAEkd,EAAK,eAAEwiB,EAAc,MAAEjtC,GAAQC,EAAAA,EAAAA,OAAsBsN,GACvD,cAAEmhD,GAAkB/yD,EAEpBgzD,EAAmB,IAAI/oD,IAAI8oD,GACjCC,EAAiB9oD,IAAI4kB,GAErB9uB,EAAS,IACJA,EACH+yD,cAAe1wC,MAAMxI,KAAKm5C,IAG5B,MAAMllD,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,GAAIyJ,EAAS2iC,iBAAiBC,UAAW,CACvC,MAAM,OAAErmC,EAAQuH,QAASqhD,GAAoBnlD,EAAS2iC,gBAAgBC,UAEtEvtC,EAAQkH,GAAQ,IACV4oD,EACJ3hB,kBAEJ,CAEAtxC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BywC,qBAAiBnnC,GAChBjF,IAEH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,MAAEud,EAAK,UAAEJ,EAAS,MAAE1qB,GAAQC,EAAAA,EAAAA,OAAsBsN,EAClDu4B,GAAS+oB,EAAAA,EAAAA,KAAalzD,EAAQ+uB,EAAW1qB,GAC/C,IAAK8lC,EAAQ,OAAOnqC,EAEpB,MAAMmzD,EAAmBhpB,EAAOipB,cAAgB,IAAIjpB,EAAOipB,cAAejkC,GAAS,CAACA,GAUpF,OARAhsB,EAAQsmC,aAAa,CACnBh6B,IAAKsf,EACLlsB,OAAQ,CACNuwD,cAAeD,GAEjB9uD,UAGKrE,KAGT+L,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BwyC,+BAA2BlpC,GAC1BjF,MAGL0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,IACJod,EAAG,OAAEltB,EAAM,WAAEquC,EAAU,MAAE9rC,GAAQC,EAAAA,EAAAA,OAC/BsN,EACElE,GAAgBd,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAQjD,OAEzDkuB,EAAmBN,EAAIqkC,qBAAqBvxD,OAAQM,GAC/C,SAATA,GAAmBN,EAAO2C,SAASrC,IAGhCktB,GAAkBztB,QAUvB7B,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BszD,yBAA0B,CACxBtkC,MACAltB,OAAQwtB,EACR6gB,eAED9rC,IACH0G,EAAAA,EAAAA,IAAU/K,IAhBRmD,EAAQowD,cAAc,CACpBnyD,OAAQsM,GAAiBshB,EAAI1sB,GAC7B0sB,MACAmhB,aACA9rC,aAeN0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BszD,8BAA0BhqD,GACzBjF,MAGL0H,EAAAA,EAAAA,IAAiB,6BAA8B,CAAC/L,EAAQmD,EAASyO,KAC/D,MAAM,IACJod,EAAG,UAAED,EAAS,MAAE1qB,GAAQC,EAAAA,EAAAA,OACtBsN,EAECod,GAAQD,IAEb/uB,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BwzD,uBAAwB,CACtBxkC,MACAD,cAED1qB,IACH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,8BAA+B,CAAC/L,EAAQmD,EAASyO,KAChE,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BwzD,4BAAwBlqD,GACvBjF,MAGL0H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,IACJod,EAAG,UAAED,EAAS,MAAE1qB,GAAQC,EAAAA,EAAAA,OACtBsN,EAECod,GAAQD,IAEb/uB,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9ByzD,oBAAqB,CACnBzkC,MACAD,cAED1qB,IACH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,2BAA4B,CAAC/L,EAAQmD,EAASyO,KAC7D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByzD,yBAAqBnqD,GACpBjF,K,uCCjSE,SAASqvD,GACdtgB,EAAkB3jC,IAGlB1D,EAAAA,EAAAA,IAAiBqnC,EAAM,CAACpzC,EAAQmD,EAASyO,KACvC,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B,CAACyP,QAAMnG,GACNjF,IAEP,C,4BC6DA,MACMsvD,GAA8BC,EAAAA,IAAsBC,EAAAA,IAK1D,IAAIC,GA06BJ,SAASC,GAAoB/zD,EAAqBoB,EAAgB2N,GAChE,MAAQ3M,KAAMuN,EAAe,SAAE/H,IAAagF,EAAAA,EAAAA,KAAyB5M,IAAW,CAAC,EAC3Eg0D,EAAOlgC,EAAAA,GAEP1wB,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAE1B2Q,EAAmC,cAApBpC,GACjBhB,EAAAA,EAAAA,KAA4B3O,EAAQoB,IACpCwI,EAAAA,EAAAA,KAAmB5J,EAAQoB,GAE/B,IAAKgC,IAAS2O,IAAiBnK,EAAU,OAEzC,MAAM0I,EAAWvB,EACdH,IAAKtM,GAAOyP,EAAazP,IACzBR,OAAQd,IAAYizD,EAAAA,EAAAA,KAAgCj0D,EAAQgB,EAAS4G,GAAUssD,SAC/ErvD,KAAK,CAACsvD,EAAUC,IAAaD,EAAS7xD,GAAK8xD,EAAS9xD,IAEjD+xD,EAAuB,GACvBC,EAAuB,GAE7BhkD,EAASpO,QAASlB,IAChB,MAAM6sC,GAAS9rB,EAAAA,EAAAA,IAAc3e,GAAQA,GAAO0qC,EAAAA,EAAAA,KAAa9tC,EAAQgB,GAC3DuzD,EAAc,KAAK1mB,GAAS2mB,EAAAA,EAAAA,IAAaR,EAAMnmB,GAAU7sC,EAAQyzD,aAAaC,gBAAkB,MAChGC,GAAkBC,EAAAA,EAAAA,IAA0B50D,EAAQgB,GAE1DqzD,EAAW5oD,KAAK8oD,GAChBF,EAAW5oD,KAAK,GChhCb,SACLuoD,EACAhzD,GAEA,MAAMhB,GAASmL,EAAAA,EAAAA,MACT0C,GAAQgnD,EAAAA,GAAAA,IAAuB7zD,GAC/B8zD,EAAiBjnD,EAAQ,GAAGA,KAAW,GACvCD,GAAQmnD,EAAAA,GAAAA,GAAkB,CAAE/zD,UAASg0D,oBAAoB,KAAsBl0C,KAAK,IAEpF6zC,GAAkBC,EAAAA,GAAAA,IAA0B50D,EAAQgB,GAI1D,MAAO,GAAG8zD,KAFUG,EAAAA,GAAAA,IAA6BjB,EAAMhzD,EAAS2zD,EAAiB/mD,GAAM,IAGzF,CDkgCuBsnD,CAAyBlB,EAAMhzD,QAElDszD,EAAW7oD,KAAK8oD,GAChBD,EAAW7oD,KAAK,IAAG0pD,EAAAA,GAAAA,IAAsBnB,EAAMhzD,EAAS2zD,GAAiB,EAAO,GAAG,WAGrFS,EAAAA,EAAAA,GAAoBf,EAAWvzC,KAAK,MAAOwzC,EAAWxzC,KAAK,MAC7D,EAz8BA/U,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,OACJxQ,EAAM,SAAEwG,EAAQ,aAAEytD,EAAY,MAAEhxD,GAAQC,EAAAA,EAAAA,OACtCsN,EAIJ,OAFA5R,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwG,EAAU,mBAAoBytD,IAEnEvF,EAAAA,EAAAA,KAAsB9vD,EAAQoB,EAAQwG,EAAU,eAAgBytD,EAAchxD,MAGvF0H,EAAAA,EAAAA,IAAiB,eAAgB,CAAC/L,EAAQmD,EAASyO,KACjD,MAAM,UAAE3K,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC3CjF,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAC5D,IAAKsI,EACH,OAGF,MAAM,OAAEvL,EAAM,SAAEwG,EAAQ,KAAExF,GAASuK,EAC7B2oD,EAAqB,cAATlzD,EAAuB,qBAAuB,YAEhE,OAAOoG,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwG,EAAU0tD,EAAWruD,MAGjE8E,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,KACJhE,EAAI,OAAExM,EAAM,SAAEwG,EAAQ,KAAExF,GACtBwP,EAEE0jD,EAAqB,cAATlzD,EAAuB,wBAA0B,eAEnE,OAAOoG,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwG,EAAU0tD,EAAW1nD,MAGjE7B,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAC5C,OAAExQ,EAAM,SAAEwG,IAAagF,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EACzE,IAAKjD,IAAWwG,EACd,OAGF,MAAMmK,GAAenI,EAAAA,EAAAA,KAAmB5J,EAAQoB,GAC1C4a,GAAczT,EAAAA,EAAAA,KAAkBvI,EAAQoB,EAAQwG,EAAUvD,GAChE,IAAK0N,IAAiBiK,EACpB,OAGF,MAAMu5C,GAA2BC,EAAAA,EAAAA,IAASx5C,EAAc1Z,GAC/C8T,QAAQrE,EAAazP,KAAO2xD,EAAAA,EAAAA,KAAgCj0D,EAAQ+R,EAAazP,GAAKsF,GAAU6tD,UAGzG,OAAKF,GAIE/sD,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwG,EAAU,YAAa2tD,QAJjE,KAOFxpD,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,iBAAEy/C,EAAgB,MAAEhtD,GAAQC,EAAAA,EAAAA,OAAsBsN,GAClD,OAAExQ,EAAM,SAAEwG,IAAagF,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EACzE,IAAKjD,IAAWwG,EACd,OAGF,MAAMmK,GAAenI,EAAAA,EAAAA,KAAmB5J,EAAQoB,GAC1C4a,GAAczT,EAAAA,EAAAA,KAAkBvI,EAAQoB,EAAQwG,EAAUvD,GAChE,IAAK0N,IAAiBiK,EACpB,OAGF,MAAMvV,GAAY6P,EAAAA,EAAAA,KAAYtW,EAAQoB,EAAQwG,IAAWnB,UAGzD,IAAIQ,EAEJ,IAJiBgB,EAAAA,EAAAA,KAAuBjI,EAAQoB,EAAQwG,EAAUvD,IAIhDoC,GAAWI,aAQtB,CACL,MAAM6uD,EAAkB5tD,OAAO4G,KAAKqD,GAE9B4jD,EADiBD,EAAgBn6B,QAAQ90B,EAAUI,aAAa0jB,YACpC8mC,EAClCpqD,EAAY0uD,GAAYD,EAAgB7zD,OAAS,GAAK8zD,GAAY,EAC9D/qD,OAAO8qD,EAAgBC,SACvBrsD,CACN,MAdE,GAAI1B,IAAaD,EAAAA,GACfV,GAAYiC,EAAAA,EAAAA,KAAwBlJ,EAAQoB,OACvC,CACL,MAAMuF,GAAa8D,EAAAA,EAAAA,KAAiBzK,EAAQoB,EAAQwG,GAEpDX,EAAYN,GAAYQ,aAC1B,CASFhE,EAAQ6J,qBAAqB,CAC3BnG,aAAcI,EAAW4jB,mBAAevhB,EAAWyhB,eAAWzhB,EAAWjF,UAE3ElB,EAAQ0J,aAAa,CACnBzL,SACAwG,WACAX,UAAWA,EACX5C,aAIJ0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,OACJxQ,EAAM,SAAEwG,EAAQ,UAAEX,EAAS,OAAE2uD,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAE1vB,EAAO,UAAE5J,EAAS,MAC7En4B,GAAQC,EAAAA,EAAAA,OACNsN,EAEE9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqiC,YAAa,CACXjhC,SACAwG,WACAX,YACAu1B,YACAo5B,OAAQA,GAAU9nD,EAASu0B,YAAYuzB,OACvCC,OAAQA,GAAU/nD,EAASu0B,YAAYwzB,OACvCC,aAAcA,GAAgBhoD,EAASu0B,YAAYyzB,cAAgB91D,EAAOqiC,YAAY0zB,iBACtFC,0BAAqE1sD,IAA9CwE,EAASu0B,YAAY2zB,qBACxCh2D,EAAOqiC,YAAY4zB,yBACnBnoD,EAASu0B,YAAY2zB,qBACzB5vB,QAASA,GAAWt4B,EAASu0B,YAAY+D,UAE1C/hC,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,OACJikD,EAAM,MAAExxD,GAAQC,EAAAA,EAAAA,OACdsN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqiC,YAAa,KACRniC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOg+B,YACjCwzB,SACAzvB,SAAS,IAEV/hC,MAGL0H,EAAAA,EAAAA,IAAiB,6BAA8B,CAAC/L,EAAQmD,EAASyO,KAC/D,MAAM,aACJkkD,EAAY,qBAAEE,EAAoB,MAAE3xD,GAAQC,EAAAA,EAAAA,OAC1CsN,EAWJ,OATA5R,EAAS,IACJA,EACHqiC,YAAa,IACRriC,EAAOqiC,YACV0zB,iBAAkBD,EAClBG,yBAA0BD,KAIvBjoD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqiC,YAAa,KACRniC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOg+B,YACjCyzB,eACAE,yBAED3xD,MAGL0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,QACJw0B,EAAO,MAAE/hC,GAAQC,EAAAA,EAAAA,OACfsN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqiC,YAAa,KACRniC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOg+B,YACjC+D,YAED/hC,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,OACJgkD,EAAM,MAAEvxD,GAAQC,EAAAA,EAAAA,OACdsN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqiC,YAAa,KACRniC,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOg+B,YACjCuzB,WAEDvxD,MAGL0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqiC,YAAa,CACXwzB,OAAQ/nD,EAASu0B,YAAYwzB,OAC7BC,aAAchoD,EAASu0B,YAAYyzB,aACnCE,qBAAsBloD,EAASu0B,YAAY2zB,qBAC3C5vB,QAASt4B,EAASu0B,YAAY+D,UAE/B/hC,MAGL0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,OAAExQ,EAAM,UAAE6F,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEnDskD,GAAsBC,EAAAA,EAAAA,KAAyBn2D,GAAQI,EAAAA,EAAAA,MAAeiE,GACtEyJ,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,GAAK6xD,GAaE,GAAI90D,IAAW0M,EAASmY,YAAY7kB,QAAU6F,IAAc6G,EAASmY,YAAYhf,UACtF,OAAO8G,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BimB,YAAa,CACX7kB,SACA6F,YACAif,OAAQ,CAAC,IAEV7hB,QAnBH2lB,OAAO9e,WAAW,KAChBlL,GAASmL,EAAAA,EAAAA,MAETnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BimB,YAAa,CACX7kB,SACA6F,YACAif,OAAQ,CAAC,IAEV7hB,IACH0G,EAAAA,EAAAA,IAAU/K,IAjOkB,QAgPlC+L,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BimB,YAAa,CAAC,GACb5hB,MAGL0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5CjF,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAC5D,IAAKsI,EACH,OAGF,MAAM,OAAEvL,EAAM,SAAEwG,EAAQ,KAAExF,GAASuK,EAE7B4L,GAAgB7M,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU5H,EAAOiC,eAEhE,IAAIkF,EACJ,GAAIS,IAAaD,EAAAA,GACf,GAAa,WAATvF,EAAmB,CACrB,MAAMg0D,GAAmBxlD,EAAAA,EAAAA,KAAgB5Q,EAAQoB,EAAQuG,EAAAA,IACzD,IAAKyuD,GAAkBv0D,OACrB,OAGFsF,EAAgBivD,EAAiBA,EAAiBv0D,OAAS,EAC7D,MACEsF,GAAgB+B,EAAAA,EAAAA,KAAwBlJ,EAAQoB,QAE7C,GAAImX,EACTpR,GAAgB+B,EAAAA,EAAAA,KAAwBlJ,EAAQ6L,OAAOjE,GAAW,aAC7D,CACL,MAAMjB,GAAa8D,EAAAA,EAAAA,KAAiBzK,EAAQoB,EAAQwG,GAEpDT,EAAgBR,GAAYQ,aAC9B,CAEKA,GAILhE,EAAQ0J,aAAa,CACnBzL,SACAwG,WACA+H,gBAAiBvN,EACjB6E,UAAWE,EACX2F,aAAa,EACb4iD,mBAAmB,EACnBrrD,aAIJ0H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5CjF,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAC5D,IAAKsI,EACH,OAGF,MAAM,OAAEvL,EAAM,SAAEwG,GAAa+E,EAEvB0pD,GAAaC,EAAAA,EAAAA,KAAiBt2D,EAAQoB,EAAQwG,EAAUvD,GAE9D,GAAKgyD,GAAoC,IAAtBA,EAAWx0D,OAEvB,CACL,MAAMoF,EAAYovD,EAAWE,MAE7Bv2D,GAAS8vD,EAAAA,EAAAA,KAAsB9vD,EAAQoB,EAAQwG,EAAU,aAAc,IAAIyuD,GAAahyD,IAExF0G,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQ0J,aAAa,CACnBzL,SACAwG,WACAX,UAAWA,EACX5C,QACAqrD,mBAAmB,GAEvB,MAfEvsD,EAAQqzD,iBAAiB,CAAEnyD,aAoB/B0H,EAAAA,EAAAA,IAAiB,eAAgB,CAAC/L,EAAQmD,EAASyO,KACjD,MAAM,OACJxQ,EAAM,SAAEwG,EAAWD,EAAAA,GAAc,gBAAEgI,EAAkB,SAAQ,YAAE7C,EAAW,UAAEuR,EAAS,cAAEo4C,EAAa,eACpGC,EAAc,oBAAE3pD,EAAmB,qBAAEyiD,EAAoB,kBAAEE,EAAiB,MAAEiH,EAAK,YAAE3rC,EAAW,qBAChG0+B,EAAoB,UAAEltB,EAAS,MAAEn4B,GAAQC,EAAAA,EAAAA,OACvCsN,EAEJ,IAAI,UAAE3K,GAAc2K,EAGpB,KADarK,EAAAA,EAAAA,KAAWvH,EAAQoB,GAG9B,YADA+B,EAAQqM,iBAAiB,CAAExO,SAAS6f,EAAAA,EAAAA,IAAa,yCAA0Cxc,UAI7F,MAAMuyD,EAAiBp6B,EACnB,IAAMr5B,EAAQ0zD,uBAAuB,CACrCz1D,SAAQwG,WAAUX,YAAWu1B,YAAWn4B,eACrCiF,EAEP,QAAkBA,IAAd+U,EAAyB,CAC3B,MAAMtU,GAAM+sD,EAAAA,EAAAA,KAAmC92D,EAAQy2D,EAAgBp4C,GACnEtU,GAAKlI,UACLoF,IAAa8vD,EAAAA,EAAAA,IAAQhtD,GAE3B,CAEA,MAAM4C,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GACtD2yD,GAAoBrqD,GACxBvL,IAAWuL,EAAmBvL,QAC3BwG,IAAa+E,EAAmB/E,UAChC+H,IAAoBhD,EAAmBvK,KA2B5C,GAxBI0xD,KACFnnC,aAAamnC,IACbA,QAAcxqD,GAEhBwqD,GAAc9pC,OAAO9e,WAAW,KAC9BlL,GAASmL,EAAAA,EAAAA,MACTnL,GAASi3D,EAAAA,EAAAA,KAAqB,CAAEj3D,UAAUqE,GAC1CrE,GAASk3D,EAAAA,EAAAA,KAAqBl3D,OAAQsJ,EAAWjF,IACjD0G,EAAAA,EAAAA,IAAU/K,IACT8M,EAAc6mD,GAlXI,MAoXrB3zD,GAASi3D,EAAAA,EAAAA,KAAqB,CAC5Bj3D,SACAoB,SACA6F,YACAW,WACAkF,cACAC,sBACA4pD,QACA3rC,cACA0+B,wBACCrlD,GACHrE,GAASk3D,EAAAA,EAAAA,KAAqBl3D,OAAQsJ,EAAWjF,GAE7CqyD,EAAgB,CAClB,MAAML,GAAaC,EAAAA,EAAAA,KAAiBt2D,EAAQoB,EAAQwG,EAAUvD,IAAU,GACxErE,GAAS8vD,EAAAA,EAAAA,KAAsB9vD,EAAQoB,EAAQwG,EAAU,aAAc,IAAIyuD,EAAYK,GAAiBryD,EAC1G,CAEI2yD,IACFh3D,GAASk3D,EAAAA,EAAAA,KAAqBl3D,EAAQm3D,EAAAA,GAAeC,OAAQ/yD,IAG/D,MAAM2X,GAAczT,EAAAA,EAAAA,KAAkBvI,EAAQoB,EAAQwG,EAAUvD,GAChE,GAAI2X,GAAeA,EAAYvX,SAASwC,GAWtC,OAVA8D,EAAAA,EAAAA,IAAU/K,EAAQ,CAAEoc,uBAAuB,IAC3CjZ,EAAQgoB,WAAW,CACjB/pB,SACAwG,WACAxF,KAAMuN,EACN6/C,uBACAE,oBACArrD,eAEFuyD,MAQF,GAJII,IACFh3D,GAAS8vD,EAAAA,EAAAA,KAAsB9vD,EAAQoB,EAAQwG,EAAU,mBAAe0B,EAAWjF,IAGjF2X,IAAgBg7C,EAAkB,CACpC,MAAMr/C,EAAY1Q,EAAY+U,EAAY,GAAKm7C,EAAAA,GAAeE,KAAOF,EAAAA,GAAeG,GACpFt3D,GAASk3D,EAAAA,EAAAA,KAAqBl3D,EAAQ2X,EAAWtT,EACnD,EAEIkzD,EAAAA,GAAAA,QACFC,EAAAA,GAAAA,OAGFzsD,EAAAA,EAAAA,IAAU/K,EAAQ,CAAEoc,uBAAuB,IAE3CjZ,EAAQgoB,WAAW,CACjB/pB,SACAwG,WACAxF,KAAMuN,EACN6/C,uBACAE,oBACArrD,UAEFlB,EAAQkO,qBAAqB,CAC3BjQ,SACAwG,WACAvD,QACAwX,mBAAmB,EACnB/D,SAAU8+C,OAKd7qD,EAAAA,EAAAA,IAAiB,oCAAqC,CAAC/L,EAAQmD,EAASyO,KACtE,MAAM,+BAAEm+C,EAA8B,MAAE1rD,GAAQC,EAAAA,EAAAA,OAAsBsN,EACtE,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+vD,kCACC1rD,MAGL0H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAC/L,EAAQmD,EAASyO,KAClD,MAAM,WACJyD,EAAU,UAAEpO,EAAS,UAAE8jB,EAAS,YAAEC,EAAW,MAAE3mB,GAAQC,EAAAA,EAAAA,OACrDsN,EACJ,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByqB,gBAAiB,CACfpV,aACApO,YACA8jB,YACAC,eAEFvT,0BAA0B,GACzBpT,MAGL0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,WACJyD,EAAU,WAAEtG,EAAU,QAAEtC,EAAO,UAAE4R,EAAS,YAAE9I,EAAW,MAAElR,GAAQC,EAAAA,EAAAA,OAC/DsN,EACJ,IAAI6lD,EAIJ,OAHIp5C,IACFo5C,GAAoB5P,EAAAA,EAAAA,KAA0B7nD,EAAQqV,EAAYgJ,KAE7DtQ,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2V,gBAAiB,CACfN,aACAtG,WAAY0oD,GAAqB1oD,EACjCtC,UACA8I,eAEFkC,0BAA0B,GACzBpT,MAGL0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2V,gBAAiB,KACZzV,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOsR,gBACjCL,cAAUhM,EACVkM,WAAW,EACXC,YAAY,GAEdgC,0BAA0B,GACzBpT,MAGL0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,UAAE4D,EAAS,MAAEnR,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC3C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2V,gBAAiB,IACZ7H,EAAS6H,gBACZH,YAEAC,WAAYD,GAAa1H,EAAS6H,gBAAgBF,aAEnDpR,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,WAAE6D,EAAU,MAAEpR,GAAQC,EAAAA,EAAAA,OAAsBsN,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2V,gBAAiB,KACZzV,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOsR,gBACjCF,aACAD,UAAWC,IAEZpR,MAGL0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD5R,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9ByX,0BAA0B,EAC1B9B,gBAAiB,CAAC,EAClB8U,gBAAiB,CAAC,GACjBpmB,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,qCAAsC,CAAC/L,EAAQmD,EAASyO,KACvE,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,IAAKyJ,EAAS4pD,iBACZ,OAGF,MAAQt2D,OAAQiU,EAAU,WAAEtG,GAAejB,EAAS4pD,iBAE9CC,EAAwB5oD,EAAWjN,OAAQQ,IAC/C,MAAMtB,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQqV,EAAY/S,GACtD,OAAOtB,IAAW8V,EAAAA,EAAAA,KAAwB9W,EAAQgB,KAG/C22D,EAAsB91D,QAI3BsB,EAAQy0D,gBAAgB,CAAEviD,aAAYtG,WAAY4oD,EAAuBtzD,aAG3E0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,MAAEuB,EAAK,MAAE9O,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEvCge,GAAOioC,EAAAA,EAAAA,IAAa1kD,EAAO,YACjC,GAAKyc,EAGL,OADSkoC,EAAAA,EAAAA,KAA2B93D,EAAQ,CAAC4vB,GAAOvrB,MAItD0H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAC/L,EAAQmD,EAASyO,KAC7D,MAAM,YAAEmmD,EAAW,MAAE1zD,GAAQC,EAAAA,EAAAA,OAAsBsN,EAInD,OAFSkmD,EAAAA,EAAAA,KAA2B93D,EAAQ+3D,EAAa1zD,MAK3D0H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAC/L,EAAQmD,EAASyO,KAClD,MAAM,MAAEuB,EAAK,cAAErM,EAAa,MAAEzC,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEtDge,GAAOioC,EAAAA,EAAAA,IAAa1kD,EAAO,YACjC,IAAKyc,EAAM,OAEX,MACMooC,EAAW,CACfpF,KAFW,SAAUz/C,EAAQA,EAAMy/C,KAAO,EAG1CqF,QAAQC,EAAAA,EAAAA,IAAe/kD,EAAO,YAC9BglD,UAAUC,EAAAA,EAAAA,IAAiBjlD,GAC3BklD,aAAcvxD,GAAe1F,OAC7Bk3D,gBAAiBxxD,GAAexE,IAGlC,OAAOi2D,EAAAA,EAAAA,KAAuBv4D,EAAQ4vB,EAAMooC,EAAU3zD,MAGxD0H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAC/L,EAAQmD,EAASyO,KAC7D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,IAAKyJ,EAAS4pD,iBACZ,OAGF,MAAM,OAAEt2D,EAAM,WAAE2N,GAAejB,EAAS4pD,kBAClC,SAAE9vD,IAAagF,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EAE3D0N,GAAenI,EAAAA,EAAAA,KAAmB5J,EAAQoB,GAC3C2Q,GAAiBnK,GACLmH,EAAWH,IAAKtM,GAAOyP,EAAazP,IAClDR,OAAQd,IAAYizD,EAAAA,EAAAA,KAAgCj0D,EAAQgB,EAAS4G,GAAU4wD,aACzEt2D,QAASlB,IAChB,MAAMmS,GAAQslD,EAAAA,EAAAA,IAA4Bz3D,GACrCmS,GACLhQ,EAAQu1D,cAAc,CAAEvlD,QAAOrM,cAAe9F,EAASqD,eAI3D0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,UAAE3K,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EACvD8Q,GAAWkC,EAAAA,EAAAA,KAAkB5kB,EAAQqE,GAC3C,OAAKqe,GAIEi2C,EAAAA,EAAAA,KAAuB34D,EAAQ0iB,EAASpgB,GAAI2E,EAAW5C,GAHrDrE,KAMX+L,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,UACJ3K,EAAS,UACToX,EAAS,gBACTu6C,EAAe,UACfC,EAAS,MACTx0D,GAAQC,EAAAA,EAAAA,OACNsN,EACEjF,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAC5D,IAAKsI,EACH,OAGF,MAAM,OAAEvL,EAAM,SAAEwG,EAAUxF,KAAMuN,GAAoBhD,EAEpD3M,GAAS84D,EAAAA,EAAAA,KACP94D,EAAQoB,EAAQwG,EAAU+H,EAAiB1I,EAAWoX,EAAWu6C,EAAiBC,EAAWx0D,IAG/F0G,EAAAA,EAAAA,IAAU/K,GAENA,EAAO+4D,4BACT51D,EAAQ61D,yBACR71D,EAAQqM,iBAAiB,CAEvBxO,QAAS,mDAAmDi4D,EAAAA,GAAe,WAAa,8BACxF50D,cAKN0H,EAAAA,EAAAA,IAAiB,yBAA2B/L,IAC1C,GAAKA,EAAO+4D,0BAIZ,MAAO,IACF/4D,EACH+4D,2BAA2B,MAI/BhtD,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAOyZ,EAAAA,EAAAA,KAAsBrrB,EAAQqE,MAGvC0H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAC/L,EAAQmD,EAASyO,KAClD,MAAM,OAAE07B,EAAM,MAAEjpC,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAE1D,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bk5D,UAAW,CACT9c,QAAQ,EACR9O,WAEDjpC,MAGL0H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bk5D,UAAW,CACT9c,QAAQ,IAET/3C,MAGL0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,OACJxQ,EAAM,UAAE6F,EAAS,WAAEkyD,EAAU,MAAE90D,GAAQC,EAAAA,EAAAA,OACrCsN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bo5D,cAAe,CACbh4D,SACA6F,YACAkyD,eAED90D,KAGLqvD,GAA0B,qBAAsB,kBAEhD3nD,EAAAA,EAAAA,IAAiB,2BAA4B,CAAC/L,EAAQmD,KACpD,GAAIk2D,EAAAA,KAAoB52D,KAAKC,MAAQkI,OAAOyuD,EAAAA,KA7rBR,OA8rBlC,OAGF,MAAMC,EAAiBC,UAAYp7C,MAAM,KAAKhH,MAAM,EAAG,GAAG2J,KAAK,MACzD,qBAAE5O,GAAyBlS,EAEjC,GAAIkS,EAAqB1O,KAAK,EAAGoxB,aAAcA,IAAY0kC,GACzD,OAGF,MAAMt4D,EAAkC,CACtCI,OAAQ6Q,EAAAA,IACR+C,MAAM7H,EAAAA,EAAAA,MACNxH,QAAS,CACPiI,MAAM4rD,EAAAA,GAAAA,I,k8GAA8C,IAEtDn2D,YAAY,GAGdF,EAAQ4P,0BAA0B,CAChC/R,QAASA,EACT4zB,QAAS0kC,OAIbvtD,EAAAA,EAAAA,IAAiB,4BAA6B,CAAC/L,EAAQmD,EAASyO,KAC9D,MAAM,QAAE5Q,EAAO,QAAE4zB,GAAYhjB,GACvB,qBAAEM,GAAyBlS,EAE3BmQ,EAAQxP,KAAKE,KACjBqI,EAAAA,EAAAA,KAAwBlJ,EAAQiS,EAAAA,MAAkC,KAC/DC,EAAqBtD,IAAI,EAAGtM,QAASA,IAEpCm3D,GAAkBvnD,EAAqBrQ,OAAS,GA9tBf,IAguBjCS,EAAK3B,KAAK6B,MAAM2N,GAASspD,EAE/Bz4D,EAAQ0I,gBAAkB1I,EAAQsB,GAClCtB,EAAQsB,GAAKA,EAEb,MAAMo3D,EAAsB,CAC1Bp3D,KACAtB,UACA4zB,UACA7wB,UAAU,GAGZ/D,EAAS,IACJA,EACHkS,qBAAsB,IACjBA,EAAqBiF,OA/uBW,KAgvBnCuiD,KAGJ3uD,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQsL,UAAU,CAChB,QAAS,aACTnM,GAAItB,EAAQsB,GACZlB,OAAQJ,EAAQI,OAChBJ,eAIJ+K,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,OAAExQ,EAAM,UAAE6F,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEzD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B25D,aAAc,CAAEv4D,SAAQ6F,cACvB5C,MAGL0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B25D,kBAAcrwD,GACbjF,MAGL0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,OAAExQ,EAAM,UAAE6F,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEzD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B45D,YAAa,CAAEx4D,SAAQ6F,cACtB5C,MAGL0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B45D,iBAAatwD,GACZjF,MAGL0H,EAAAA,EAAAA,IAAiB,iCAAkC,CAAC/L,EAAQmD,EAASyO,KACnE,MAAM,OAAExQ,EAAM,WAAEy4D,EAAU,MAAEx1D,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE1D,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B85D,2BAA4B,CAAE14D,SAAQy4D,eACrCx1D,MAGL0H,EAAAA,EAAAA,IAAiB,kCAAmC,CAAC/L,EAAQmD,EAASyO,KACpE,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B85D,gCAA4BxwD,GAC3BjF,MAGL0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,OAAExQ,EAAM,UAAE6F,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEnDmoD,EAAiB9yD,GACnB+yD,EAAAA,EAAAA,KAA0Ch6D,EAAQoB,EAAQ6F,EAAW5C,IACrE41D,EAAAA,EAAAA,KAAuCj6D,EAAQoB,EAAQiD,GAE3D,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bk6D,kBAAmB,CAAE94D,SAAQ6F,YAAW8yD,mBACvC11D,MAGL0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bk6D,uBAAmB5wD,GAClBjF,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,IAAKyJ,EAAS4pD,iBACZ,OAGF,MAAM,OAAEt2D,EAAM,WAAE2N,GAAejB,EAAS4pD,iBACxC3D,GAAoB/zD,EAAQoB,EAAQ2N,MAGtChD,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,WAAE7C,EAAU,MAAE1K,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC5CxO,GAAOwhB,EAAAA,EAAAA,KAAkB5kB,EAAQqE,GAClC0K,GAAoC,IAAtBA,EAAWlN,QAAiBuB,GAI/C2wD,GAAoB/zD,EAAQoD,EAAKd,GAAIyM,MAGvChD,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,QAAE5Q,EAAO,MAAEqD,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC/C5R,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bm6D,kBAAmB,CACjBn5D,YAEDqD,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD5R,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bm6D,uBAAmB7wD,GAClBjF,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqoB,mBAAe/e,GACdjF,MAGL0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B0jB,iBAAapa,GACZjF,MAGL0H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAC/L,EAAQmD,EAASyO,KAC9D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5CyW,GAAgBnoB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOgkB,cACpD,GAAKA,EAAL,CAIA,GAAsC,IAAlCA,EAAc1E,SAAS9hB,OAK3B,OAAOkM,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqoB,cAAe,IACVA,EACH1E,SAAU0E,EAAc1E,SAASxM,MAAM,GAAI,KAE5C9S,GATDlB,EAAQ8kB,mBAAmB,CAAE5jB,SAH/B,KAeF0H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C8R,GAAcxjB,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOqf,YAClD,GAAKA,EAAL,CAIA,GAAoC,IAAhCA,EAAYC,SAAS9hB,OAKzB,OAAOkM,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B0jB,YAAa,IACRA,EACHC,SAAUD,EAAYC,SAASxM,MAAM,GAAI,KAE1C9S,GATDlB,EAAQqgB,iBAAiB,CAAEnf,SAH7B,KAeF0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,OAAExQ,EAAM,UAAE6F,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OAAsBsN,EACzD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bo6D,kBAAmB,CAAEh5D,SAAQ6F,cAC5B5C,MAGL0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bo6D,uBAAmB9wD,GAClBjF,MAsCL0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,OACJxQ,EAAM,WAAE2N,EAAU,WAAEsrD,EAAU,MAC9Bh2D,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ5R,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bs6D,mBAAoB,CAClBl5D,SACA2N,aACAsrD,eAEDh2D,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs6D,wBAAoBhxD,GACnBjF,MAGL0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,SACJgW,EAAQ,eAAE2yC,EAAc,UAAEC,EAAS,YAAEC,EAAW,MAAEp2D,GAAQC,EAAAA,EAAAA,OACxDsN,GAAW,CAAC,EAEhB,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B06D,cAAe,CACb9yC,WACA4yC,YACAD,iBACAE,gBAEDp2D,MAGL0H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B06D,mBAAepxD,GACdjF,MAGL0H,EAAAA,EAAAA,IAAiB,kCAAmC,CAAC/L,EAAQmD,EAASyO,KACpE,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BivB,0BAAsB3lB,GACrBjF,MAGL0H,EAAAA,EAAAA,IAAiB,iCAAkC,CAAC/L,EAAQmD,EAASyO,KACnE,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BwvB,+BAA2BlmB,GAC1BjF,MAGL0H,EAAAA,EAAAA,IAAiB,0CAA2CuI,MAAOtU,EAAQmD,EAASyO,KAClF,MAAM,KAAE+oD,EAAI,MAAEt2D,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,IAAKyJ,EAAS0hB,0BACZ,OAGF,IAAKmrC,EAQH,OAPA36D,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BwvB,0BAA2B,IACtB1hB,EAAS0hB,0BACZorC,qBAAiBtxD,IAElBjF,QACH0G,EAAAA,EAAAA,IAAU/K,GAIZ,MAAM66D,QAA4B5gD,GAAuBja,EAAQ26D,EAAK34D,QAEtEhC,GAASmL,EAAAA,EAAAA,MACTnL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BwvB,0BAA2B,IACtB1hB,EAAS0hB,0BACZorC,gBAAiB,CACf54D,OAAQ24D,EAAK34D,OACb4F,SAAU+yD,EAAK/yD,SACfizD,yBAGHx2D,IACH0G,EAAAA,EAAAA,IAAU/K,MEvnCZ+L,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAE+e,EAAK,MAAEtsB,GAAQC,EAAAA,EAAAA,OAAsBsN,GACvC,OAAExQ,EAAM,eAAE05D,IAAmB56D,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOuxB,aAE3DmlC,EAAiBpqC,GAASmqC,IAAmBE,EAAAA,GAAoBC,QACnE,CAAElyD,OAAQ3H,EAAQkP,UAAU,QAAShH,EAEzC,OAAO6e,EAAAA,EAAAA,KAAmBnoB,EAAQ,CAChCs2B,cAAe,CAAC,EAChBF,aAAc,CAAC,EACfM,mBAAeptB,EACfyxD,iBACApqC,SACCtsB,MAGL0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,MAAiB,UAAE42D,GAActpD,GAAW,CAAC,EAC7D,OAAOuW,EAAAA,EAAAA,KAAmBnoB,EAAQ,CAChCk7D,aACC72D,MAGL0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,GAAEtP,GAAOsP,GACT,qBAAEupD,GAAyBn7D,EAEjC,IAAKm7D,EACH,MAAO,IACFn7D,EACHm7D,qBAAsB,CAAC74D,IAI3B,MAAM84D,EAAeD,EAAqBr5D,OAAQV,GAAWA,IAAWkB,GAMxE,OALA84D,EAAa/4D,QAAQC,GACjB84D,EAAav5D,OAtCY,IAuC3Bu5D,EAAa7E,MAGR,IACFv2D,EACHm7D,qBAAsBC,MAI1BrvD,EAAAA,EAAAA,IAAiB,0BAA4B/L,IACpC,IACFA,EACHm7D,0BAAsB7xD,MAI1ByC,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,QAAEjM,EAAO,MAAEtB,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE/C,OAAOypD,EAAAA,EAAAA,IAA0Br7D,EAAQ2F,EAAStB,MAGpD0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,GAAEtP,EAAE,MAAE+B,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE1C,OAAOuW,EAAAA,EAAAA,KAAmBnoB,EAAQ,CAAEoB,OAAQkB,EAAIquB,WAAOrnB,EAAWotB,mBAAeptB,GAAajF,MC3DhG0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAC5C,OAAExQ,EAAM,SAAEwG,IAAagF,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EACzE,GAAKjD,GAAWwG,EAIhB,OAAO2xB,EAAAA,EAAAA,KAAmBv5B,EAAQoB,EAAQwG,EAAU,CAAC,EAAGvD,MAG1D0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAC5C,OAAExQ,EAAM,SAAEwG,IAAagF,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EACzE,GAAKjD,GAAWwG,EAIhB,OAAOooD,EAAAA,EAAAA,KAAkBhwD,EAAQoB,EAAQwG,EAAUvD,MAGrD0H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,OACJ/O,EAAM,MAAEwB,GAAQC,EAAAA,EAAAA,OACdsN,EAEJ,IAAIxQ,EACAwG,EACJ,GAAIgK,EAAQxQ,OACVA,EAASwQ,EAAQxQ,OACjBwG,EAAWgK,EAAQhK,UAAYD,EAAAA,OAC1B,CACL,MAAMgF,GAAqBC,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAC5D,IAAKsI,EACH,OAEFvL,EAASuL,EAAmBvL,OAC5BwG,EAAW+E,EAAmB/E,QAChC,CAIA,OAFS2xB,EAAAA,EAAAA,KAAmBv5B,EAAQoB,EAAQwG,EAAU/E,EAAQwB,MAKhE0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAC5C,OAAExQ,EAAM,SAAEwG,IAAagF,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EACzE,GAAKjD,GAAWwG,EAIhB,OAAO0zD,EAAAA,EAAAA,KAAkBt7D,EAAQoB,EAAQwG,EAAUvD,MAGrD0H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAC/L,EAAQmD,EAASyO,KAC7D,MAAM,UAAEwB,EAAS,MAAE/O,GAAQC,EAAAA,EAAAA,OAAsBsN,GAC3C,OAAExQ,EAAM,SAAEwG,IAAagF,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EACzE,GAAKjD,GAAWwG,EAIhB,OAAO2zD,EAAAA,EAAAA,KAA4Bv7D,EAAQoB,EAAQwG,EAAUwL,EAAW/O,MCpE1E0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,MAAE+e,EAAK,MAAEtsB,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE7C,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bw7D,cAAe,CACb7qC,QACAmE,eAAWxrB,IAEZjF,MAGL0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAE+e,EAAK,MAAEtsB,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE7C,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bk1B,UAAW,CACTvE,QACA5K,YAAQzc,EAER/H,aAAS+H,IAEVjF,MCpBL0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5By7D,0BAA0B,GACzBp3D,MAGL0H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5By7D,0BAA0B,GACzBp3D,MAGL0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,KAAEiyB,EAAI,MAAEx/B,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EACnDiyB,IAEL7jC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,KAC3BE,EAAAA,EAAAA,KAAeF,EAAQqE,GAC1Bq3D,mBAAoB,CAClBC,wBAAyB93B,IAE1Bx/B,IACH0G,EAAAA,EAAAA,IAAU/K,OAGZ+L,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B07D,wBAAoBpyD,GACnBjF,MChCL0H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,MACJ+e,EAAK,MACLtsB,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,OAAO41B,EAAAA,EAAAA,KAAiBxnC,EAAQ,CAC9BunC,mBAAej+B,EACfg+B,kBAAch+B,EACdyxD,eAAgB3kD,QAAQua,GACxBA,SACCtsB,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,OAAE8O,EAAM,MAAErc,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE9C,OAAIyS,EAAAA,EAAAA,KAA0BrkB,IAC5BmD,EAAQiuC,uBAAuB,CAAE/sC,UAC1BrE,IAGF+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B47D,WAAY,CAAEl7C,WACbrc,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAIyS,EAAAA,EAAAA,KAA0BrkB,IAC5BmD,EAAQiuC,uBAAuB,CAAE/sC,UAC1BrE,IAGF+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B47D,WAAY,CACVC,iBAAiB,IAElBx3D,MAGL0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAOg1B,EAAAA,EAAAA,KAAsB5mC,EAAQqE,MAGvC0H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAC/L,EAAQmD,EAASyO,KAC9D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+nC,0BAAsBz+B,GACrBjF,KAGLqvD,GAA0B,uBAAwB,mB,yBCjElD,MAAMoI,GAAoB,qB,gBCAX,SAASC,GAAWC,GACjCh2D,SAASi2D,iBAAkC,gDACxC/5D,QAAS61B,IACJikC,EACGjkC,EAAK7N,KAAKzlB,SAAS,oBACtBszB,EAAK7N,KAAO6N,EAAK7N,KAAKkQ,QAAQ,UAAW,mBAG3CrC,EAAK7N,KAAO6N,EAAK7N,KAAKkQ,QAAQ,iBAAkB,YAGxD,CCJO,SAAS8hC,GAAoBC,GAC9B1L,EAAAA,GACFzmC,OAAO0mC,SAAU0L,eAAeD,GAK9Bn2D,SAAS0J,QAAUysD,IACrBn2D,SAAS0J,MAAQysD,EAErB,CAGO,MAAME,IAAejoD,EAAAA,EAAAA,IAAS8nD,GAjBV,KAiBmD,GC0uB9E,IAAII,GA4IAC,IAz1BJxwD,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,MAAE9I,EAAK,MAAEzE,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EACnDk/C,OAA4BxnD,IAAVR,EAAsBA,IAAS5I,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOysD,gBAKrF,OAHA9wD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAAE8wD,mBAAmBzsD,GAC5C,IAAKrE,EAAQgxD,oBAAqBF,MAK7C/kD,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,gBAAEvR,GAAoBuR,EAE5B,MAAO,IACF5R,EACHK,sBAIJ0L,EAAAA,EAAAA,IAAiB,uBAAyB/L,IACjC,IACFA,EACHK,qBAAiBiJ,MAIrByC,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAE9I,EAAK,MAAEzE,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GACnD,OAAExQ,IAAWwL,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EAE/D,IAAKjD,EACH,OAGF,MAAM0M,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5By8B,WAAY,CACVzqB,SAAU,IACLlE,EAAS2uB,WAAWzqB,SACvB,CAAC5Q,GAAS,IACL0M,EAAS2uB,WAAWzqB,SAAS5Q,GAChCo7D,cAAoBlzD,IAAVR,EAAsBA,IAAUgF,EAAS2uB,WAAWzqB,SAAS5Q,IAAW,CAAC,GAAGo7D,aAI3Fn4D,MAGL0H,EAAAA,EAAAA,IAAiB,8BAA+B,CAAC/L,EAAQmD,EAASyO,KAChE,MAAM,OAAE6qD,EAAM,MAAEp4D,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GACpD,OAAExQ,IAAWwL,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EAE/D,IAAKjD,EACH,OAGF,MAAM0M,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5By8B,WAAY,CACVzqB,SAAU,IACLlE,EAAS2uB,WAAWzqB,SACvB,CAAC5Q,GAAS,IACL0M,EAAS2uB,WAAWzqB,SAAS5Q,GAChCo7D,UAAU,EACVE,WAAYD,MAIjBp4D,MAGL0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAC5C,OAAExQ,IAAWwL,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EAE/D,IAAKjD,EACH,OAGF,MAAM0M,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5By8B,WAAY,CACVzqB,SAAU,IACLlE,EAAS2uB,WAAWzqB,SACvB,CAAC5Q,GAAS,IACL0M,EAAS2uB,WAAWzqB,SAAS5Q,GAChCo7D,UAAU,MAIfn4D,MAGL0H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,EACtC,IAAKxR,EAAAA,EAAAA,QAAkBu8D,EAAAA,EAAAA,MAIvB,OAAO5uD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BG,kBAAyE,KAAtDD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOu4D,aAAa/6D,QAC7DwC,MAGL0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAC5C,OAAExQ,IAAWwL,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EAE/D,GAAKjD,EAIL,OAAO2M,EAAAA,EAAAA,GAAe/N,EAAQ,CAAE+wD,oBAAgBznD,EAAWunD,uBAAuB,GAASxsD,MAG7F0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACxC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BiwD,mBAAoBniD,EAASmiD,kBAC7BnF,WAAY,IACPh9C,EAASg9C,WACZ1vB,sBAAkB9xB,EAClBuzD,oBAAgBvzD,IAEjBjF,MAGL0H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,MAAiB,UAAE2C,GAAc2K,GAAW,CAAC,EAC7D,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B8qD,WAAY,KACP5qD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOymD,WACjC1vB,iBAAkBn0B,EAClB41D,oBAAgBvzD,IAEjBjF,MAGL0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,MAAiB,QAAEmI,GAAYmF,GAAW,CAAC,EAC3D,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B8qD,WAAY,KACP5qD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOymD,WACjC+R,eAAgBpwD,EAChB2uB,sBAAkB9xB,IAEnBjF,MAGL0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BG,oBAAoBD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOlE,mBACjDkE,MAGL0H,EAAAA,EAAAA,IAAiB,iBAAkB,CAAC/L,EAAQmD,EAASyO,KACnD,MAAM,MAAE/D,GAAU+D,GACZ,aAAEkrD,GAAiB98D,EACzB,IAAK88D,EACH,MAAO,IACF98D,EACH88D,aAAc,CAACjvD,IAInB,MAAMkvD,EAAYD,EAAah7D,OAAQk7D,GAAMA,IAAMnvD,GAMnD,OALAkvD,EAAU16D,QAAQwL,GACdkvD,EAAUl7D,OA9KU,IA+KtBk7D,EAAUxG,MAGL,IACFv2D,EACH88D,aAAcC,MAIlBhxD,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,QAAE7L,GAAY6L,GACd,OAAEme,GAAW/vB,EAAO8vB,SAC1B,IAAKC,EACH,MAAO,IACF/vB,EACH8vB,SAAU,IACL9vB,EAAO8vB,SACVC,OAAQ,CACNH,KAAM,IACNE,SAAU,CAAC/pB,MAMnB,MAAMk3D,EAAcltC,EAAOD,SAAShuB,OAAQurD,GAAMA,EAAE/qD,KAAOyD,EAAQzD,IAGnE,OAFA26D,EAAY56D,QAAQ0D,GAEb,IACF/F,EACH8vB,SAAU,IACL9vB,EAAO8vB,SACVC,OAAQ,IACHA,EACHD,SAAUmtC,QAMlBlxD,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,WAAEiV,GAAejV,GACjB,mBAAE2f,GAAuBvxB,EAC/B,IAAKuxB,EACH,MAAO,IACFvxB,EACHuxB,mBAAoB,CAAC1K,IAIzB,MAAMk2C,EAAYxrC,EAAmBzvB,OAAQQ,GAAOA,IAAOukB,GAM3D,OALAk2C,EAAU16D,QAAQwkB,GACdk2C,EAAUl7D,OAnOU,IAoOtBk7D,EAAUxG,MAGL,IACFv2D,EACHuxB,mBAAoBwrC,MAIxBhxD,EAAAA,EAAAA,IAAiB,yBAA2B/L,IACnC,IACFA,EACHuxB,mBAAoB,OAIxBxlB,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,MAAEsrD,EAAK,cAAEC,GAAkBvrD,EACjC,MAAO,IACF5R,EACH8vB,SAAU,IACL9vB,EAAO8vB,SACVoB,MAAO,CACLM,OAAU2rC,EAAwBn9D,EAAO8vB,SAASoB,MAAMM,OAA9B0rC,IAG9Bp2C,aAAc,IACT9mB,EAAO8mB,aACVoK,MAAO,CACLM,OAAS2rC,EAAgBD,EAAQl9D,EAAO8mB,aAAaoK,MAAMM,aAMnEzlB,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,SAAsB6N,GAAiBP,EACjDwrD,EAAajrD,EAAa7C,QAChC6C,EAAa7C,WAAY+tD,EAAAA,GAAAA,KAEzB,MAAMC,EAAmB,KAAIp9D,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO8d,eACrDo7C,EAA4BD,EAAiB5jD,UAAW8jD,GAC5DJ,EAAaI,EAAEluD,UAAY6C,EAAa7C,QAAUkuD,EAAEx8D,UAAYmR,EAAanR,SAQ/E,OANmC,IAA/Bu8D,GACFD,EAAiBpiC,OAAOqiC,EAA2B,GAGrDD,EAAiB7xD,KAAK0G,IAEfpE,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BmiB,cAAem7C,GACdj5D,MAGL0H,EAAAA,EAAAA,IAAiB,sCAAuC,CAAC/L,EAAQmD,EAASyO,KACxE,MAAM,OAAExQ,EAAM,gBAAEuO,EAAe,MAAEtL,GAAQC,EAAAA,EAAAA,OAAsBsN,EAI/D,IAF0B6rD,EAAAA,EAAAA,KAA4Bz9D,EAAQoB,IAEjB,cAApBuO,EAOvB,YANAxM,EAAQqM,iBAAiB,CACvBxO,QAAS,CACPyO,IAAK,8CAEPpL,UAKJ,MAAMjB,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,EAAM,OACX,MAAMgd,GAAeC,EAAAA,EAAAA,KAAmBrgB,EAAQoB,GAC1Cs8D,EAAkBt8D,GAASD,EAAAA,EAAAA,KAAqBnB,EAAQoB,QAAUkI,EAClEq0D,EAAgBv8D,GAASw8D,EAAAA,EAAAA,KAAoB59D,EAAQoD,QAAQkG,GAE7D,iBACJu0D,EAAgB,cAAEC,EAAa,cAAEC,EAAa,iBAAEC,EAAgB,cAAEC,EAAa,gBAC/EC,EAAe,mBAAEC,EAAkB,cAAEC,IACnCC,EAAAA,EAAAA,IAA4Bj7D,EAAMgd,EAAcu9C,EAAeD,GAC7DY,GAAiBvH,EAAAA,EAAAA,IAAQ,CAC7B8G,EAAmB,uCAAoCv0D,EACvDw0D,EAAgB,wCAAqCx0D,EACrDy0D,EAAgB,wCAAqCz0D,EACrD80D,EAAgB,+CAA4C90D,EAC5D60D,EAAqB,+CAA4C70D,EACjE00D,EAAmB,uCAAoC10D,EACvD20D,EAAgB,wCAAqC30D,EACrD40D,EAAkB,0CAAuC50D,IACxDsF,IAAK4V,GAAMsP,EAAAA,GAA0BtP,IAExC,IAAK85C,EAAez8D,OAKlB,YAJAsB,EAAQqM,iBAAiB,CACvBxO,QAAS8yB,EAAAA,GAA0B,2BACnCzvB,UAKJ,MAAMk6D,EAAgBzqC,EAAAA,GAA0B,sCAC1C0qC,EAAuBF,EAAex9C,KAAK,MAAMsZ,QAAQ,YAAa,GAAGmkC,OAE/Ep7D,EAAQqM,iBAAiB,CACvBxO,QAAS8yB,EAAAA,GAA0B,8BAA+B0qC,GAClEn6D,aAIJ0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,EAChC0rD,GAAmBp9D,EAAAA,EAAAA,KAAeF,EAAQqE,GAC7C8d,cAAcrgB,OAAO,EAAGwN,aAAcA,IAAYsC,EAAQtC,SAE7D,OAAOvB,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BmiB,cAAem7C,GACdj5D,MAGL0H,EAAAA,EAAAA,IAAiB,aAAc,CAAC/L,EAAQmD,EAASyO,KAC/C,MAAM,KAAEga,EAAI,MAAEvnB,GAAQC,EAAAA,EAAAA,OAAsBsN,EAG5C,GAAI,YAAaga,GAAQA,EAAK+qB,eAAgB8nB,EAAAA,GAAAA,IAAqB7yC,GACjE,OAAO5rB,EAGT,MAAM0+D,EAAa,KAAIx+D,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOs6D,SACrD,GAAI,YAAa/yC,EAAM,CACrB,MAAMgzC,EAAqBF,EAAWhlD,UAAWmlD,GAASA,EAAiB79D,UAAY4qB,EAAK5qB,UAChE,IAAxB49D,GACFF,EAAWxjC,OAAO0jC,EAAoB,EAE1C,CAIA,OAFAF,EAAWjzD,KAAKmgB,IAET7d,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2+D,QAASD,GACRr6D,MAGL0H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAC/L,EAAQmD,EAASyO,KAClD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C8sD,EAAa,KAAIx+D,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOs6D,SAIrD,OAFAD,EAAWnI,OAEJxoD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2+D,QAASD,GACRr6D,MAGL0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAQkX,IAAKg2C,EAAgB,MAAEz6D,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE7D,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B8+D,oBACCz6D,MAGL0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,WAAEmtD,EAAU,MAAE16D,GAAQC,EAAAA,EAAAA,OAAsBsN,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bg/D,0BAA2BD,GAC1B16D,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bg/D,+BAA2B11D,GAC1BjF,MAGL0H,EAAAA,EAAAA,IAAiB,WAAY,CAAC/L,EAAQmD,EAASyO,KAC7C,MAAM,IACJkX,EAAG,OAAE1nB,EAAM,UAAE6F,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OAC9BsN,EAEE5Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAClD,IAAKjG,EAAS,OAEd,MAAM8tB,EAAQ9tB,EAAQmtC,WAAYL,EAAAA,EAAAA,KAAa9tC,EAAQgB,IAAUsB,GACjE,GAAKwsB,EAAL,CAEA,KAAK0hB,EAAAA,EAAAA,KAAmBxwC,EAAQ8uB,GAY9B,OAXA9uB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BywC,gBAAiB,CACf3hB,QACA1sB,KAAM,OACNsuC,UAAW,CACTrmC,OAAQ,WACRuH,aAGHvN,QACH0G,EAAAA,EAAAA,IAAU/K,GAIZA,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bi/D,WAAY,CACVn2C,MACA1nB,SACA6F,cAED5C,IACH0G,EAAAA,EAAAA,IAAU/K,EAxBQ,KA2BpB+L,EAAAA,EAAAA,IAAiB,YAAa,CAAC/L,EAAQmD,EAASyO,KAC9C,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bi/D,gBAAY31D,GACXjF,MAGL0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,MACJvN,GAAQC,EAAAA,EAAAA,SAAsB46D,GAC5BttD,EAEJ,IAAKutD,EAAAA,EAAAA,KAA0Bn/D,GAE/B,OAAO+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bo/D,SAAU,CACRC,iBAAkB58D,KAAKC,SACpBw8D,IAEJ76D,MAGL0H,EAAAA,EAAAA,IAAiB,cAAe,CAAC/L,EAAQmD,EAASyO,KAChD,MAAM,OACJ0tD,EAAM,OAAEC,EAAM,MAAEl7D,GAAQC,EAAAA,EAAAA,OACtBsN,EAEJ,IAAK4tD,EAAAA,MAAgCL,EAAAA,EAAAA,KAA0Bn/D,GAAS,OAExE,MAAM8N,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAClCo7D,EAAkB3xD,EAAS4xD,MAAMC,cAAgB,EACvD,OAAIl9D,KAAKC,MAAQ+8D,EAAkBG,EAAAA,SAAnC,GAEO7xD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B0/D,KAAM,CACJC,aAAcl9D,KAAKC,MACnB48D,SACAC,WAEDl7D,MAGL0H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAC/L,EAAQmD,EAASyO,KACtD,IACF5R,EACH6/D,mBAAoB,IACf7/D,EAAO6/D,sBACPjuD,OAKT7F,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEtC,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B8/D,4BAA4B,GAC3Bz7D,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEtC,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B8/D,gCAA4Bx2D,GAC3BjF,MAGL0H,EAAAA,EAAAA,IAAiB,4BAA8B/L,IACpC,IACJA,EACHg/B,SAAU,IACLh/B,EAAOg/B,SACVmrB,MAAO,IACFnqD,EAAOg/B,SAASmrB,MACnB4V,8BAA8B,QAQtCh0D,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,OACJxQ,EAAM,SAAEwG,EAAQ,SAAEzF,EAAQ,MAAEkC,GAAQC,EAAAA,EAAAA,OAClCsN,EAEEg1C,EAA8B,UAAnBzkD,GAAUC,MAAoBD,EAASykD,SACxD,IAAKA,EAAU,OAEf,MAAMF,EAAS5+C,OAAOC,OAAO/H,EAAO6mD,qBACjCrjD,KAAMw8D,GAAkBA,EAAcrZ,mBAAqBqZ,EAAcpZ,WAAaA,GAEnFvlC,EAAWqlC,GAAQpkD,GAEnByT,GAAuBC,EAAAA,EAAAA,KAA2BhW,IACpD0mD,GAAQ7yB,WAAc9d,EAQrBsL,IAELle,EAAQ88D,wBAAwB,CAAE57D,UAElClB,EAAQ+8D,kBAAkB,CAAE9+D,SAAQwG,WAAUyZ,cAX5Cle,EAAQ4kB,iBAAiB,CACvBC,eAAgB,UAChB3jB,aAYN0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,MAAE8G,EAAK,MAAErU,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE7C,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BmgE,kBAAmB,CACjBznD,UAEDrU,MAGL0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BmgE,uBAAmB72D,GAClBjF,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BmwB,+BAA2B7mB,GAC1BjF,MAGL0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,OAAE4f,EAAM,MAAEntB,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC9C,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BogE,wBAAyB5uC,GACxBntB,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BogE,6BAAyB92D,GACxBjF,MAGL0H,EAAAA,EAAAA,IAAiB,iCAAkC,CAAC/L,EAAQmD,EAASyO,KACnE,MAAM,IAAE7H,GAAQ6H,GACV,aAAEyuD,GAAiBrgE,EAAO8mB,aAEhC,MAAO,IACF9mB,EACH8mB,aAAc,IACT9mB,EAAO8mB,aACVu5C,cAAcv0D,EAAAA,EAAAA,IAAO,IAAIu0D,KAAiBt2D,IAAMoN,MAAM,EAAGmpD,EAAAA,UAK/Dv0D,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,OAAExQ,EAAM,MAAEiD,GAAQC,EAAAA,EAAAA,OAAsBsN,EAM9C,OAHoBgT,EAAAA,EAAAA,KAAkB5kB,EAAQqE,IAC5BlB,EAAQuf,SAAS,CAAEpgB,GAAIlB,EAAQiD,WAE1C0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BugE,iBAAkB,CAChBn/D,WAEDiD,MAGL0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BugE,sBAAkBj3D,GACjBjF,MAGL0H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,OAAExQ,EAAM,QAAE0J,EAAO,MAAEzG,GAAQC,EAAAA,EAAAA,OAAsBsN,EAMvD,OAHoBgT,EAAAA,EAAAA,KAAkB5kB,EAAQqE,IAC5BlB,EAAQuf,SAAS,CAAEpgB,GAAIlB,EAAQiD,WAE1C0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BwgE,eAAgB,CACdp/D,SACA0J,YAEDzG,MAGL0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BwgE,oBAAgBl3D,GACfjF,MAGL0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,gBAAE6uD,GAAoBzgE,GACtB,SAAEqsD,EAAWoU,EAAgBpU,SAAQ,YAAEqU,EAAcD,EAAgBC,aAAgB9uD,EAE3F,MAAO,IACF5R,EACHygE,gBAAiB,CACfpU,WACAqU,mBAKN30D,EAAAA,EAAAA,IAAiB,eAAgB,CAAC/L,EAAQmD,EAASyO,KACjD,MAAM,SAAE+uD,EAAQ,KAAEC,EAAI,MAAEv8D,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEtD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6gE,SAAU,CACRC,MAAOH,EACPC,SAEDv8D,MAGL0H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAC/L,EAAQmD,EAASyO,KAClD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6gE,cAAUv3D,GACTjF,MAGL0H,EAAAA,EAAAA,IAAiB,kBAAoB/L,IACnCk5C,MAAM,eAAsBz2C,KAAKC,SAC9BmiB,KAAMvB,GAAaA,EAAS1V,QAC5BiX,KAAM+P,KH1tBI,SAA8BmsC,EAAuBC,GAClE,MAAMC,EAAyBF,EAAcG,OAE7C,QAAKpF,GAAkBqF,KAAKF,IAQrBA,IAA2BD,CACpC,EGitBUI,CAFJxsC,EAAUA,EAAQssC,OAEgB3H,aAChCv5D,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHqhE,sBAAsB,IAExBt2D,EAAAA,EAAAA,IAAU/K,MAGbshE,MAAOzC,IACFp/B,EAAAA,KAEFjlB,QAAQ9G,MAAM,4BAA6BmrD,QAKnD9yD,EAAAA,EAAAA,IAAiB,+BAAgC,CAAC/L,EAAQqK,EAAQuH,KAChE5R,GAASmL,EAAAA,EAAAA,MACTnL,EAAS,IACJA,EACHuhE,0BAA2BnrD,QAAQxE,EAAQ4vD,eAE7Cz2D,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,cAAgB/L,KAC1BE,EAAAA,EAAAA,KAAeF,GAAQsE,EAAAA,EAAAA,OAAmBm9D,qBAC/CC,EAAAA,EAAAA,QAOF31D,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,UAAE+vD,EAAS,MAAEt9D,GAAQC,EAAAA,EAAAA,OAAsBsN,EAmBjD,OAjBI+vD,GACErF,IAAsBsF,cAActF,IAExCA,GAAuBtyC,OAAO63C,YAAY,KACxC1+D,EAAQktD,gBAAgB,CACtBhsD,WAVsB,OAc1Bu9D,cAActF,IACdA,QAAuBhzD,GAGzBtJ,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B2hE,aACCt9D,GAEI,IACFrE,EACH8hE,2BAA4BH,GAAYI,EAAAA,GAAAA,WAA6Bz4D,MAIzEyC,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAC5C,sBAAEowD,IAA0BzuB,EAAAA,GAAAA,GAAqBvzC,GACjDiC,EAAgBjC,EAAOiC,cACvBggE,EAAejiE,EAAOgX,QAAQirD,aAC9BC,EAASD,EAAe,OAAS,GAEvC,GAAIj8D,SAAS0J,MAAMjL,SAAS09D,EAAAA,KAG1B,OAFApG,IAAW,QACXG,GAAoB,GAAGgG,IAASE,EAAAA,OAAcD,EAAAA,OAIhD,GAAIniE,EAAO8hE,4BAA8BnhE,KAAK0X,MAAM5V,KAAKC,MAAQ,KAAQ,GAAM,EAAG,CAChF,MAEM2/D,GAFoBN,EAAAA,GAAAA,MAEY/hE,EAAO8hE,2BAE7C,GAAIO,EAAY,EAGd,OAFAnG,GAAoB,GAAGgG,IAASG,iBAAyBA,EAAY,EAAI,IAAM,WAC/EtG,IAAW,EAGf,CAEAA,IAAW,GAEX,MAAMv/C,GAAc5P,EAAAA,EAAAA,KAAyB5M,EAAQqE,GAErD,GAAImY,GAAewlD,IAA0BhiE,EAAOsiE,SAASC,eAAgB,CAC3E,MAAM,OAAEnhE,EAAM,SAAEwG,GAAa4U,EACvBkO,GAAcnjB,EAAAA,EAAAA,KAAWvH,EAAQoB,GACvC,GAAIspB,EAAa,CACf,MAAMhb,GAAQ8yD,EAAAA,EAAAA,IAAa1uC,EAAAA,GAA2BpJ,EAAatpB,IAAWa,GACxEkH,GAAQgB,EAAAA,EAAAA,KAAYnK,EAAQoB,EAAQwG,GAC1C,OAAI8iB,EAAYthB,SAAWD,OACzBkzD,GAAa,GAAG6F,IAASxyD,OAAWvG,EAAMuG,cAI5C2sD,GAAa,GAAG6F,IAASxyD,IAE3B,CACF,CAEAwsD,GAAoBzL,EAAAA,GAAc,GAAK,GAAGyR,IAASE,EAAAA,UAGrDr2D,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByiE,wBAAoBn5D,GACnBjF,MAGL0H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAC/L,EAAQmD,EAASyO,KAC9D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B0iE,0BAAsBp5D,GACrBjF,MAGL0H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAC/L,EAAQmD,EAASyO,KAC9D,MAAM,MAAE85B,EAAK,MAAErnC,GAAQC,EAAAA,EAAAA,OAAsBsN,EAC7C,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2iE,uBAAwBj3B,GACvBrnC,MAGL0H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAC/L,EAAQmD,EAASyO,MAC7DgxD,EAAAA,EAAAA,IAAiBhxD,EAAQ0hC,aAG3BvnC,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,SAAEixD,GAAajxD,GACf,gCACJkxD,EAA+B,8BAC/BC,EAA6B,6BAC7BC,GACEhjE,EAAO2pB,WAAa,CAAC,GACjBs5C,oCAAqCC,GAAmBljE,EAAOg/B,SAEvE,GAAK8jC,GAAoCC,GAAkCC,KAGvEE,GAAkBzgE,KAAKC,MAAQwgE,EAAgD,IAA/BF,GAgBpD,OAdwBl7D,OAAOC,OAAO/H,EAAOgI,SAASlG,OAAQ0iB,IAAOA,EAAEm9C,WAAW/yD,IAAK4V,GAAMA,EAAEliB,IAE/EJ,QAASmC,IACvBlB,EAAQqM,iBAAiB,CACvBE,MAAOokB,EAAAA,GAA0B+uC,EAAW,qBAAuB,wBACnE7hE,QAAS8yB,EAAAA,GACP+uC,EAAW,4BAA8B,8BACzCA,EAAWE,EAAgCD,GAE7Ch7B,SA90B2C,IA+0B3CzjC,YAIG,IACFrE,EACHg/B,SAAU,IACLh/B,EAAOg/B,SACVikC,oCAAqCxgE,KAAKC,UAMhD,IACIygE,GADAC,GAA+B,GAGnC3gC,EAAAA,GAAAA,IAAaziC,IACX,MAAM,gBAAEqwD,EAAe,eAAEgT,IAAmBpkD,EAAAA,EAAAA,MAEtCqkD,EAAkBtjE,EAAOsiE,SAASC,iBAAmBhG,GACrDgH,EAAmBz7D,OAAOC,OAAO/H,EAAOgI,SAASlG,OAAQ0iB,GAAMA,EAAEm9C,WAAW9/D,OAC5E8gC,GAAcziC,EAAAA,EAAAA,KAAeF,GAAQsE,EAAAA,EAAAA,OAAmBq+B,YAE1D2gC,GACFjT,IAGEkT,IAAqBH,IAAwBzgC,IAC3CwgC,IAAex2C,aAAaw2C,IAEhCA,GAAgBn5C,OAAO9e,WAAW,KAChClL,GAASmL,EAAAA,EAAAA,MACT,MAAMq4D,EAAsB17D,OAAOC,OAAO/H,EAAOgI,SAASlG,OAAQ0iB,GAAMA,EAAEm9C,WAAW9/D,OACrFwhE,EAAe,CAAEI,SAAUD,KAAwBE,EAAAA,EAAAA,MAAuB7hE,UAlBzD,MAsBrB06D,GAAqBv8D,EAAOsiE,SAASC,eACrCa,GAAuBG,KCv5BzBx3D,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAE5C+lC,GADUz3C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOi0C,QACvBX,QAAU,YAC3BgsB,GAAoBzjE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOs/D,kBAaxD,OAXAxgE,EAAQygE,0BAA0B,CAChCC,WAAYF,EACZhsB,SACAtzC,UAGFrE,GAAS8jE,EAAAA,EAAAA,KAAa9jE,EAAQqE,IACrBmzC,EAAAA,EAAAA,KAAcx3C,EAAQ,CAC7B23C,UACCtzC,MAKL0H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAIlD,OAFA5R,GAASw3C,EAAAA,EAAAA,KAAcx3C,EAAQ,CAAE23C,YAAQruC,GAAajF,IAC7Cy3C,EAAAA,EAAAA,KAAmB97C,EAAQ,CAAE23C,YAAQruC,GAAajF,MAI7D0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,MAAE8B,EAAK,MAAErP,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE7C,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs4C,QAAS,KACJp4C,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOi0C,QACjCX,OAAQ,SACRjkC,UAEDrP,MAGL0H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B68C,mBAAevzC,GACdjF,MAGL0H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5By/C,mBAAen2C,GACdjF,MAGL0H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,OAAE9P,EAAM,OAAEE,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5D9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAElC0/D,EAAaj2D,EAASk3C,WAAWljD,OACvC,IAAIkiE,EAAgB,IACfD,KACAjiE,GAGAkiE,EAAcC,wBACbD,EAAcE,sBACdF,EAAcG,sBAClBH,EAAgB,IACXD,EACHE,wBAAwB,EACxBC,sBAAsB,EACtBC,qBAAqB,KAClBriE,IAIFkiE,EAAcI,wBAA2BJ,EAAcK,sBAC1DL,EAAgB,IACXD,EACHK,wBAAwB,EACxBC,qBAAqB,KAClBviE,IAIP9B,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BglD,WAAY,IACPl3C,EAASk3C,WACZC,cAAe,CACb,CAACjjD,GAAS8L,EAASk3C,WAAWC,cAAcjjD,IAE9CF,OAAQkiE,IAET3/D,IACH0G,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQuhD,mBAAmB,CACzB1iD,SAAQyhD,eAAe,EAAMp/C,MAAOyJ,EAASxL,QAIjDyJ,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,OAAE5P,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EACpD9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExCrE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BglD,WAAY,IACPl3C,EAASk3C,WACZC,cAAe,CACb,CAACjjD,GAAS8L,EAASk3C,WAAWC,cAAcjjD,IAE9CF,OAAQ,IACHwiE,EAAAA,OAGNjgE,IACH0G,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQuhD,mBAAmB,CACzB1iD,SAAQyhD,eAAe,EAAMp/C,MAAOyJ,EAASxL,QAIjDyJ,EAAAA,EAAAA,IAAiB,sCAAuC,CAAC/L,EAAQmD,EAASyO,KACxE,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BukE,mCAAmC,GAClClgE,MAGL0H,EAAAA,EAAAA,IAAiB,uCAAwC,CAAC/L,EAAQmD,EAASyO,KACzE,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BukE,mCAAmC,GAClClgE,K,iBC3IL0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,OACJxQ,EAAM,SAAEwG,EAAWD,EAAAA,GAAc,UAAEV,EAAS,UAAEu1B,EAAS,WAAEgoC,EAAU,aAAEC,EAAY,mBAAEC,EAAkB,OAAE9O,EAAM,mBAC7G+O,EAAkB,gBAAEC,EAAe,MAAEvgE,GAAQC,EAAAA,EAAAA,OAC3CsN,EAEE9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6kE,YAAa,IACR/2D,EAAS+2D,YACZzjE,SACAwG,WACAX,YACAu9D,WAAYA,GAAc,EAC1BC,eACAC,qBACA9O,SACAgP,kBACAvY,UAAU,EACVsY,qBACAnoC,aAEF7mB,gBAAiB,CAAC,EAClB8B,0BAA0B,GACzBpT,MAGL0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAC5C,OACJikD,EAAM,QAAEzvB,EAAO,aAAE0vB,EAAY,SAAEzJ,IAC7BnsD,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwgE,YAElC,OAAO92D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6kE,YAAa,CACXhP,SACAzvB,UACAimB,WACAyJ,iBAEDzxD,MAGL0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,OACJxQ,EAAM,UAAE6F,EAAS,SAAEW,EAAQ,UAAE40B,EAAS,MAAEn4B,GAAQC,EAAAA,EAAAA,OAC9CsN,EAEE5Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAClD,IAAKjG,EAAS,OAEd,MAAMyF,GAAYC,EAAAA,EAAAA,GAAoB1F,GAChCub,GAAeuoD,EAAAA,EAAAA,KAAmB9kE,EAAQgB,GAE1C+jE,GAAeC,EAAAA,EAAAA,IAAsBhkE,GACrCikE,EAAqBF,GAAcj9B,SACzC,GAAIm9B,EAAoB,CACtB,GAAIA,GAAsBzoC,EAAW,OAErC,MAA+B,UAA3BuoC,EAAa3xD,eACfjQ,EAAQ+hE,gBAAgB,CACtB9jE,SACA6F,YACAW,WACAguD,OAAQuP,EAAAA,GAAkBC,OAC1B5oC,YACAn4B,eAKJlB,EAAQkiE,gBAAgB,CACtBjkE,SACA6F,YACAW,WACAguD,OAAQ0P,EAAAA,GAAYF,OACpB5oC,YACAn4B,SAGJ,CAEA,MAAMkhE,EAAoBhpD,GAAeyoD,EAAAA,EAAAA,IAAsBzoD,QAAgBjT,EACzEk8D,EAA0BD,GAAmBz9B,UAC9C09B,GAA2BA,GAA2BhpC,IAEvB,UAAhC+oC,EAAkBnyD,UAYtBjQ,EAAQkiE,gBAAgB,CACtBjkE,OAAQmb,EAAcnb,OACtB6F,UAAWsV,EAAcja,GACzBsF,SAAUnB,GAAWmkB,aACrBgrC,OAAQ0P,EAAAA,GAAYF,OACpB5oC,YACAn4B,UAjBAlB,EAAQ+hE,gBAAgB,CACtB9jE,OAAQmb,EAAcnb,OACtB6F,UAAWsV,EAAcja,GACzBsF,SAAUnB,GAAWmkB,aACrBgrC,OAAQuP,EAAAA,GAAkBC,OAC1B5oC,YACAn4B,cAeN0H,EAAAA,EAAAA,IAAiB,8BAA+B,CAAC/L,EAAQmD,EAASyO,KAChE,MAAM,OAAExQ,EAAM,UAAE6F,EAAS,UAAEu1B,GAAc5qB,EAEnC6zD,EAAuBzlE,EAAOsQ,SAASo1D,iBAAiBtkE,IAAS4H,MAAQ,CAAC,EAEhF,OAAKwzB,EAeE,IACFx8B,EACHsQ,SAAU,IACLtQ,EAAOsQ,SACVo1D,iBAAkB,IACb1lE,EAAOsQ,SAASo1D,iBACnB,CAACtkE,GAAS,CACR4H,KAAM,IACDy8D,EACH,CAACx+D,GAAYu1B,OAvBd,IACFx8B,EACHsQ,SAAU,IACLtQ,EAAOsQ,SACVo1D,iBAAkB,IACb1lE,EAAOsQ,SAASo1D,iBACnB,CAACtkE,GAAS,CACR4H,MAAM+G,EAAAA,EAAAA,IAAK01D,EAAsB,CAACx+D,WAwB9C8E,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,OACJikD,EAAM,MACNxxD,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6kE,YAAa,KACR3kE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwgE,YACjChP,SACAzvB,SAAS,IAEV/hC,MAGL0H,EAAAA,EAAAA,IAAiB,6BAA8B,CAAC/L,EAAQmD,EAASyO,KAC/D,MAAM,aACJkkD,EAAY,MACZzxD,GAAQC,EAAAA,EAAAA,OACNsN,EAUJ,OARA5R,EAAS,IACJA,EACH6kE,YAAa,IACR7kE,EAAO6kE,YACV9O,iBAAkBD,KAIf/nD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6kE,YAAa,KACR3kE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwgE,YACjC/O,iBAEDzxD,MAGL0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,QACJw0B,EAAO,MACP/hC,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6kE,YAAa,KACR3kE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwgE,YACjCz+B,YAED/hC,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,SAAEy6C,EAAQ,MAAEhoD,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEhD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6kE,YAAa,KACR3kE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOwgE,YACjCxY,aAEDhoD,K,oDCzML,IAAIshE,IAAiB,GACrBC,EAAAA,EAAAA,IAAe,KACb,MAAM5lE,GAASmL,EAAAA,EAAAA,MACVnL,EAAO6lE,UACR7lE,EAAOsiE,SAASwD,cAAgBH,IAAyD,IAAvC79D,OAAO4G,KAAK1O,EAAOgI,SAASnG,SAChFkkE,EAAAA,GAAAA,SAIJh6D,EAAAA,EAAAA,IAAiB,cAAeuI,MAAOtU,EAAQmD,EAASyO,KACtD,MAAM,SAAE0wD,EAAQ,MAAEj+D,GAAQC,EAAAA,EAAAA,OAAsBsN,EAChD5R,GAASgmE,EAAAA,EAAAA,KAAuBhmE,EAAQ,CACtC00B,WAAW,KAEb3pB,EAAAA,EAAAA,IAAU/K,SACJimE,EAAAA,GAAAA,IAAc3D,GAEpB,MAAM4D,EAAc3rB,KAAKC,UAAU,KAAK2rB,EAAAA,GAAAA,MAAqBzlD,OAAQ1gB,EAAOiC,gBAC5EjC,GAASmL,EAAAA,EAAAA,MACT,MAAMi7D,GAAaC,EAAAA,GAAAA,KAAgBL,EAAAA,EAAAA,KAAuBhmE,EAAQ,CAChE8lE,aAAa,EACbpyD,WAAOpK,EACPorB,WAAW,KAGb,UACQ4xC,EAAAA,GAAAA,IAAeJ,EAAaE,IAElCG,EAAAA,EAAAA,MACAvmE,GAASmL,EAAAA,EAAAA,MACTnL,GAASgmE,EAAAA,EAAAA,KAAuBhmE,EAAQ,CACtC8lE,aAAa,EACbpyD,WAAOpK,EACPorB,WAAW,KAEb3pB,EAAAA,EAAAA,IAAU/K,IAEVwmE,EAAAA,GAAAA,KAAiB,EACnB,CAAE,MAAO3H,IACP4H,EAAAA,GAAAA,KAEAzmE,GAASmL,EAAAA,EAAAA,MACTnL,GAASgmE,EAAAA,EAAAA,KAAuBhmE,EAAQ,CACtC00B,WAAW,KAEb3pB,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQqM,iBAAiB,CACvBxO,QAAS,yBACTqD,UAEFlB,EAAQujE,mBAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBC,iBAAkBviE,SACzE,KAGF0H,EAAAA,EAAAA,IAAiB,gBAAkB/L,KAC5B6mE,EAAAA,GAAAA,MAELC,aAAaC,WAAWC,EAAAA,MACjBC,EAAAA,EAAAA,KAAsBjnE,MAG/B+L,EAAAA,EAAAA,IAAiB,eAAgB,CAAC/L,EAAQmD,EAASyO,KACjD,MAAMs1D,EAAkBp/D,OAAOC,OAAO/H,EAAOgI,UACvC,YAAEk+D,EAAW,WAAEE,GAAex0D,EAC9Bu1D,EAAU5sB,KAAK6sB,MAAMlB,IAC3BmB,EAAAA,GAAAA,IAAaF,GAEb,MAAM5nC,EAAiBv/B,GACvBA,EAASu6C,KAAK6sB,MAAMhB,IACbp+D,QAAUu3B,EAAev3B,SAChCs/D,EAAAA,GAAAA,GAAatnE,GAAQunE,EAAAA,EAAAA,IAAUC,GAAAA,KAE/BxnE,GAASgmE,EAAAA,EAAAA,KACPhmE,EACA,CACEuiE,gBAAgB,EAChB7uD,WAAOpK,EACPm+D,qBAAsB,KAG1B18D,EAAAA,EAAAA,IAAU/K,IAEVumE,EAAAA,EAAAA,MAEAW,EAAgBhlE,QAAQ,EAAGI,GAAI+B,EAAOs+B,iBAAkBx/B,EAAQukE,KAAK,CAAErjE,QAAOs+B,iBAC9Ex/B,EAAQwkE,aAMV57D,EAAAA,EAAAA,IAAiB,0BAA4B/L,IAC3C,MAAMynE,GAAwBznE,EAAOsiE,UAAUmF,sBAAwB,GAAK,EAE5E,OAAOzB,EAAAA,EAAAA,KAAuBhmE,EAAQ,CACpCynE,uBACAG,aAAeH,GARU,EASrBhlE,KAAKC,MAR6B,UAQe4G,OAIzDyC,EAAAA,EAAAA,IAAiB,6BAA+B/L,IACvCgmE,EAAAA,EAAAA,KAAuBhmE,EAAQ,CACpCynE,qBAAsB,EACtBG,kBAAct+D,MAIlByC,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAE8B,GAAU9B,EAElB,OAAOo0D,EAAAA,EAAAA,KAAuBhmE,EAAQ,CAAE0T,aAG1C3H,EAAAA,EAAAA,IAAiB,qBAAuB/L,IAC/BgmE,EAAAA,EAAAA,KAAuBhmE,EAAQ,CAAE0T,WAAOpK,MAGjDyC,EAAAA,EAAAA,IAAiB,mBAAoB,KACnC45D,IAAiB,KCxHnB55D,EAAAA,EAAAA,IAAiB,4BAA6B,CAAC/L,EAAQmD,EAASyO,KAC9D,MAAM,WAAEiyD,EAAU,OAAElsB,EAAM,MAAEtzC,GAAQC,EAAAA,EAAAA,OAAsBsN,GACpD,mBACJi2D,EAAkB,eAAE7e,EAAc,WAAE8e,EAAU,MAAEC,GAC9ClE,GAAc,CAAC,EAEnB,IAAKgE,GAAuB7e,GAAmB8e,GAAeC,KAI9D5kE,EAAQysD,uBAAuB,CAAEvrD,UAElB,SAAXszC,GA2BJ,OAtBIkwB,IACF7nE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B43C,aAAciwB,GACbxjE,IAGD2kD,GACF7lD,EAAQ6kE,iBAAiB,CACvB5mE,OAAQ4nD,EAAe5nD,OACvB6F,UAAW+hD,EAAe/hD,UAC1B4hD,aAAcG,EAAenpC,OAC7Bxb,UAIAyjE,GACF3kE,EAAQ8kE,aAAa,IAChBH,EACHzjE,UAIGrE,KAGT+L,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,MACJvN,GAAQC,EAAAA,EAAAA,OACNsN,GAAW,CAAC,EAEhB,OAAIyS,EAAAA,EAAAA,KAA0BrkB,IAC5BmD,EAAQiuC,uBAAuB,CAAE/sC,UAC1BrE,IAGF+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BkoE,2BAA2B,GAC1B7jE,KAGLqvD,GAA0B,2BAA4B,8BAEtD3nD,EAAAA,EAAAA,IAAiB,8BAA+B,CAAC/L,EAAQmD,EAASyO,KAChE,MAAM,MACJvN,GAAQC,EAAAA,EAAAA,OACNsN,GAAW,CAAC,EAEhB,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BmoE,wBAAyB,CACvB/rB,QAAQ,IAET/3C,KAGLqvD,GAA0B,+BAAgC,4BAE1D3nD,EAAAA,EAAAA,IAAiB,wCAAyC,CAAC/L,EAAQmD,EAASyO,KAC1E,MAAM,OACJxQ,EAAM,UACN6F,EAAS,MACT5C,GAAQC,EAAAA,EAAAA,OACNsN,GAAW,CAAC,EAEV5Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAClD,IAAKjG,EAAS,OAEd,MAAMonE,GAAcC,EAAAA,GAAAA,IAAqCrnE,GACzD,OAAKonE,GAEEE,EAAAA,EAAAA,KAA0BtoE,EAAQooE,EAAa/jE,QAFtD,KAKF0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,mBACJi2D,EAAkB,eAClB7e,EAAc,WACd8e,EAAU,MACVC,EAAK,oBACLQ,EAAmB,MACnBlkE,GAAQC,EAAAA,EAAAA,OACNsN,GAAW,CAAC,EAEV42D,EAAcxoE,EAAOi2C,OAAOD,QAElC,MAAKuyB,GAAuBC,GAAeT,GAASA,EAAMU,eAAiBD,EAAY3oD,QAmBvF,OALA7f,GAAS0oE,EAAAA,EAAAA,KAAiB1oE,EAAQqE,GAGlClB,EAAQ6jB,kBAEDjZ,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2jE,kBAAmB,CACjBkE,qBACA7e,iBACA8e,aACAC,UAED1jE,GAzBDlB,EAAQqM,iBAAiB,CACvBxO,QAAS8yB,EAAAA,GAA0B,wBACnCniB,WAAYmiB,EAAAA,GAA0B,6BACtCzpB,OAAQ,CACNA,OAAQ,wBACRuH,QAAS,CAAEm2D,QAAOQ,qBAAqB,EAAMlkE,UAE/C2b,KAAM,OACN3b,YAoBNqvD,GAA0B,yBAA0B,sBAEpD3nD,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAE5CgmC,GAAe+D,EAAAA,EAAAA,KAAmB37C,EAAQqE,GAChD,IAAIszC,EAASC,GAAcD,OAK3B,OAJKA,GAAqB,YAAXA,IACbA,EAAS,cAGJ5pC,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B43C,aAAc,CACZD,WAEDtzC,MAGL0H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAC/L,EAAQmD,EAASyO,KAC9D,MAAM,YAAEw2D,EAAW,MAAE/jE,GAAQC,EAAAA,EAAAA,OAAsBsN,EACnD,OAAO02D,EAAAA,EAAAA,KAA0BtoE,EAAQooE,EAAa/jE,MAGxD0H,EAAAA,EAAAA,IAAiB,+BAAgC,CAAC/L,EAAQmD,EAASyO,KACjE,MAAM,OACJxQ,EAAM,UACN6F,EAAS,MACT5C,GAAQC,EAAAA,EAAAA,OACNsN,GAAW,CAAC,EAEV5Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAClD,IAAKjG,EAAS,OAEd,MAAMonE,GAAcO,EAAAA,GAAAA,IAA4B3nE,GAChD,OAAKonE,GAEEE,EAAAA,EAAAA,KAA0BtoE,EAAQooE,EAAa/jE,QAFtD,IAKFqvD,GAA0B,6BAA8B,0BAExD3nD,EAAAA,EAAAA,IAAiB,6BAA8B,CAAC/L,EAAQmD,EAASyO,KAC/D,MAAM,aAAEg3D,EAAY,MAAEvkE,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEpD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6oE,uBAAwB,CACtBD,iBAEDvkE,KAGLqvD,GAA0B,8BAA+B,0BAEzDA,GAA0B,iBAAkB,cAE5C3nD,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAClD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bm9C,eAAgB,CAAEf,QAAQ,IACzB/3C,MAGL0H,EAAAA,EAAAA,IAAiB,+BAAgC,CAAC/L,EAAQmD,EAASyO,KACjE,MAAM,OACJxQ,EAAM,UAAE6F,EAAS,MAAE5C,GAAQC,EAAAA,EAAAA,OACzBsN,EAEE5Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAClD,IAAKjG,IAAYA,EAAQ2E,QAAQ0E,OAAQ,OAEzC,MAAMA,EAASrJ,EAAQ2E,QAAQ0E,OAC/B,GAAoB,aAAhBA,EAAOjI,MAAuC,mBAAhBiI,EAAOjI,KAA2B,OAEpE,MAAM0mE,EAA2B,aAAhBz+D,EAAOjI,KAAsBiI,OAASf,EACjDy/D,EAA6B,mBAAhB1+D,EAAOjI,KAA4BiI,OAASf,EAEzD0/D,EAAiB3+D,EAAOrI,SAAWhB,EAAQqC,WAAarC,EAAQI,OAASpB,EAAOiC,eAEhFs/C,EAAmCl3C,EAAO4+D,QAC5C,CAAE7mE,KAAM,OAAQhB,SAAQ6nE,QAAS5+D,EAAO4+D,SACxC,CAAE7mE,KAAM,OAAQ6E,aAEdiiE,EAAS7+D,EAAO6+D,SAAWloE,EAAQqC,WAAarD,EAAOiC,cAAiBjB,EAAQI,QAEhFy2C,EAAyB,CAC7B7iC,KAAMhU,EAAQgU,KACd6iC,KAAMxtC,EAAOwtC,KACb72C,QAAS8nE,GAAU9nE,QACnBmoE,eAAgBL,GAAUK,eAC1BC,aAAcN,GAAUM,aACxBhkB,WAAY/6C,EAAOg/D,QACnBH,SACAjiE,UAAWjG,EAAQsB,GACnBgnE,YAAaR,GAAUQ,YACvBC,aAAcT,GAAUS,aACxBC,WAAYV,GAAUU,WACtBC,wBAAyBX,GAAUW,wBACnCloB,YACAmoB,YAAaX,GAAYW,YACzBT,QAAS5+D,EAAO4+D,QAChBhoB,cAAe8nB,GAAY9nB,eAG7B99C,EAAQk+C,kBAAkB,CAAEr/C,OAAQgnE,EAAgBnxB,OAAMxzC,aAG5D0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,KACJimC,EAAI,MAAExzC,GAAQC,EAAAA,EAAAA,OACZsN,EAEE5P,EAAS,WAAY4P,EAAUA,EAAQ5P,YAASsH,EAChD03C,EAAc,gBAAiBpvC,EAAUA,EAAQovC,iBAAc13C,EAErE,OAAOyE,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2pE,cAAe,CACb3nE,SACA61C,OACAmJ,gBAED38C,MAGL0H,EAAAA,EAAAA,IAAiB,mCAAoC,CAAC/L,EAAQmD,EAASyO,KACrE,MAAM,KACJimC,EAAI,OAAE71C,EAAM,MAAEqC,GAAQC,EAAAA,EAAAA,OACpBsN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B4pE,6BAA8B,CAC5B5nE,SACA61C,SAEDxzC,KAGLqvD,GAA0B,qBAAsB,iBAEhDA,GAA0B,oCAAqC,gCAE/DA,GAA0B,wBAAyB,qBAEnD3nD,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,KAAEimC,EAAI,MAAExzC,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAExD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BshD,kBAAmB,CACjBzJ,SAEDxzC,KAGLqvD,GAA0B,yBAA0B,sBAEpD3nD,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,YAAE61B,EAAW,MAAEpjC,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAE/D,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6pE,oBAAqB,CACnBpiC,gBAEDpjC,MAGL0H,EAAAA,EAAAA,IAAiB,2BAA4B,CAAC/L,EAAQmD,EAASyO,KAC7D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6pE,yBAAqBvgE,GACpBjF,MAGL0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAClCi9C,EAAoBxzC,GAAUwzC,kBACpC,GAAKA,EAEL,OAAOvzC,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BshD,kBAAmB,IACdA,EACH3M,cAAUrrC,IAEXjF,MAGL0H,EAAAA,EAAAA,IAAiB,wBAAyB,CAAC/L,EAAQmD,EAASyO,KAC1D,MAAM,KAAEimC,EAAI,MAAExzC,GAAQC,EAAAA,EAAAA,OAAsBsN,EAE5C,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B8pE,kBAAmB,CACjBjyB,SAEDxzC,KAGLqvD,GAA0B,yBAA0B,sBC7UpD3nD,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,OACJxQ,EAAM,MACNiD,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,OAAIxQ,GACK2M,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+pE,eAAgB,CACd3oE,SACA6F,eAAWqC,EACXioD,cAAUjoD,IAEXjF,IAGE0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+pE,oBAAgBzgE,GACfjF,MAGL0H,EAAAA,EAAAA,IAAiB,4BAA6B,CAAC/L,EAAQmD,EAASyO,KAC9D,MAAM,OACJxQ,EAAM,UACN6F,EAAS,SACTsqD,EAAQ,MACRltD,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+pE,eAAgB,CACd3oE,SACA6F,YACAsqD,aAEDltD,MAGL0H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,OACJ5P,EAAM,QACNyK,EAAO,SACP8kD,EAAQ,cACRyY,EAAa,MACb3lE,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+pE,eAAgB,CACdttD,YAAaza,EACbyK,UACAu9D,gBACAzY,aAEDltD,MAGL0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,SACJ2/C,EAAQ,OACRnwD,EAAM,MACNiD,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+pE,eAAgB,CACdxY,WACAnwD,SACA6oE,cAAc,IAEf5lE,MAGL0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+pE,eAAgB,IACXj8D,EAASi8D,eACZ9iE,eAAWqC,EACXioD,cAAUjoD,EACVmD,aAASnD,EACTmT,iBAAanT,EACb2gE,kBAAc3gE,IAEfjF,MAGL0H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,OAAExQ,EAAM,UAAE6F,GAAc2K,EACxB5Q,GAAUiE,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,GAClD,IAAKjG,EACH,OAGF,MAAM,UAAEM,GAAcN,EAEtB,IAAKM,EACH,OAGF,MAAM4oE,EAAiB5oE,EAAUC,QAAQqN,IAAKzM,IAC5C,GAAIA,EAASuB,YAAa,CACxB,IAAKvB,EAASwW,MAAO,OACrB,MAAO,IACFxW,EACHuB,iBAAa4F,EACb6gE,8BAA0B7gE,EAC1B8gE,YAAajoE,EAASgoE,yBAE1B,CACA,OAAOhoE,IACNL,OAAOsU,SAUV,OARAtO,OAAOC,OAAO/H,EAAOgI,SAClB9F,QAAQ,EAAGI,GAAI+B,MACdlB,EAAQof,oBAAoB,CAC1BjT,SAASpL,EAAAA,EAAAA,IAAclD,GACvBqD,aAIC1B,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ6F,EAAW,CAClD3F,UAAW,IACNA,EACHC,QAAS2oE,QCjHfn+D,EAAAA,EAAAA,IAAiB,kBAAmBuI,MAAOtU,EAAQmD,EAASyO,KAC1D,MAAM,OACJ5P,EAAM,QAAEyK,EAAO,aAAE49D,EAAY,cAAEC,EAAa,UAAE1mE,EAAS,UAAE2mE,EAAS,OAAE3U,EAAM,MAAEvxD,GAAQC,EAAAA,EAAAA,OAClFsN,EAEEsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EACH,OAGF,MAAMpM,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAClCynD,GAAcQ,EAAAA,EAAAA,KAAkBtsD,EAAQgC,GAE9C,GAAIyK,KAAaq/C,IAAgBA,EAAY9iD,KAAKyD,IAAW,CAC3D,MAAMgM,QAAevD,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEgF,OAAMnQ,IAAK,CAAC0C,KAEpE,IAAKgM,EACH,OAEFzY,GAASmL,EAAAA,EAAAA,MACTnL,GAASwsD,EAAAA,EAAAA,KAAkBxsD,EAAQgC,EAAQyW,EAAOgzC,QACpD,CAEA,MAAM+e,EAAY18D,EAAS28D,YAAYD,YAClCE,EAAAA,EAAAA,KAAyB1qE,EAAQgC,EAAQyK,EAAS69D,EAAeD,EAAczmE,EAAW2mE,GAE/FvqE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9ByqE,YAAa,IACR38D,EAAS28D,YACZzoE,SACAyK,QAASA,IAAWk+D,EAAAA,EAAAA,KAA6B3qE,EAAQgC,KAAW4oE,EAAAA,EAAAA,KAAuB5qE,EAAQgC,GACnGqoE,eACAzmE,YACA2mE,YACAD,gBACAO,eAAWvhE,EACXssD,SACA4U,cAEDnmE,IACH0G,EAAAA,EAAAA,IAAU/K,MAGZ+L,EAAAA,EAAAA,IAAiB,4BAA6BuI,MAAOtU,EAAQmD,EAASyO,KACpE,MAAM,SACJif,EAAQ,QAAEpkB,EAAO,OAAEmpD,EAAM,MAAEvxD,GAAQC,EAAAA,EAAAA,OACjCsN,EAEExO,QAAa0wC,EAAAA,EAAAA,IAAoB9zC,EAAQ6wB,GAE1CztB,GAILD,EAAQ2nE,gBAAgB,CACtB9oE,OAAQoB,EAAKd,GACbmK,UACA49D,cAAc,EACdC,eAAe,EACf1U,SACAvxD,aAIJ0H,EAAAA,EAAAA,IAAiB,mBAAoB,CAAC/L,EAAQmD,EAASyO,KACrD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,GAC5C,QACJw0B,EAAO,cAAE2kC,EAAa,sBAAEC,EAAqB,QAAEv+D,IAC7CvM,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOomE,YAElC,OAAKh+D,EAELzM,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9ByqE,YAAa,CACXrkC,UACA2kC,gBACAC,wBACAC,wBAAoB3hE,EACpBkhE,eAAWlhE,IAEZjF,GAVkBrE,KAevB+L,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,QACJw0B,EAAO,MACP/hC,GAAQC,EAAAA,EAAAA,OACNsN,EAEJ,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByqE,YAAa,KACRvqE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOomE,YACjCrkC,YAED/hC,MAGL0H,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,QAAEs5D,EAAO,WAAE72C,EAAU,MAAEhwB,GAAQC,EAAAA,EAAAA,OAAsBsN,EAErD0/C,EAAatxD,EAAOyrD,QAAQ0f,eAAe92C,EAAa,WAAa,UAC3E,OAAKi9B,GAAYzvD,QAIVkM,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByqE,YAAa,KACRvqE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOomE,YACjC,CAACp2C,EAAa,wBAA0B,iBAAkB62C,IAE3D7mE,GARMrE,KAWX+L,EAAAA,EAAAA,IAAiB,oBAAqB,CAAC/L,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,IAClC,OACJrC,EAAM,QAAEyK,EAAO,aAAE49D,EAAY,cAAEC,EAAa,UAAEE,GAC5C18D,EAAS28D,YAEb,GAAIH,IAAkBE,EAEpB,YADArnE,EAAQqmB,iBAAiB,CAAEnlB,UAI7B,IAAKrC,IAAWyK,EACd,OAGF,MAAMyN,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAEhC,KADoBsqD,EAAAA,EAAAA,KAAkBtsD,EAAQgC,KACzBkY,EACnB,OAGF,MAAQmc,QAAS80C,EAAc,iBAAEC,GAAqBZ,EAEhDa,GADeD,EAAiBppE,IAAW,IACVu5B,QAAQ9uB,GAC/C,IAAI6+D,EACAC,EAEJ,GAAIF,EAAoB,EACtBC,EAAqBD,EAAoB,EACzCE,EAAiBvpE,MACZ,CACL,MAAMwpE,EAAsBL,EAAe5vC,QAAQv5B,GAAU,EAC7D,GAAIqoE,GAAgBmB,EAAsB,EACxC,OAGFD,EAAiBJ,EAAeK,GAChCF,GAAsBF,IAAmBG,IAAiB1pE,QAAU,GAAK,CAC3E,CAEA,MAAM4pE,EAAkBL,IAAmBG,KAAkBD,GAC7D,OAAKG,GAIE19D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByqE,YAAa,IACR38D,EAAS28D,YACZzoE,OAAQupE,EACR9+D,QAASg/D,IAEVpnE,QAVH,KAaF0H,EAAAA,EAAAA,IAAiB,gBAAiB,CAAC/L,EAAQmD,EAASyO,KAClD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,IAClC,OACJrC,EAAM,QAAEyK,EAAO,aAAE49D,EAAY,cAAEC,EAAa,UAAEE,GAC5C18D,EAAS28D,YACb,GAAIH,IAAkBE,EAEpB,YADArnE,EAAQqmB,iBAAiB,CAAEnlB,UAI7B,IAAKrC,IAAWyK,EACd,OAGF,MAAMyN,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAEhC,KADoBsqD,EAAAA,EAAAA,KAAkBtsD,EAAQgC,KACzBkY,EACnB,OAGF,MAAQmc,QAAS80C,EAAc,iBAAEC,GAAqBZ,EAChDkB,EAAeN,EAAiBppE,IAAW,GAC3CqpE,EAAoBK,EAAanwC,QAAQ9uB,GAC/C,IAAIk/D,EACAC,EAEJ,GAAIP,EAAoBK,EAAa7pE,OAAS,EAC5C8pE,EAAiBN,EAAoB,EACrCO,EAAa5pE,MACR,CACL,MAAM6pE,EAAkBV,EAAe5vC,QAAQv5B,GAAU,EACzD,GAAIqoE,GAAgBwB,EAAkBV,EAAetpE,OAAS,EAE5D,YADAsB,EAAQqmB,iBAAiB,CAAEnlB,UAI7BunE,EAAaT,EAAeU,GAC5BF,EAAiB,CACnB,CAEA,MAAMG,EAAcV,IAAmBQ,KAAcD,GACrD,OAAKG,GAIE/9D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByqE,YAAa,IACR38D,EAAS28D,YACZzoE,OAAQ4pE,EACRn/D,QAASq/D,IAEVznE,QAVH,KAaF0H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,QAAEnF,EAAO,MAAEpI,GAAQC,EAAAA,EAAAA,OAAsBsN,EACzC9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByqE,YAAa,IACR38D,EAAS28D,YACZI,UAAW,CACTp+D,UACA6Z,WAAY,GACZoO,WAAW,KAGdrwB,MAGL0H,EAAAA,EAAAA,IAAiB,sBAAuB,CAAC/L,EAAQmD,EAASyO,KACxD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByqE,aAAa16D,EAAAA,EAAAA,IAAKjC,EAAS28D,YAAa,CAAC,eACxCpmE,MAGL0H,EAAAA,EAAAA,IAAiB,gBAAiBuI,MAAOtU,EAAQmD,EAASyO,KACxD,MAAM,OAAE5P,EAAM,QAAEyK,EAAO,MAAEpI,GAAQC,EAAAA,EAAAA,OAAsBsN,EAEjDsI,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EACH,OAGF,MAAM6d,QAAa7iB,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEgF,OAAMzN,YAChDsrB,KAILoV,EAAAA,EAAAA,IAAoBpV,GACpB50B,EAAQqM,iBAAiB,CACvBxO,QAAS8yB,EAAAA,GAA0B,cACnCzvB,cAIJ0H,EAAAA,EAAAA,IAAiB,cAAeuI,MAAOtU,EAAQmD,EAASyO,KACtD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAChC,QAAEnF,EAASzK,OAAQya,IAAgBC,EAAAA,EAAAA,KAAyB1c,EAAQqE,GAG1E,IAFqB+R,QAAQ3J,GAAWgQ,GAGtC,OAGF,QAA4BnT,UADM2Q,GAAuBja,EAAQyc,GAC1B,OAEvC,MAAM,IAAEgD,EAAG,QAAE1Z,EAAO,WAAEX,GAAewM,EAErC,IAAI5Q,EAEFA,EADEye,EACQ,wBACD1Z,EACC,4BACDX,EACC,6BAEA,4BAGZjC,EAAQqM,iBAAiB,CACvBxO,QAAS8yB,EAAAA,GAA0B9yB,GACnC2Q,WAAYmiB,EAAAA,GAA0B,yBACtCzpB,OAAQ,CAAC,CACPA,OAAQ,mBACRuH,aAAStI,GACR,CACDe,OAAQ,WACRuH,QAAS,CAAEtP,GAAIma,KAEjBpY,aAIJ0H,EAAAA,EAAAA,IAAiB,yBAA0B,CAAC/L,EAAQmD,EAASyO,KAC3D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByqE,YAAa,IACR38D,EAAS28D,YACZsB,oBAAoB,IAErB1nE,MAGL0H,EAAAA,EAAAA,IAAiB,0BAA2B,CAAC/L,EAAQmD,EAASyO,KAC5D,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAC5C9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByqE,YAAa,IACR38D,EAAS28D,YACZsB,oBAAoB,IAErB1nE,MAGL0H,EAAAA,EAAAA,IAAiB,qBAAsB,CAAC/L,EAAQmD,EAASyO,KACvD,MAAM,OAAEwqC,EAAM,MAAE/3C,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EACpD9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByqE,YAAa,IACR38D,EAAS28D,YACZuB,mBAAoB5vB,IAErB/3C,MAGL0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,UAAE8iB,EAAS,MAAErwB,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAEvD9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAExC,OAAKyJ,EAAS28D,YAAYI,WAEnB98D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByqE,YAAa,IACR38D,EAAS28D,YACZI,UAAW,IACN/8D,EAAS28D,YAAYI,UACxB79C,WAAO1jB,EACPorB,YACApO,WAAY,MAGfjiB,GAZyCrE,KAe9C+L,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,OACJ8O,EAAM,cAAEurD,EAAa,kBAAEC,EAAiB,MAAE7nE,GAAQC,EAAAA,EAAAA,OAChDsN,EAEE9D,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,IAClC,UAAEwmE,GAAc/8D,EAAS28D,YAC/B,IAAKI,GAAWp+D,QAAS,OAEzB,MAAM0/D,EAAetB,GAAW79C,OAAOpe,IAAKw9D,GACtCA,EAAKpqE,SAAW0e,EACX,IACF0rD,EACHH,cAAeA,QAAiB3iE,EAChC4iE,kBAAmBA,QAAqB5iE,GAIrC8iE,GAGT,OAAOr+D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5ByqE,YAAa,IACR38D,EAAS28D,YACZI,UAAW,IACNA,EACH79C,MAAOm/C,KAGV9nE,MAGL0H,EAAAA,EAAAA,IAAiB,kBAAmB,CAAC/L,EAAQmD,EAASyO,KACpD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bo9C,gBAAY9zC,GACXjF,MAGL0H,EAAAA,EAAAA,IAAiB,uBAAwB,CAAC/L,EAAQmD,EAASyO,KACzD,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5By9C,qBAAiBn0C,GAChBjF,MCxaL0H,EAAAA,EAAAA,IAAiB,oCAAqC,CAAC/L,EAAQmD,EAASyO,KACtE,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,MAAiB,OAAElD,GAAWwQ,GAAW,CAAC,EAE1D,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqsE,8BAA+B,CAC7BjrE,WAEDiD,MAGL0H,EAAAA,EAAAA,IAAiB,qCAAsC,CAAC/L,EAAQmD,EAASyO,KACvE,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqsE,mCAA+B/iE,GAC9BjF,MAGL0H,EAAAA,EAAAA,IAAiB,qCAAsC,CAAC/L,EAAQmD,EAASyO,KACvE,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO25C,EAAAA,EAAAA,KAA8BvrD,EAAQ,CAAE20C,cAAUrrC,GAAajF,MAGxE0H,EAAAA,EAAAA,IAAiB,8BAA+B,CAAC/L,EAAQmD,EAASyO,KAChE,MAAM,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBsN,GAAW,CAAC,EAElD,OAAO7D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bi+C,4BAAwB30C,GACvBjF,K,QCQL,MACMioE,GAA8B,IAAIriE,IAAmB,CACzD,aAAc,UAAW,uBAAwB,WAAY,oBAAqB,eAAgB,gBAClG,UAGF8B,EAAAA,EAAAA,IAAiB,YAAa,CAAC/L,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAMo1B,GAAY1wB,EAAAA,EAAAA,KAAWvH,EAAQ6C,EAAOP,KACpC8G,QAASmjE,EAAW,wBAAEC,GAA4Bv0C,GAAa,CAAC,EAEpEp1B,EAAOO,KAAKopE,yBAA2BA,GACtC3pE,EAAOO,KAAKopE,wBAA0BA,IACzC3pE,EAAS,IACJA,EACHO,MAAM2M,EAAAA,EAAAA,IAAKlN,EAAOO,KAAM,CAAC,6BAI7BpD,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOP,GAAIO,EAAOO,MAE1C60B,GAAWw0C,mBAAqB5pE,EAAOO,KAAKqpE,mBAC9CzsE,GAAS6uD,EAAAA,EAAAA,KAAwB7uD,EAAQ6C,EAAOP,GAAIO,EAAOO,KAAKqpE,mBAAoB,KAGtF1hE,EAAAA,EAAAA,IAAU/K,GAEV,MAAM0sE,GAAcnlE,EAAAA,EAAAA,KAAWvH,EAAQ6C,EAAOP,IA2B9C,GA1BKO,EAAO8pE,oBAAsBr/D,EAAAA,EAAAA,KAAmBtN,EAAQ6C,EAAOP,KAC9DoqE,GAAar/D,aAEjBlK,EAAQoK,eAGN1K,EAAOO,KAAKd,KACdsqE,EAAAA,EAAAA,IAA0B,CACxBxrE,OAAQyB,EAAOO,KAAKd,GACpB8N,uBAAwBvN,EAAOO,KAAKgN,yBAIxCtI,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAQjD,OAAQsM,IAAkBd,EAAAA,EAAAA,KAAyB5M,EAAQqE,IAAU,CAAC,EACxEwoE,EAAahqE,EAEf6K,IAAkBm/D,EAAWvqE,IAC5B,YAAauqE,EAAWzpE,MAAQmpE,IAAgBM,EAAWzpE,KAAKgG,UAC/DmjE,GACFppE,EAAQitD,gBAAgB,CAAE/rD,UAE5BlB,EAAQuf,SAAS,CAAEpgB,GAAIoL,EAAerJ,aAItC4zB,EAAW,CACb,MAAM40C,EAAahqE,EAAOO,KACH0E,OAAO4G,KAAKm+D,GAChC/qE,OAAQ2N,GAAQwoB,EAAUxoB,KAASo9D,EAAWp9D,IAC/B+B,KAAM/B,GAAQ68D,GAA4B5hE,IAAI+E,KAC9DtM,EAAQ2pE,mBAAmB,CAAE9qE,OAAQa,EAAOP,IAEhD,CAEA,MACF,CAEA,IAAK,iBAAkB,CACrB,MAAMw9B,GAAWitC,EAAAA,EAAAA,KAAmB/sE,EAAQ6C,EAAOP,IAC7Cc,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQ6C,EAAOP,IAWvC,GATAtC,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOP,GAAI,CAAE+K,aAAa,KACtDtC,EAAAA,EAAAA,IAAU/K,GAENoD,GACFD,EAAQoH,kBAAkB,CAAEnJ,OAAQgC,EAAKd,KAG3Ca,EAAQiO,aAAa,CAAEhQ,OAAQyB,EAAOP,GAAIwG,OAAO,KAE5Cg3B,EACH,OAOF,OAJA9/B,GAASmL,EAAAA,EAAAA,MACTnL,GAASgtE,EAAAA,EAAAA,KAAehtE,EAAQ8/B,EAAU,CAACj9B,EAAOP,UAClDyI,EAAAA,EAAAA,IAAU/K,EAGZ,CAEA,IAAK,kBAAmB,CACtBA,GAASitE,EAAAA,EAAAA,KAAUjtE,EAAQ6C,EAAOP,IAClC,MAAMc,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQ6C,EAAOP,IACvC,GAAIc,IAAQ2e,EAAAA,EAAAA,IAAc3e,GAAO,CAC/B,MAAM2O,GAAenI,EAAAA,EAAAA,KAAmB5J,EAAQ6C,EAAOP,IACvD,GAAIyP,EAAc,CAChB,MAAMm7D,EAAkBplE,OAAO4G,KAAKqD,GAAcnD,IAAIhE,QAAQ9I,OAAO8D,EAAAA,IACrE5F,GAASqL,EAAAA,EAAAA,KAAmBrL,EAAQoD,EAAKd,GAAI4qE,EAC/C,CACF,CAEA,OAAOltE,CACT,CAEA,IAAK,kBACH,OAAO8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOP,GAAIO,EAAOO,MAG9C,IAAK,yBAA0B,CAC7B,MAAM,GAAEd,EAAE,SAAEsF,EAAWD,EAAAA,GAAc,aAAEwlE,GAAiBtqE,EAaxD,OAZA7C,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQsC,EAAIsF,EAAU,eAAgBulE,IAClEpiE,EAAAA,EAAAA,IAAU/K,QAEVkL,WAAW,KACTlL,GAASmL,EAAAA,EAAAA,MACT,MAAMiiE,GAAsBC,EAAAA,EAAAA,KAAkBrtE,EAAQsC,EAAIsF,EAAU,gBAChEulE,GAAgBC,GAAuBD,EAAa3wC,YAAc4wC,EAAoB5wC,YACxFx8B,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQsC,EAAIsF,EAAU,oBAAgB0B,IAClEyB,EAAAA,EAAAA,IAAU/K,KAvHc,IA4H9B,CAEA,IAAK,aAAc,CACjB,MAAM,QAAEgB,GAAY6B,EAEpB,GAAI7B,EAAQuR,WAAavS,EAAOiC,gBAAkBjB,EAAQssE,gBACxD,OAGF,MAAMhhE,GAAU1G,EAAAA,EAAAA,IAAiB5E,EAAQsB,IAEnCc,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQ6C,EAAOzB,QACvC,IAAKgC,EACH,OAGF,MAAMmqE,EAAan3D,QAAQvT,EAAO7B,QAAQsB,IAAMO,EAAO7B,QAAQwsE,kBAE/D,IAAKlhE,GAAWlJ,EAAKd,KAAO2P,EAAAA,IAA+B,CACzDjS,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOzB,OAAQ,CACzCqG,YAAarE,EAAKqE,YAAcrE,EAAKqE,YAAc,EAAI,IAGrD8lE,IACFvtE,GAAS4b,EAAAA,EAAAA,KAAkB5b,EAAQ6C,EAAOzB,OAAQgC,EAAM,CAACP,EAAO7B,QAAQsB,KAAM,IAGhF,MAAM6G,EAAQ/F,EAAKgG,SAAUC,EAAAA,EAAAA,KAAuBrJ,EAAQgB,QAAyBsI,EACjFH,IACFnJ,GAASuJ,EAAAA,EAAAA,KAAYvJ,EAAQ6C,EAAOzB,OAAQ+H,EAAM7G,GAAI,CACpDmF,YAAa0B,EAAM1B,YAAc0B,EAAM1B,YAAc,EAAI,IAG/D,CASA,OAPAsD,EAAAA,EAAAA,IAAU/K,QAEVmF,EAAAA,EAAAA,IAAmB,CACjB/B,OACApC,WAIJ,CAEA,IAAK,0BACL,IAAK,wBAAyB,CAC5B,MAAM,IAAE+I,EAAG,cAAExE,GAAkB1C,EAmB/B,OAjBAkH,EAAI7H,QAASI,IACX,MAAMlB,EAAU,cAAeyB,EAASA,EAAO4P,WAAYjH,EAAAA,EAAAA,KAAsBxL,EAAQsC,GACnFc,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAE5BmE,EAAcjE,WAAa8B,GAAMwB,wBAC/BD,EAAAA,EAAAA,IAA0B3E,EAAQuF,EAAcjE,aACpDtB,EAAS4C,EAAsB5C,EAAQoB,EAAQ,CAC7CwD,qBAAsBjE,KAAKE,IAAIuC,EAAKwB,qBAAuB,EAAG,SAAM0E,EACpE9E,gBAAiBpB,EAAKoB,iBAAiB1C,OAAQuD,GAAMA,IAAM/C,OAI1DiD,EAAcioE,kBAAoBpqE,GAAMylB,sBAC3C7oB,GAASyoB,EAAAA,EAAAA,KAAqBzoB,EAAQoB,EAAQgC,EAAM,CAACd,IAAK,MAIvDtC,CACT,CAEA,IAAK,qBACH,OAAOqnB,EAAAA,EAAAA,KAAmBrnB,EAAQ6C,EAAOP,GAAIO,EAAOyX,UAGtD,IAAK,sBAAuB,CAC1B,MAAM,IAAEvQ,EAAG,SAAE0jE,GAAa5qE,EACpBi9B,EAAW2tC,IAAaC,EAAAA,IAAqB,WAAa,SAChE,OAAK3jE,EAKE,IACF/J,EACH+I,MAAO,IACF/I,EAAO+I,MACV4kE,iBAAkB,IACb3tE,EAAO+I,MAAM4kE,iBAChB,CAAC7tC,GAAW/1B,EAAIlI,OAASkI,OAAMT,MAVnCnG,EAAQyqE,kBAAkB,CAAE9tC,aACrB9/B,EAaX,CAEA,IAAK,6BAA8B,CACjC,MAAM,IAAE+J,GAAQlH,EAEhB,MAAO,IACF7C,EACH+I,MAAO,IACF/I,EAAO+I,MACV4kE,iBAAkB,IACb3tE,EAAO+I,MAAM4kE,iBAChBp6C,MAAOxpB,EAAIlI,OAASkI,OAAMT,IAIlC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAEhH,EAAE,SAAE+N,GAAaxN,EACnBi9B,GAAWitC,EAAAA,EAAAA,KAAmB/sE,EAAQsC,GAC5C,IAAKw9B,EACH,OAGF,MAAQ,CAACA,GAAW6tC,GAAqB3tE,EAAO+I,MAAM4kE,iBAEtD,IAAIE,EAAsBF,GAAoB,GAC9C,GAAKt9D,GAEE,IAAKw9D,EAAoBppE,SAASnC,GAAK,CAK5C,GAAiB,WAAbw9B,GAAyB+tC,EAAoBhsE,QAAUisE,EAAAA,IAAyB,CAClF,MAAMC,EAAU/tE,EAAO+I,MAAMglE,QAAQ5kB,OACrC0kB,EAAsBA,EAAoB/rE,OAAQksE,GAAaD,GAAWA,EAAQtpE,SAASupE,GAC7F,CAEAH,EAAsB,CAACvrE,KAAOurE,EAChC,OAZEA,EAAsBA,EAAoB/rE,OAAQksE,GAAaA,IAAa1rE,GAc9E,MAAO,IACFtC,EACH+I,MAAO,IACF/I,EAAO+I,MACV4kE,iBAAkB,IACb3tE,EAAO+I,MAAM4kE,iBAChB,CAAC7tC,GAAW+tC,EAAoBhsE,OAASgsE,OAAsBvkE,IAIvE,CAEA,IAAK,0BAA2B,CAC9B,MAAM,GAAEhH,EAAE,SAAE+N,GAAaxN,GAEjB0wB,MAAOo6C,GAAqB3tE,EAAO+I,MAAM4kE,iBAEjD,IAAIE,EAAsBF,GAAoB,GAO9C,OANKt9D,EAEOw9D,EAAoBppE,SAASnC,KACvCurE,EAAsB,CAACvrE,KAAOurE,IAF9BA,EAAsBA,EAAoB/rE,OAAQksE,GAAaA,IAAa1rE,GAKvE,IACFtC,EACH+I,MAAO,IACF/I,EAAO+I,MACV4kE,iBAAkB,IACb3tE,EAAO+I,MAAM4kE,iBAChBp6C,MAAOs6C,EAAoBhsE,OAASgsE,OAAsBvkE,IAIlE,CAEA,IAAK,qBAAsB,CACzB,MAAM,GAAEhH,EAAE,SAAEmrE,GAAa5qE,EAEzB,OAAOorE,EAAAA,EAAAA,KAAmBjuE,EAAQsC,EAAImrE,EACxC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAEnrE,EAAE,OAAEugB,GAAWhgB,GACfmG,KAAMklE,EAAe,WAAE5c,GAAetxD,EAAO4iB,YAE/CxQ,OAAuB9I,IAAXuZ,EAElB/a,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAMyJ,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GACjByD,OAAOC,OAAOmmE,GAAiBpgE,EAASqgE,iBAAmB,IAAI7rE,KAAOA,IAG3FtC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAAEmuE,iBAAkB,GAAK9pE,MAI7D,MAAM+pE,EAAsBh8D,GAAmDrC,EAAAA,EAAAA,IAAKm+D,EAAiB,CAAC5rE,IAA9D,IAAK4rE,EAAiB,CAAC5rE,GAAKugB,GAC9DwrD,EAAiBj8D,EAEnBk/C,GAAYxvD,OAAQwsE,GAAcA,IAAchsE,GADhDgvD,GAAY7sD,SAASnC,GAAMgvD,EAAa,IAAKA,GAAc,GAAKhvD,GAGpE,MAAO,IACFtC,EACH4iB,YAAa,IACR5iB,EAAO4iB,YACV5Z,KAAMolE,EACN9c,WAAY+c,EACZ1wC,SAAS5tB,EAAAA,EAAAA,IAAK/P,EAAO4iB,YAAY+a,QAAS,CAACr7B,KAGjD,CAEA,IAAK,yBAA0B,CAC7B,MAAM,WAAEgvD,GAAezuD,EAEvB,MAAO,IACF7C,EACH4iB,YAAa,IACR5iB,EAAO4iB,YACV0uC,cAGN,CAEA,IAAK,+BAAgC,CACnC,MAAM,QAAE3uC,GAAY9f,EAEpB,MAAO,IACF7C,EACH4iB,YAAa,IACR5iB,EAAO4iB,YACV2rD,YAAa5rD,GAGnB,CAEA,IAAK,oBAAqB,CACxB,MAAM6rD,GAAqBnuD,EAAAA,EAAAA,KAAmBrgB,EAAQ6C,EAAOP,KACvD,gBAAEmsE,EAAe,YAAEC,EAAW,gBAAEC,GAAoB9rE,EAC1D,IAAK2rE,EACH,OAGF,IAAII,GAAe,EACfC,EAAUL,GAAoBK,QAC9B,IAAIL,EAAmBK,SACvB,GAEJ,GAAIJ,EACFI,EAAUJ,EACVG,GAAe,OACV,GAAIF,EAENG,EAAQhtE,QACLgtE,EAAQr9D,KAAMmF,GAAMA,EAAE+J,SAAWguD,EAAYhuD,UAEjDmuD,EAAQpjE,KAAKijE,GACbE,GAAe,QAEZ,GAAIC,EAAQhtE,QAAU8sE,EAAiB,CAC5C,MAAMG,EAAcD,EAAQn1D,UAAW/C,GAAMA,EAAE+J,SAAWiuD,GACtDG,GAAe,IACjBD,EAAQ13D,MAAM23D,EAAa,GAC3BF,GAAe,EAEnB,CAEA,GAAIA,EAAc,CAChB,MAAMG,EAAeF,EAAQ/sE,OAAO,EAAGktE,UAASC,aAAcD,GAAWC,GASzE,OANAjvE,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOP,GAAI,CAAE4sE,aAAcL,EAAQhtE,SAC/D7B,GAASqnB,EAAAA,EAAAA,KAAmBrnB,EAAQ6C,EAAOP,GAAI,CAC7CusE,UACAM,kBAAkBjgE,EAAAA,EAAAA,IAAqB6/D,EAAc,WAIzD,CAEA,MACF,CAEA,IAAK,eAAgB,CACnB,MAAM,OACJ3tE,EAAM,SAAEwG,EAAQ,MAAE4M,GAChB3R,EAEJ,IADa7C,EAAO+I,MAAMC,KAAK5H,GAE7B,OAKF,OAFApB,GAASwI,EAAAA,EAAAA,KAAmBxI,EAAQoB,EAAQwG,GAAYD,EAAAA,GAAgB,QAAS6M,GACjFxU,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAE6T,UAAWT,GAAOQ,MAE1D,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAE5T,EAAM,gBAAE29B,EAAe,mBAAED,GAAuBj8B,EAExD,IADa7C,EAAO+I,MAAMC,KAAK5H,GAE7B,OAUF,OAPApB,GAASqnB,EAAAA,EAAAA,KAAmBrnB,EAAQoB,EAAQ,CAC1C29B,kBACAD,wBAEF/zB,EAAAA,EAAAA,IAAU/K,QAEVmD,EAAQisE,qBAAqB,CAAEhuE,UAEjC,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAEA,EAAM,QAAE0J,EAAO,SAAEuF,GAAaxN,EAGtC,IADa7C,EAAO+I,MAAMC,KAAK5H,GAE7B,OAQF,OALApB,GAASuJ,EAAAA,EAAAA,KAAYvJ,EAAQoB,EAAQ0J,EAAS,CAC5CuF,kBAEFtF,EAAAA,EAAAA,IAAU/K,EAGZ,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAEoB,EAAM,MAAE87D,GAAUr6D,EAG1B,IADa7C,EAAO+I,MAAMC,KAAK5H,GACpB,OAKX,OAHApB,GAASqvE,EAAAA,EAAAA,KAAsBrvE,EAAQoB,EAAQ87D,QAC/CnyD,EAAAA,EAAAA,IAAU/K,EAGZ,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEoB,EAAM,QAAE0J,GAAYjI,EAEtBO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,GAAMgG,QAAS,OAIpB,YAFAjG,EAAQ0H,cAAc,CAAEzJ,SAAQ0J,WAGlC,CAEA,IAAK,eAAgB,CACnB,MAAM,OAAE1J,GAAWyB,EAEbO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,GAAMgG,QAAS,OAIpB,YAFAjG,EAAQ4+B,WAAW,CAAE3gC,SAAQ0H,OAAO,GAGtC,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAE1H,EAAM,UAAE4xC,GAAcnwC,EAExBO,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAChC,IAAKgC,GAAMgG,QAAS,OAEpBpJ,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCkuE,kBAAmBt8B,KAErBjoC,EAAAA,EAAAA,IAAU/K,GACV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAEgC,EAAM,MAAE6D,GAAUhD,EAE1B7C,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQgC,EAAQ,CAClCyiC,cAAe5+B,EAAMvD,MAEvByI,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQg8B,sBAAsB,CAAEn9B,SAAQo9B,uBAAuB,IAE/D,KACF,CAEA,IAAK,2BAA4B,CAC/B,MAAM,OAAEp9B,EAAM,QAAEutE,GAAY1sE,EAEtBqX,GAAOC,EAAAA,EAAAA,KAAWna,EAAQgC,GAChC,IAAKkY,EACH,OAGGq1D,GAAWr1D,EAAKuqB,gBAAkB8qC,EAMrCvvE,GAASsK,EAAAA,EAAAA,KAAgBtK,EAAQgC,EAAQutE,IALzCvvE,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQgC,EAAQ,CAClCyiC,mBAAen7B,IAEjBtJ,GAASwvE,EAAAA,EAAAA,KAAkBxvE,EAAQgC,OAAQsH,KAI7CyB,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQg8B,sBAAsB,CAAEn9B,SAAQo9B,uBAAuB,IAE/D,KACF,KC3iBJ,MAAMqwC,IAA4BC,E,QAAAA,IAIlC,WACE,IAAI1vE,GAASmL,EAAAA,EAAAA,MAEbnL,GAAS0tB,EAAAA,EAAAA,KAAoB1tB,EAAQ,IAChCA,EAAO8hC,MAAMgD,gBACb6qC,MAEL5kE,EAAAA,EAAAA,IAAU/K,GAEV2vE,GAAuB,CAAC,CAC1B,GAZA,IAAIA,GAAsD,CAAC,GAc3D5jE,EAAAA,EAAAA,IAAiB,YAAa,CAAC/L,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,gBACH,OAAO+sE,EAAAA,EAAAA,KAAc5vE,EAAQ6C,EAAOP,IAGtC,IAAK,aAAc,CACjBwF,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,OACvClD,EAAAA,EAAAA,KAAqBnB,EAAQ6C,EAAOP,KAAOO,EAAO8R,KAAKkf,aAAc7d,EAAAA,EAAAA,KAA2BhW,KAC9F6C,EAAO8R,KAAKkf,WAAa7zB,EAAOgI,QAAQ3D,GAAO63C,cACjD/4C,EAAQ4kB,iBAAiB,CAAE6sB,WAAW,EAAMvwC,UAI9CrE,EAAS,IACJA,EACH+T,aAAc,CACZ/B,SAAU,CAAC,OAMnB,MAAM69D,GAAYj7D,EAAAA,EAAAA,KAAW5U,EAAQ6C,EAAOP,IAW5C,OATAtC,GAAS6kC,EAAAA,EAAAA,KAAW7kC,EAAQ6C,EAAOP,GAAIO,EAAO8R,MAC1C9R,EAAOyX,WACTta,GAASuoB,EAAAA,EAAAA,KAAmBvoB,EAAQ6C,EAAOP,GAAIO,EAAOyX,WAGpDu1D,GAAWpD,mBAAqB5pE,EAAO8R,KAAK83D,mBAC9CzsE,GAAS6uD,EAAAA,EAAAA,KAAwB7uD,EAAQ6C,EAAOP,GAAIO,EAAO8R,KAAK83D,mBAAoB,IAG/EzsE,CACT,CAEA,IAAK,0BACHmD,EAAQ6kC,aAAa,CAAEtnB,OAAQ7d,EAAOP,KACtC,MAGF,IAAK,wBAGH,OAFAtC,GAAS6kC,EAAAA,EAAAA,KAAW7kC,EAAQ6C,EAAO6d,OAAQ,CAAE+mB,YAAa5kC,EAAO4kC,cACjEznC,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAO6d,OAAQ,CAAE+mB,YAAa5kC,EAAO4kC,cAInE,IAAK,mBAIH,OAFAkoC,GAAqB9sE,EAAO6d,QAAU7d,EAAO80C,YAC7C83B,KAIF,IAAK,qBAAsB,CACzB,MAAM,GAAEntE,EAAE,SAAEgY,GAAazX,EAEzB,OAAO0lB,EAAAA,EAAAA,KAAmBvoB,EAAQsC,EAAIgY,EACxC,CAEA,IAAK,sBAAuB,CAC1B,MAAM,MAAEwU,EAAK,OAAEoe,GAAWrqC,EAEpBitE,GAAqBv1D,EAAAA,EAAAA,KAAmBva,EAAQ8uB,GACtD,IAAKghD,GAAoBC,QACvB,OAGF,OAAOxnD,EAAAA,EAAAA,KAAmBvoB,EAAQ8uB,EAAO,CACvCihD,QAAS,IACJD,EAAmBC,QACtBC,WAAY9iC,IAGlB,CAEA,IAAK,oBAAqB,CACxB,MAAM,MAAEpe,EAAK,SAAEmhD,GAAaptE,EACtBitE,GAAqBv1D,EAAAA,EAAAA,KAAmBva,EAAQ8uB,GACtD,IAAKghD,GAAoBC,QACvB,OAGF,OAAOxnD,EAAAA,EAAAA,KAAmBvoB,EAAQ8uB,EAAO,CACvCihD,QAAS,IACJD,EAAmBC,QACtBE,aAGN,CAEA,IAAK,qBAAsB,CACzB,MAAM,GAAE3tE,EAAE,SAAE08B,GAAan8B,EAEnBitE,GAAqBv1D,EAAAA,EAAAA,KAAmBva,EAAQsC,GACtD,OAAKwtE,GAAoBC,QAKzB/vE,GAASuoB,EAAAA,EAAAA,KAAmBvoB,EAAQsC,EAAI,CACtC08B,kBALA77B,EAAQ6kC,aAAa,CAAEtnB,OAAQpe,GAQnC,MCtIJyJ,EAAAA,EAAAA,IAAiB,YAAa,CAAC/L,EAAQmD,EAASN,KAC9C,GACO,qBADCA,EAAO,SAEX,OAAO0tB,EAAAA,EAAAA,KAAiBvwB,EAAQ6C,EAAOP,GAAIO,EAAOqtB,eCuBxDnkB,EAAAA,EAAAA,IAAiB,YAAa,CAAC/L,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,iBAAkB,CACrB,MAAM,MACJi/B,EAAK,MAAE/4B,EAAK,YAAEmnE,EAAW,MAAEC,GACzBttE,EACAi/B,IAAO9hC,GAASowE,EAAAA,EAAAA,KAASpwE,EAAQ8hC,IACjC/4B,IAAO/I,GAASqwE,EAAAA,EAAAA,KAASrwE,EAAQ+I,IACjCmnE,IAAalwE,GAAS+Q,EAAAA,EAAAA,KAAkB/Q,EAAQkwE,IAChDC,GACFA,EAAMjuE,QAASgK,IACblM,GAASiN,EAAAA,EAAAA,KAAWjN,EAAQkM,EAAK5J,GAAI4J,MAGzCnB,EAAAA,EAAAA,IAAU/K,GACV,KACF,CAEA,IAAK,oBACH,OAAI6C,EAAOqtC,WACFogC,EAAAA,EAAAA,KAAetwE,EAAQ6C,EAAOP,IAC5BO,EAAO0tE,qBACTvwE,GAEAyuC,EAAAA,EAAAA,KAAkBzuC,EAAQ6C,EAAOP,IAG5C,IAAK,yBACHtC,EAAS,IACJA,EACHilC,YAAa,CACX9kB,QAAS,MAGbpV,EAAAA,EAAAA,IAAU/K,GACV,MAEF,IAAK,eACHmD,EAAQomD,aACR,MAEF,IAAK,yBAEHpmD,EAAQqtE,qBACR,MAGF,IAAK,yBACHrtE,EAAQstE,uBACR,MAEF,IAAK,uBACHttE,EAAQwsB,qBACR,MAEF,IAAK,wBACHxsB,EAAQutE,sBACR,MAEF,IAAK,4BACHvtE,EAAQwtE,0BACR,MAEF,IAAK,0BACHxtE,EAAQqlD,wBACR,MAEF,IAAK,4BAA6B,CAChC,MAAMooB,EAAW/tE,EAAOs6D,cAAgBn9D,EAAO8mB,aAAaoK,MAAMM,OAASxxB,EAAO8vB,SAASoB,MAAMM,OACjG,IAAKo/C,GAAUp/D,KAAMlP,GAAOA,IAAOO,EAAOP,IAAK,OAAOtC,EACtD,MAAM6wE,EAAW,CAAChuE,EAAOP,MAAOsuE,EAAS9uE,OAAQQ,GAAOA,IAAOO,EAAOP,KACtEa,EAAQ2tE,mBAAmB,CAAE5T,MAAO2T,EAAU1T,cAAet6D,EAAOs6D,gBACpE,KACF,CAEA,IAAK,oBACHh6D,EAAQ4tE,kBACR,MAEF,IAAK,yBAA0B,CAE7B,MAAM7T,EAAQr6D,EAAOq6D,MAAMp7D,OAAQkvE,GAAU56D,QAAQpW,EAAO8vB,SAAS4B,SAASs/C,KAE9E7tE,EAAQ2tE,mBAAmB,CAAE5T,QAAOC,cAAet6D,EAAOs6D,gBAC1D,KACF,CAEA,IAAK,kBACHh6D,EAAQ8tE,gBACR,MAEF,IAAK,gBACHjxE,EAAS,IACJA,EACHg/B,SAAU,IACLh/B,EAAOg/B,SACVivB,QAAS,IACJjuD,EAAOg/B,SAASivB,QACnB,CAACprD,EAAO4M,KAAM5M,EAAOquE,UAI3BnmE,EAAAA,EAAAA,IAAU/K,GACV,MAEF,IAAK,kCACH8H,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3CrE,GAASmxE,EAAAA,EAAAA,KAAqBnxE,EAAQ6C,EAAOimB,IAAKzkB,GAClDrE,GAASm3C,EAAAA,EAAAA,KAAen3C,EAAQo3C,EAAAA,GAAYg6B,eAAgB/sE,MAE9D0G,EAAAA,EAAAA,IAAU/K,GACV,MAEF,IAAK,0BACH8H,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAS4L,IACrChG,OAAO4I,QAAQ5C,EAAS+7B,QAAQD,eAAe1nC,QAAQ,EAAE6sB,EAAWob,MAC9DA,EAAOwF,UAAY9sC,EAAO8sC,UAC5BxsC,EAAQorC,oBAAoB,CAAElqC,MAAOyJ,EAASxL,KAC9Ca,EAAQkuE,YAAY,CAAE5hE,IAAKsf,EAAW1qB,MAAOyJ,EAASxL,UAI5D,MAEF,IAAK,cACHtC,GAASwsD,EAAAA,EAAAA,KAAkBxsD,EAAQ6C,EAAOb,OAAQ,CAAE,CAACa,EAAOipB,MAAMxpB,IAAKO,EAAOipB,QAC9E9rB,GAAS+rD,EAAAA,EAAAA,KAAuB/rD,EAAQ,CAAE,CAAC6C,EAAOb,SAASsqD,EAAAA,EAAAA,KAAkBtsD,EAAQ6C,EAAOb,WAC5F+I,EAAAA,EAAAA,IAAU/K,GACV,MAEF,IAAK,cACHA,GAAS+sD,EAAAA,EAAAA,KAAgB/sD,EAAQ6C,EAAOb,OAAQa,EAAO4J,UACvD1B,EAAAA,EAAAA,IAAU/K,GACV,MAEF,IAAK,oBACHA,GAAS8sD,EAAAA,EAAAA,KAA2B9sD,EAAQ6C,EAAOb,OAAQa,EAAOgqD,aAClE9hD,EAAAA,EAAAA,IAAU/K,GACV,MAEF,IAAK,0BAA2B,CAC9B,MAAM,OAAEgC,EAAM,QAAEyK,EAAO,SAAEtK,GAAaU,EAEtC,KADckpB,EAAAA,EAAAA,KAAgB/rB,EAAQgC,EAAQyK,GAClC,OAAOzM,EACnBA,GAASitD,EAAAA,EAAAA,KAAgBjtD,EAAQgC,EAAQyK,EAAS,CAAE2iD,aAAcjtD,KAClE4I,EAAAA,EAAAA,IAAU/K,GACV,KACF,CAEA,IAAK,oBACHA,GAASgsD,EAAAA,EAAAA,KAAkBhsD,EAAQ6C,EAAOopD,cAC1ClhD,EAAAA,EAAAA,IAAU/K,GACV,MAEF,IAAK,uBACHmD,EAAQ0vC,iBACR,MAEF,IAAK,yBACH1vC,EAAQmuE,wBAAwB,CAC9BzO,SAAUhgE,EAAOggE,WAEnB,MAGF,IAAK,4BACH7iE,EAAS,IACJA,EACHg/B,SAAU,IACLh/B,EAAOg/B,SACV2pB,oBAAqB9lD,EAAO0uE,WAGhCxmE,EAAAA,EAAAA,IAAU/K,GACV,MAGF,IAAK,yBACHwxE,EAAAA,EAAAA,IAA0B3uE,EAAOywC,UACjC,MAGF,IAAK,kBACHm+B,EAAAA,EAAAA,IAAwB5uE,EAAO+xB,QAAS/xB,EAAO6uE,QAAS7uE,EAAO8uE,cAC/D,MAGF,IAAK,aAAc,CACjB,MAAMtnE,EAASxH,EAAO7B,QAAQ2E,SAAS0E,OACvC,IAAKxH,EAAO7B,QAAQqC,YAAcR,EAAO7B,QAAQI,SAAW6Q,EAAAA,IAA+B,OAC3F,GAAqB,mBAAjB5H,GAAQjI,KAA2B,OACvC,MAAMwvE,EAAiBvnE,EAAOwtC,KAE9B/vC,OAAOC,OAAO/H,EAAOgI,SAAS9F,QAAQ,EAAGI,GAAI+B,MAC3C,MAAMyJ,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQqE,GAoBxC,GAnBIyJ,EAAS8yC,8BACXz9C,EAAQ0uE,qBAAqB,CAC3B55B,KAAM25B,EAAe35B,KACrB5zC,UAGFlB,EAAQqM,iBAAiB,CACvBE,MAAO,CAAED,IAAK,qBACdzO,QAAS,CAAEyO,IAAK,2BAChBpL,UAGFlB,EAAQw8C,gBAAgB,CAAEC,WAAW,EAAMv7C,UAE3CrE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B4gD,iCAA6Bt3C,GAC5BjF,IAGDyJ,EAASozC,6BAA8B,CACzC,MAAM9/C,EAASyB,EAAO7B,QAAQI,OACxB0wE,EAAW1wE,GAAS+Y,EAAAA,EAAAA,KAAWna,EAAQoB,QAAUkI,EACnDwoE,IACF3uE,EAAQ0J,aAAa,CACnBzL,OAAQ0wE,EAASxvE,GACjB2E,UAAWpE,EAAO7B,QAAQsB,GAC1B+B,UAGFlB,EAAQqM,iBAAiB,CACvBxO,QAAS,CACPyO,IAAK,6BACLiQ,UAAW,CACTm4B,KAAM,CACJpoC,IAAK,aACLiQ,UAAW,CACThQ,MAAOkiE,EAAeliE,MACtB4lC,OAAQs8B,EAAet8B,SAG3Bp7B,MAAMs6C,EAAAA,EAAAA,KAAaz0C,EAAAA,EAAAA,MAAoB+xD,KAG3CztE,WAIJlB,EAAQw8C,gBAAgB,CAAEC,WAAW,EAAMv7C,UAE3CrE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BkhD,kCAA8B53C,GAC7BjF,EACL,KAGF0G,EAAAA,EAAAA,IAAU/K,EACZ,MCjRJ+L,EAAAA,EAAAA,IAAiB,YAAa,CAAC/L,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,8BACH,OAAOkvE,EAAAA,EAAAA,KAAqB/xE,EAAQ6C,EAAOmvE,SAAUnvE,EAAOm8B,UAG9D,IAAK,2BAA4B,CAC/B,MAAM,OACJ59B,EAAM,SAAE49B,GACNn8B,EAEJ7C,GAASiyE,EAAAA,EAAAA,KAAmBjyE,EAAQoB,EAAQ49B,IAC5Cj0B,EAAAA,EAAAA,IAAU/K,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OACJoB,EAAM,QAAE0J,EAAO,SAAEk0B,GACfn8B,EAEJ7C,GAASuJ,EAAAA,EAAAA,KAAYvJ,EAAQoB,EAAQ0J,EAAS,CAAEonE,eAAgBlzC,KAEhEj0B,EAAAA,EAAAA,IAAU/K,GACV,KACF,MC9BJ+L,EAAAA,EAAAA,IAAiB,YAAa,CAAC/L,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,2BACH,MAAO,IACF7C,EACHmyE,cAAe,IACVnyE,EAAOmyE,cACVz9C,WAAW,EACXsgB,uBAAwBnyC,EAAOhB,SAKrC,IAAK,mBACH,MAAO,IACF7B,EACHmyE,cAAe,IACVnyE,EAAOmyE,cACVx9B,SAAU9xC,EAAOoB,gB,6BCP3B8H,EAAAA,EAAAA,IAAiB,YAAa,CAAC/L,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,kBAAmB,CACtB,GAAoC,cAAhCA,EAAOuvE,KAAKluD,gBACd,OAAIlkB,EAAOqyE,WAAWC,uBAChB,mBAAoBnvE,GAASA,EAAQovE,eAAe,CAAEC,cAAc,EAAMnuE,OAAOC,EAAAA,EAAAA,UAG9EmuE,EAAAA,GAAAA,IAAgBzyE,EAAQ6C,EAAOuvE,KAAK9vE,IAI/C,MAAMowE,GAAYC,EAAAA,GAAAA,IAAgB3yE,EAAQ6C,EAAOuvE,KAAK9vE,IAChDlB,EAASsxE,GAAWtxE,OAO1B,OANIA,IACFpB,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCwxE,eAAiBF,EAAUG,kBAAoB,GAAKz8D,QAAQs8D,EAAUI,cAAcjxE,YAIjFkxE,EAAAA,GAAAA,IACL/yE,EACA6C,EAAOuvE,KAAK9vE,IACZyN,EAAAA,EAAAA,IAAKlN,EAAOuvE,KAAM,CAAC,yBACnB9oE,EACAzG,EAAOuvE,KAAKS,kBAEhB,CACA,IAAK,wBAOH,OANatrE,EAAAA,EAAAA,KAAWvH,EAAQ6C,EAAOzB,UAErCpB,GAASqnB,EAAAA,EAAAA,KAAmBrnB,EAAQ6C,EAAOzB,OAAQ,CACjD4xE,YAAanwE,EAAOuvE,KAAK9vE,MAGtBtC,EAET,IAAK,8BAA+B,CAClC,MAAM,YAAEgzE,EAAW,aAAEF,EAAY,WAAExsD,GAAezjB,GAC5C,cAAEZ,GAAkBjC,EAG1BA,GAASmL,EAAAA,EAAAA,MACT2nE,EAAa5wE,QAAS+wE,IAChBA,EAAY3wE,KACdtC,GAASkzE,EAAAA,GAAAA,IACPlzE,EAAQgzE,EAAaC,EAAY3wE,GAAI2wE,EAAa78D,QAAQkQ,IAAerkB,IAAkBgxE,EAAY3wE,OAIzGgkB,IACFtmB,GAAS+yE,EAAAA,GAAAA,IAAgB/yE,EAAQgzE,EAAa,CAC5C1sD,gBAIJ,MAAMosD,GAAYC,EAAAA,GAAAA,IAAgB3yE,EAAQgzE,GACpC5xE,EAASsxE,GAAWtxE,OAM1B,OALIA,IACFpB,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCwxE,eAAiBF,EAAUG,kBAAoB,GAAKz8D,QAAQs8D,EAAUI,cAAcjxE,WAGjF7B,CACT,CACA,IAAK,kBAAmB,CACtB,IAAKmzE,EAAAA,GAAqB,OAE1B,MAAM,UACJC,EAAS,cACTnxE,GACEjC,GAEE,KAAEoyE,GAASvvE,EAEjB,GAAIuwE,EACF,MAAmB,cAAfhB,EAAKnhC,OACP9tC,EAAQkwE,mBAAmB,CAAEC,MAAO,QAChC,WAAYnwE,GAASA,EAAQowE,OAAO,CAAElvE,OAAOC,EAAAA,EAAAA,QAE1C,IACFtE,KACCoyE,EAAKoB,YAAc,CAAEC,gBAAiBrB,UAI9C,EAKF,GAFmBA,GAAM50C,UAAYv7B,GAEH,cAAfmwE,EAAKnhC,MAkBtB,OAjBA/rC,EAAAA,EAAAA,IAAU,KACRlF,GAASmL,EAAAA,EAAAA,MACT,MAAMwJ,GAAO++D,EAAAA,GAAAA,IAAoB1zE,GAC5B2U,IACLg/D,EAAAA,EAAAA,IAAgB,CACdvB,OACAz9D,YAIJi/D,EAAAA,GAAAA,OACKC,EAAAA,GAAAA,IAAmC7zE,EAAQmD,EAASivE,EAAK0B,SAASxvE,EAAAA,EAAAA,OACvEtE,EAAS,IACJA,EACHozE,UAAWhB,IAGNrkE,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+zE,oBAAoB,IACnBzvE,EAAAA,EAAAA,MAEP,K,iBCvHJyH,EAAAA,EAAAA,IAAiB,YAAa,CAAC/L,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,8BAA+B,CAClC,MAAM,aAAEs4C,EAAY,MAAE92C,GAAUxB,EAC1ByzC,EAAO6E,EAAa7E,MACpB,QAAEpjC,GAAYojC,GAEd,YAAE09B,EAAW,SAAE1zB,GAAaptC,EAC5B4iC,EAAeqF,EAAarF,aAClC,GAA2B,UAAvBA,GAAc1zC,KAChBe,EAAQysD,uBAAuB,CAAEvrD,UACjClB,EAAQqM,iBAAiB,CACvBxO,QAAS8yB,EAAAA,GAA0B,oBAAqBgiB,EAAaG,OACrEvmC,MAAOokB,EAAAA,GAA0B,iBACjC9T,KAAM,OACN3b,UAEFlB,EAAQw8C,gBAAgB,CAAEC,WAAW,EAAMv7C,eACtC,GAA2B,aAAvByxC,GAAc1zC,KAAqB,CAC5C,MAAM6xE,GAAiB/zE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO24C,UAEjDi3B,GAAkBn+B,GAAc31B,QAAQ,KAAO8zD,EAAeh3B,YAChE95C,EAAQqM,iBAAiB,CACvBxO,QAAS,CACPyO,IAAK,YAEPpL,UAEFlB,EAAQw8C,gBAAgB,CAAEC,WAAW,EAAMv7C,UAC3ClB,EAAQ64C,eAAe,CAAE33C,UAE7B,MACElB,EAAQqM,iBAAiB,CACvBnL,QACArD,QAAS8yB,EAAAA,GAA0B,kBAAmB,EACpDogD,EAAAA,GAAAA,GAAuBF,EAAa1zB,EAAUxsB,EAAAA,KAAgCmhB,MAC9EqB,EAAK5mC,WAKX3E,EAAAA,EAAAA,IAAU/K,GAEV,KACF,CAEA,IAAK,kCAAmC,CACtC,MAAM,aAAEm7C,EAAY,MAAE92C,GAAUxB,GAC1B,aAAEizC,EAAY,iBAAE8F,EAAgB,KAAEtF,GAAS6E,EACjD,GAA2B,2BAAvBrF,GAAc1zC,MAAqCw5C,EAAkB,CACvE,MAAM/7B,EAAS+7B,EAAiBu4B,oBAAqBt0D,OAErD1c,EAAQqM,iBAAiB,CACvBnL,QACAqL,MAAOokB,EAAAA,GAA0B,8BACjC9yB,QAAS8yB,EAAAA,GAA0B,iCAAkC,CACnEjU,EACA+7B,EAAiBlsC,YAChBpG,EAAWuW,GACdG,KAAM,QAEV,CAEA,GAAIs2B,GAAMpjC,QAAQkhE,mBAAoB,CACpC,MAAMv0D,EAASy2B,EAAKpjC,QAAQ8gE,YAC5B7wE,EAAQqM,iBAAiB,CACvBnL,QACAqL,MAAOokB,EAAAA,GAA0B,8BACjC9yB,QAAS8yB,EAAAA,GAA0B,iCAAkC,CACnEjU,EACAy2B,EAAK5mC,YACJpG,EAAWuW,GACdG,KAAM,QAEV,CAEA,GAA2B,aAAvB81B,GAAc1zC,KAAqB,CACrC,IAAK0zC,EAAa31B,QAChB,OAEF,MAAM8zD,GAAiB/zE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO24C,UAEjDi3B,GAAkBn+B,EAAa31B,QAAQ,KAAO8zD,EAAeh3B,YAC/D95C,EAAQqM,iBAAiB,CACvBxO,QAAS,CACPyO,IAAK,sBAEPpL,UAEFlB,EAAQw8C,gBAAgB,CAAEC,WAAW,EAAMv7C,UAC3ClB,EAAQ64C,eAAe,CAAE33C,UAE7B,CAEA,GAA2B,qBAAvByxC,GAAc1zC,KAA6B,CAC7C,MAAM6xE,GAAiB/zE,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO24C,UAEjDi3B,GAAkBn+B,EAAap1B,SAAWuzD,EAAeh3B,YAC3D95C,EAAQqM,iBAAiB,CACvBxO,QAAS,CACPyO,IAAK,sBAEPpL,UAEFlB,EAAQw8C,gBAAgB,CAAEC,WAAW,EAAMv7C,UAC3ClB,EAAQ64C,eAAe,CAAE33C,UAE7B,CAEA,GAA2B,cAAvByxC,GAAc1zC,KAAsB,CACtC,IAAK0zC,EAAap1B,OAChB,OAEF,MAAM2zD,GAAkBn0E,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO84C,eAElDk3B,GAAiBj4B,QAAUtG,EAAap1B,SAAW2zD,EAAgBt3B,YACrE/8C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bm9C,eAAgB,IACXk3B,EACHC,aAAa,IAEdjwE,GAEP,CAEA,GAA2B,aAAvByxC,GAAc1zC,KAAqB,CACrC,IAAK0zC,EAAa9zC,OAChB,OAGF,MAAMuyE,GAAqBr0E,EAAAA,EAAAA,KAAeF,EAAQqE,GAAO24C,UAErDu3B,GAAsBz+B,EAAa9zC,SAAWuyE,EAAmBt3B,YACnE95C,EAAQqM,iBAAiB,CACvBxO,QAAS,CACPyO,IAAK,sBAEPpL,UAEFlB,EAAQw8C,gBAAgB,CAAEC,WAAW,EAAMv7C,UAC3ClB,EAAQ64C,eAAe,CAAE33C,UAE7B,CAEA,GAA2B,mBAAvByxC,GAAc1zC,KAA2B,CAC3C,MAAMmyE,GAAqBr0E,EAAAA,EAAAA,KAAeF,EAAQqE,GAAOslE,cAErD4K,IACFpxE,EAAQqM,iBAAiB,CACvBxO,QAAS,CACPyO,IAAK,mBAEPpL,UAEEkwE,EAAmBvyE,QACrBmB,EAAQ0iD,qBAAqB,CAAE7jD,OAAQuyE,EAAmBvyE,SAE5DmB,EAAQ0iD,qBAAqB,CAAE7jD,OAAQ8zC,EAAa9zC,SACpDmB,EAAQw8C,gBAAgB,CAAEC,WAAW,EAAMv7C,UAC3ClB,EAAQ29C,mBAAmB,CAAEz8C,UAEjC,CAEA,KACF,CAEA,IAAK,qBAEH,IADcrE,EAAOi2C,MAEnB,OAGFj2C,GAASsiD,EAAAA,EAAAA,KAAmBtiD,EAAQ6C,EAAOmzC,UAE3CjrC,EAAAA,EAAAA,IAAU/K,GAEVmD,EAAQ6jB,oB,gKCrLd,MAAMwtD,GAAexuE,SAASyuE,cAAc,yBACtCC,GAAyBF,IAAcG,aAAa,YAAc,GAkCxE,SAASC,GAAa5X,GACpBA,EAAE6X,gBACJ,C,wFC/BA,MAOA,GAP6CC,IAC3C,MAAM,SAAEtY,GAAasY,EACfC,GAAmBC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,oBAAqB1Y,GAE7E,OAAOuY,GAAmBI,EAAAA,GAAAA,GAACJ,EAAgB,SAAMzrE,GCCnD,GAPsCwrE,IACpC,MAAM,YAAE9B,GAAgB8B,EAClBM,GAAYJ,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,aAAclC,GAE/D,OAAOoC,GAAYD,EAAAA,GAAAA,GAACC,EAAS,IAAKN,SAAYxrE,GCKhD,GAPsCwrE,IACpC,MAAM,SAAEtY,GAAasY,EACfO,GAAYL,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,aAAc1Y,GAE/D,OAAO6Y,GAAYF,EAAAA,GAAAA,GAACE,EAAS,SAAM/rE,GCCrC,GAP+CwrE,IAC7C,MAAM,OAAE14B,GAAW04B,EACbQ,GAAqBN,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,sBAAuB94B,GAEjF,OAAOk5B,GAAqBH,EAAAA,GAAAA,GAACG,EAAkB,IAAKR,SAAYxrE,GCGlE,GAPiDwrE,IAC/C,MAAM,kBAAEljD,GAAsBkjD,EACxBS,GAAuBP,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyB5jD,GAErF,OAAO2jD,GAAuBJ,EAAAA,GAAAA,GAACI,EAAoB,IAAKT,SAAYxrE,GCGtE,GAP+CwrE,IAC7C,MAAM,OAAE14B,GAAW04B,EACbW,GAAqBT,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,sBAAuBp5B,GAEjF,OAAOq5B,GAAqBN,EAAAA,GAAAA,GAACM,EAAkB,IAAKX,SAAYxrE,GCGlE,GAP4CwrE,IAC1C,MAAM,OAAE14B,GAAW04B,EACbY,GAAkBV,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,mBAAoBp5B,GAE3E,OAAOs5B,GAAkBP,EAAAA,GAAAA,GAACO,EAAe,IAAKZ,SAAYxrE,G,wCCE5D,MAqBA,IAAeqsE,EAAAA,GAAAA,IArBqBC,EAAGC,qBACrCC,EAAAA,GAAAA,MACA,MAAMC,GAA2BhU,EAAAA,GAAAA,MAE3B/N,GAAOgiB,EAAAA,GAAAA,KAQb,IANAC,EAAAA,GAAAA,IAAU,KACJJ,IACFK,EAAAA,GAAAA,GAAeH,IAEhB,CAACF,EAAeE,KAEfF,GAAkBE,EAItB,OACEZ,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,sBAAqBoiD,UAAEC,EAAAA,GAAAA,IAAqBpiB,EAAM+hB,O,mGCrBrE,MAMA,GAN0CjB,IACxC,MAAMuB,GAAgBrB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAErD,OAAOa,GAAgBlB,EAAAA,GAAAA,GAACkB,EAAa,IAAKvB,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,K,wFCYhE,MAsEA,GAtEoCC,EAClCrL,UACAsL,mBACAC,eACAC,aACAC,sBAEA,MAAOC,EAAYC,IAAiBC,EAAAA,GAAAA,KAAS,IACvC,uBAAE1lC,IAA2BnyB,EAAAA,EAAAA,OAEnCg3D,EAAAA,GAAAA,IAAU,KACH/K,GACH2L,GAAc,IAEf,CAAC3L,IAEJ,MAAMlX,GAAO+iB,EAAAA,GAAAA,KAEPC,GAAeC,EAAAA,GAAAA,GACnB,gBACA/L,GAAW,WACX0L,GAAc,gBAGVM,GAAmBC,EAAAA,GAAAA,IAAY,KAC/BR,EACFvlC,IAGFylC,GAAeD,IACd,CAACA,EAAYD,IAEVS,GAAcD,EAAAA,GAAAA,IAAY,KAC9BN,GAAc,IACb,IAEGQ,GAAYC,EAAAA,GAAAA,IAAQ,KACxBC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACz3D,KAAK,UAAU03D,QAASjB,EAAaN,SAAEniB,EAAK,iBACtDmhB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACz3D,KAAK,QAAQ03D,QAAShB,EAAWP,SAAEniB,EAAK,eAClDmhB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACz3D,KAAK,OAAO03D,QAASlB,EAAiBL,SAAEniB,EAAK,wBAExD,CAACA,EAAMyiB,EAAcC,EAAYF,IAEpC,OACEe,EAAAA,GAAAA,IAAA,OAAKxjD,UAAWijD,EAAcW,IAAK3jB,EAAK4jB,MAAQ,WAAQtuE,EAAU6sE,SAAA,EAChEoB,EAAAA,GAAAA,IAACM,GAAAA,EAAM,CACLx/D,OAAK,EACLy/D,MAAM,UACN/jD,UAAW6iD,EAAa,SAAW,GACnCc,QAASR,EACTa,UAAW/jB,EAAK4iB,EAAa,QAAU,mBACvCoB,UAAW,EAAE7B,SAAA,EAEbhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,qBACX+hC,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,cAEb+hC,EAAAA,GAAAA,GAAC+C,GAAAA,EAAI,CACH97B,OAAQw6B,EACRuB,UAAWnkB,EAAK4jB,MAAQ,OAAS,QACjCQ,UAAU,SACVC,WAAS,EACTC,QAASlB,EAAYjB,SAEpBkB,QCzET,GANuCvC,IACrC,MAAMyD,GAAavD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,cAElD,OAAO+C,GAAapD,EAAAA,GAAAA,GAACoD,EAAU,IAAKzD,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,K,oGCiD1D,MAuVA,IAAeX,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBx4E,IACC,MACE4iB,aACE5Z,KAAMklE,EACN5c,WAAYmnB,EACZ96C,QAAS+6C,GAEX3vE,OACEglE,SAAS,SACP4K,IAGJltB,SACE0f,gBACEwN,SAAUC,IAGd91C,gBACEC,OAAQ81C,GACT,cACD52E,EAAa,gBACbw+D,GACEzgE,GACE,4BAAE84E,EAA2B,iBAAE3K,IAAqBjuE,EAAAA,EAAAA,KAAeF,IACjEyqE,aAAeM,cAAegO,KAAyB74E,EAAAA,EAAAA,KAAeF,GACxE22E,GAAkBtyD,EAAAA,EAAAA,KAA0BrkB,GAElD,MAAO,CACLkuE,kBACAwK,oBACAD,mBACAtK,mBACAlsE,gBACA62E,8BACAE,iBAAkB5iE,QAAQuiE,GAAU92E,QACpCo3E,mBAAoB7iE,QAAQwiE,GAAiB/2E,QAC7Cq3E,YAAYxlD,EAAAA,GAAAA,GAAmB1zB,EAAQ,iBACvCm5E,kBAAkBzlD,EAAAA,GAAAA,GAAmB1zB,EAAQ,mBAC7Co5E,cAAc1lD,EAAAA,GAAAA,GAAmB1zB,EAAQ,kBACzCygE,kBACAsY,qBACAF,WACAlC,oBA3Cc6B,CApV2Ba,EAC7CC,kBACApL,kBACAuK,mBACAtK,mBACAlsE,gBACAs3E,mBACAT,8BACAI,aACAE,eACAI,uBACAd,oBACAS,mBACAH,mBACAC,qBACAxY,kBACAsY,qBACAF,WACAlC,sBAEA,MAAM,gBACJ8C,EAAe,oBACfC,EAAmB,SACnBh3D,EAAQ,yBACRi3D,EAAwB,0BACxBC,EAAyB,mBACzBC,EAAkB,sBAClB38C,EAAqB,qBACrB48C,EAAoB,mBACpBpT,IACEznD,EAAAA,EAAAA,MAEE86D,GAAgBC,EAAAA,GAAAA,MAEhBhmB,GAAOgiB,EAAAA,GAAAA,MAEbC,EAAAA,GAAAA,IAAU,KACRwD,KACC,IAEH,MAAM,IACJQ,EACAC,aAAcC,EACdC,aAAcC,IACZC,EAAAA,GAAAA,GAAkB,CACpBl+B,OAAQ28B,EACRhlD,WAAW,EACXwmD,kBAAkB,IAEdC,GAAuBC,EAAAA,GAAAA,GAAgBJ,GAEvCK,GAAcC,EAAAA,GAAAA,GAAgB,KAClC,MAAMC,EAAaX,EAAIhmD,SAASwgD,cAA2B,sCAC3DmG,GAAYC,SAAS,CACnBC,IAAK,EACLC,SAAU,aAIRC,GAAgC1D,EAAAA,GAAAA,IAAQ,KACrC,CACLh1E,GAAI24E,EAAAA,IACJvrE,MAAO,CAAE9B,KAAM6qE,IAAmB,KAAOwC,EAAAA,IAAgBjnB,EAAK,uBAAyBA,EAAK,mBAC5FlxC,gBAAiBo4D,GAAAA,EACjBC,gBAAiBD,GAAAA,IAElB,CAACzC,EAAkBzkB,IAEhBonB,GAAmB9D,EAAAA,GAAAA,IAAQ,IACxBmB,EACHA,EAAiB7pE,IAAKtM,GAClBA,IAAO24E,EAAAA,IACFD,EAGF9M,EAAgB5rE,IAAO,CAAC,GAC9BR,OAAOsU,cACR9M,EACH,CAAC4kE,EAAiB8M,EAAgBvC,IAE/B4C,EAAsBD,GAAkB1hE,UAAWmJ,GAAWA,EAAOvgB,KAAO24E,EAAAA,KAC5EK,EAAqBD,IAAwBlN,EAC7CoN,EApFmB,IAoFsBpN,EAEzCqN,GAAgCC,EAAAA,GAAAA,MAChCC,GAAqBf,EAAAA,GAAAA,GAAiBlN,IAC1C,MAAMkO,EAAgBH,EAA8B/N,GAC/CkO,GAAe95E,QAEpB85E,EAAcz5E,QAASd,IACrB04E,EAAqB,CAAEx3E,GAAIlB,QAIzBw6E,GAAqB9F,EAAAA,GAAAA,MACrB+F,GAAavE,EAAAA,GAAAA,IAAQ,KACzB,GAAK8D,GAAqBA,EAAiBv5E,OAI3C,OAAOu5E,EAAiBxsE,IAAI,CAACiU,EAAQxd,KACnC,MAAM,GAAE/C,EAAE,MAAEoN,GAAUmT,EAChBqtB,EAAY5tC,IAAO24E,EAAAA,KAAiB51E,EAAI6zE,EAAa,EAErD4C,EAA0C,GAyEhD,OA1EuBC,EAAAA,EAAAA,MAAqB5wE,EAAAA,EAAAA,MAAa7I,IAIvDw5E,EAAerwE,KAAK,CAClBiE,MAAOskD,EAAK,eACZh0C,KAAM,OACNg8D,QAASA,KACel0E,OAAOC,OAAOmmE,GAAiBxwD,OAAO,CAACC,EAAK0lB,IAAO1lB,GAAO0lB,EAAG44C,WAAa,EAAI,GAAI,IACnF7C,IAAiBv2D,EAAOo5D,WAC3C/+C,EAAsB,CACpBxkB,MAAO,mBAMPggE,EAAkBp2E,IAAKT,QAAUs3E,EACnCj8C,EAAsB,CACpBxkB,MAAO,oBAKXihE,EAAyB,CACvBlM,SAAUnrE,OAMdA,IAAO24E,EAAAA,KACTa,EAAerwE,KAAK,CAClBiE,MAAOskD,EAAK,qBACZh0C,KAAM,OACNg8D,QAASA,KACPtV,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBuV,aAI7CV,EAA8Bl5E,IAAKT,QACrCi6E,EAAerwE,KAAK,CAClBiE,MAAOskD,EAAK,yBACZh0C,KAAM,YACNg8D,QAASA,IAAMN,EAAmB74D,EAAOvgB,QAI7Cw5E,EAAerwE,KAAK,CAClBiE,MAAOskD,EAAK,cACZh0C,KAAM,OACNg8D,QAASA,KACPnC,EAAmB,CAAEpM,SAAUnrE,OAI/Bk5E,EAA8Bl5E,IAAKT,QACrCi6E,EAAerwE,KAAK,CAClBiE,MAAOskD,EAAK,yBACZh0C,KAAM,YACNg8D,QAASA,IAAMN,EAAmB74D,EAAOvgB,MAI7Cw5E,EAAerwE,KAAK,CAClBiE,MAAOskD,EAAK,oBACZh0C,KAAM,SACNm8D,aAAa,EACbH,QAASA,KACPpC,EAA0B,CAAEnM,SAAUnrE,QAKrC,CACLA,KACAoN,OAAO0sE,EAAAA,GAAAA,IAAuB,CAC5BxuE,KAAM8B,EAAM9B,KACZ0J,SAAU5H,EAAM4H,SAChB+kE,sBAAuBx5D,EAAOy5D,oBAEhCC,WAAYX,EAAmBt5E,IAAKk6E,WACpCC,cAAermE,QAAQwlE,EAAmBt5E,IAAKo6E,oBAC/CxsC,YACA4rC,eAAgBA,GAAgBj6E,OAASi6E,OAAiBxyE,MAG7D,CACD8xE,EAAkBlC,EAAY0C,EAAoB5nB,EAAMka,EAAiBkL,EAAcV,EACvFS,EAAkBqC,EAA+B9U,IAG7CiW,GAAkBhC,EAAAA,GAAAA,GAAiBlhE,IACvCigE,EAAoB,CAAEvL,iBAAkB10D,GAAS,CAAE2C,uBAAuB,IACtE+xD,IAAqB10D,GACvBihE,OAKJzE,EAAAA,GAAAA,IAAU,KACH4F,GAAYh6E,QAIbssE,GAAoB0N,EAAWh6E,QACjC63E,EAAoB,CAAEvL,iBAnND,KAqNtB,CAACA,EAAkB0N,EAAYnC,KAElCzD,EAAAA,GAAAA,IAAU,KACR,GAAKhd,EAAAA,IAAiB4iB,GAAYh6E,SAAU03E,EAI5C,OAAOqD,EAAAA,GAAAA,IAAc7C,EAAc9lD,QAAU,CAC3C4oD,wBAAyB,aACzBC,QAASA,CAAC9f,EAAGrlD,IACPA,IAAcolE,GAAAA,GAAeC,MAC/BtD,EACE,CAAEvL,iBAAkBxtE,KAAKC,IAAIutE,EAAmB,EAAG0N,EAAWh6E,OAAS,IACvE,CAAEua,uBAAuB,KAEpB,GACEzE,IAAcolE,GAAAA,GAAeE,QACtCvD,EAAoB,CAAEvL,iBAAkBxtE,KAAKE,IAAI,EAAGstE,EAAmB,IAAM,CAAE/xD,uBAAuB,KAC/F,MAMZ,CAAC+xD,EAAkB0N,EAAYtC,EAAkBG,IAEpD,MAAMwD,GAAwBlD,EAAAA,GAAAA,MAC9BkD,EAAsBjpD,SAAWsnD,GACjCtF,EAAAA,GAAAA,IAAU,IAAOiH,EAAsBjpD,SAAUkpD,EAAAA,GAAAA,GAAsB,KACjED,EAAsBjpD,SACxBylD,EAAoB,CAAEvL,iBAnPD,WAqPpB7kE,EAAY,CAAC6kE,EAAkBuL,KAEpC0D,EAAAA,GAAAA,GAAe,CACb5gB,UAAW+e,EACX8B,OAAQA,IAAM3D,EAAoB,CAAEvL,iBAzPb,GAyPqD,CAAE/xD,uBAAuB,OAGvG65D,EAAAA,GAAAA,IAAU,KACR,MAAMqH,EAAiBtgB,IACrB,GAAIA,EAAEugB,SAAWvgB,EAAEwgB,UAAYxgB,EAAE/nB,KAAKkF,WAAW,UAAY0hC,EAAY,CACvE,MAAO,CAAE4B,GAASzgB,EAAE/nB,KAAKthC,MAAM,cAAgB,GAC/C,IAAK8pE,EAAO,OAEZ,GAnQsB,MAmQlBA,EAEF,YADA/6D,EAAS,CAAEpgB,GAAIL,EAAeutD,sBAAsB,IAItD,MAAM3sC,EAASjY,OAAO6yE,GAAS,EAC/B,GAAI56D,EAASg5D,EAAWh6E,OAAS,EAAG,OAEpC63E,EAAoB,CAAEvL,iBAAkBtrD,GAAU,CAAEzG,uBAAuB,IAC3E4gD,EAAE6X,gBACJ,GAKF,OAFA7uE,SAAS03E,iBAAiB,UAAWJ,GAAe,GAE7C,KACLt3E,SAAS23E,oBAAoB,UAAWL,GAAe,KAExD,CAACr7E,EAAe45E,EAAYn5D,EAAUg3D,IAEzC,MACEO,IAAK2D,EACL1D,aAAc2D,IACZvD,EAAAA,GAAAA,GAAkB,CACpBl+B,QAASq8B,EACTqF,mBAAmB,EACnBvD,kBAAkB,IAwBdwD,EAAsBlC,GAAcA,EAAWh6E,OAAS,EAE9D,OACE01E,EAAAA,GAAAA,IAAA,OACE0C,IAAKA,EACLlmD,WAAWkjD,EAAAA,GAAAA,GACT,cACA8G,GAAuBvE,GAAwB,2BAC/CW,GAA2B,qBAC3BhE,SAAA,CAEDgE,IAA2BhF,EAAAA,GAAAA,GAAC6I,GAAAA,EAAW,CAAC9iB,UAAWsf,IACnDuD,GACC5I,EAAAA,GAAAA,GAAC8I,GAAAA,EAAO,CACNC,2BAA2B,cAC3BC,KAAMtC,EACNuC,UAAWjQ,EACXkQ,YAAa1B,IAEbkB,GACF1I,EAAAA,GAAAA,GAAA,OAAK8E,IAAK2D,EAAgB7pD,UAAU,0BAClCzqB,GACJ6rE,EAAAA,GAAAA,GAACmJ,GAAAA,GAAU,CACTrE,IAAKF,EACL3mC,KAAM0lC,EAA8B,OAAS9kB,EAAK4jB,MAAQ,oBAAsB,iBAChF2G,UAAWpQ,EACXqQ,YAAaT,EAAsBlC,EAAWh6E,YAASyH,EAAU6sE,SA/CvE,SAA0B3Z,GACxB,MAAMiiB,EAAe32E,OAAOC,OAAOmmE,GAChC1qE,KAAK,EAAGlB,QAASA,IAAOu5E,EAAY1N,GAAkB7rE,IACnDo8E,EAAWD,IAAiBnD,EAElC,OACEnG,EAAAA,GAAAA,GAACwJ,GAAAA,EAAQ,CACPC,WAAYF,EAAW,SAAW,MAClCjR,SAAUiR,EAAWD,EAAan8E,QAAKgH,EACvCkzD,SAAUA,EACV+c,iBAAkBA,EAClBD,gBAAiBA,EACjBuF,YAAU,EACVC,mBAAoB9F,GAAoBC,KAAwBxY,EAAgBpU,SAChFoU,gBAAiBA,EACjBoY,SAAUA,EACVlC,gBAAiBA,GAGvB,UCjWF,GANwC7B,IACtC,MAAMiK,GAAc/J,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAEnD,OAAOuJ,GAAc5J,EAAAA,GAAAA,GAAC4J,EAAW,IAAKjK,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,K,gBCRrD,IAAK0I,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,yCAAhBA,EAAAA,EAAgB,qBAAhBA,EAAAA,EAAgB,mBAAhBA,CAAgB,MAYb,SAASC,GACtBjrB,EACA9vC,EACAwb,EACAw/C,EACAxe,EACAye,GAEA,IAAIxnC,EAUA4Z,EAWA3jD,EAWJ,OA3BE+pC,EC5BW,WACb,MAAO8rB,EAAU2b,IAAetI,EAAAA,GAAAA,IAAS9sD,OAAOq1D,UAAUC,QAgB1D,OAdArJ,EAAAA,GAAAA,IAAU,KACR,SAASsJ,IACPH,EAAYp1D,OAAOq1D,UAAUC,OAC/B,CAKA,OAHAt1D,OAAO0zD,iBAAiB,SAAU6B,GAClCv1D,OAAO0zD,iBAAiB,UAAW6B,GAE5B,KACLv1D,OAAO2zD,oBAAoB,UAAW4B,GACtCv1D,OAAO2zD,oBAAoB,SAAU4B,KAEtC,IAEI9b,CACT,CDM0B+b,IACoB,8BAApBt7D,EAEbwb,EACAs/C,GAAiBS,QAEjBT,GAAiBU,OAJjBV,GAAiBW,kBAS1BpuB,EADE5Z,IAAWqnC,GAAiBU,QAAUP,EAC7B,OACFD,EACE,eACFxe,EACE,YAEA,UAIT/oB,IAAWqnC,GAAiBW,kBAC9B/xE,EAAOomD,EAAK,qBACHrc,IAAWqnC,GAAiBS,UACrC7xE,EAAOomD,EAAK,aAGG,iBAAbzC,IACF3jD,EAAOA,EAAMgyE,cAAcxlD,QAAQ,OAAQ,KAGtC,CACLylD,iBAAkBloC,EAClBmoC,yBAA0BvuB,EAC1BwuB,qBAAsBnyE,EAE1B,C,gHE1CA,MA0BA,IAAe+nE,EAAAA,GAAAA,IA1B+BqK,EAC5CH,mBACAE,uBACArI,cAEA,MAAM1jB,GAAO+iB,EAAAA,GAAAA,KAEb,OACEQ,EAAAA,GAAAA,IAAA,OAAKj1E,GAAG,0BAA0Bq1E,IAAK3jB,EAAK4jB,MAAQ,WAAQtuE,EAAWouE,QAASA,EAAQvB,SAAA,EACtFhB,EAAAA,GAAAA,GAAC8K,GAAAA,EAAO,CAACnI,MAAM,WACf3C,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,aAAYoiD,UACzBhB,EAAAA,GAAAA,GAACmJ,GAAAA,GAAU,CAACC,UAAWsB,EAAkBzsC,KAAK,YAAW+iC,SACtD4J,OAGL5K,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLu6C,KAAK,OACLklB,MAAM,oBAAmB3B,UAEzBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,iB,oICfnB,MAiGA,IAAeuiC,EAAAA,GAAAA,IA/FUuK,EACvB9vC,cACA+vC,aACAC,sBAEA,MAAM,iBAAE5wE,IAAqByP,EAAAA,EAAAA,MACvB+0C,GAAOgiB,EAAAA,GAAAA,KACPqK,GAAWC,EAAAA,GAAAA,GAAoBlwC,GAE/BmwC,GAAeC,EAAAA,EAAAA,MACfC,GAAWC,EAAAA,EAAAA,MAEXC,GAAqBrJ,EAAAA,GAAAA,IAAQ,IAC1BxvE,OAAOC,OAAOs4E,GAAU78E,KAAMo9E,GAAYA,EAAQlgE,SAAW0vB,EAAY9tC,IAC/E,CAAC+9E,EAAUjwC,EAAY9tC,KAEpBu+E,EAAkBN,GAAgBE,EAElCK,GAAmBnG,EAAAA,GAAAA,GAAgB,KACvCnrE,EAAiB,CACfE,MAAOskD,EAAK,6BACZhzD,QAASovC,EAAYvc,UAAYmgC,EAAK,wBAA0BA,EAAK,iCACrElsB,SAxBwB,QA4BtBi5C,GAAgBzJ,EAAAA,GAAAA,IAAQ,KAC5B,IAAKxvE,OAAOC,OAAOs4E,GAAUx+E,OAC3B,OAGF,GAAI0+E,IAAiBJ,EACnB,OAGF,IAAIa,EAAY,EAChB,KAAOX,EAASW,IACdA,GAAa,EAGf,OAAOC,EAAAA,GAAAA,IAAkBD,GAAW,IACnC,CAACX,EAAUE,EAAcJ,IAE5B,OACE5I,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,CACGruE,OAAO4I,QAAQ2vE,GAAY,CAAC,GAC1Bx7E,KAAK,EAAE,CAAE+7E,KAAcA,EAAQlgE,SAAW0vB,EAAY9tC,IAAM,EAAI,GAChEsM,IAAI,EAAE2wC,EAAMqhC,GAAUnnE,EAAOmE,KAC5B,MAAMsjE,EAAeN,EAAQO,SAAWR,GAAoBQ,OACtDC,EAAuB,CAC3B1xE,MAAO,CAACkxE,EAAQx7C,UAAWw7C,EAAQz7C,UAAUrjC,OAAOsU,SAAS0K,KAAK,KAClEugE,cAAc,EACdC,YAAaV,EAAQ9I,MACrByJ,cAAeL,EAAeN,EAAQW,mBAAgBj4E,EACtDuqB,UAAW+sD,EAAQ/sD,WAGf2tD,EAAeZ,EAAQlgE,SAAW0vB,EAAY9tC,KAAOy+E,GAAiBnjE,EAAI/b,OAAS,GAEzF,OACE01E,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEoB,EAAAA,GAAAA,IAACE,GAAAA,EAAQ,CACP1jD,UAAU,oBACV0tD,YACEtM,EAAAA,GAAAA,GAACuM,GAAAA,EAAM,CACL9uB,KAAK,OACL7+B,UAAU,iBACV7Z,KAAMknE,EACNO,WAAYf,EAAQgB,YAGxBlK,QAASkJ,EAAQlgE,SAAW0vB,EAAY9tC,GAAK89E,OAAkB92E,EAC/D4gB,KAAM02D,EAAQlgE,SAAW0vB,EAAY9tC,IAAK2+E,EAAAA,GAAAA,IAAkBr2E,OAAO20C,SAASj2C,EAAU6sE,SAAA,CAErFyK,EAAQO,SAAUhM,EAAAA,GAAAA,GAAA,QAAMphD,UAAU,yBAAwBoiD,SAAC,OAC5DhB,EAAAA,GAAAA,GAAC0M,GAAAA,EAAa,CAAC3nE,KAAMknE,EAAUU,iBAAe,EAACC,gBAAiBriF,EAAAA,OAEjE8hF,IAAgBrM,EAAAA,GAAAA,GAAC6M,GAAAA,EAAa,SAItCjB,IACC5L,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAK,MACLiiE,IAAI,WACJ/3D,KAAO22D,OAAkCv3E,EAAhBy3E,EACzBrJ,QAASmJ,EAAkBC,OAAmBx3E,EAAU6sE,SAEvDniB,EAAK,yBCkJhB,IAAe2hB,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBx4E,IACC,MAAM8N,GAAW5N,EAAAA,EAAAA,KAAeF,IAC1B,cACJiC,EAAa,gBAAEw+D,GACbzgE,GACE,eAAEkiF,IAAmB3uC,EAAAA,GAAAA,GAAqBvzC,GAC1CmiF,EAAaniF,EAAOiyC,WAAWC,KAErC,MAAO,CACLjwC,gBACAmuC,aAAax7B,EAAAA,EAAAA,KAAW5U,EAAQiC,GAChC8rC,OAAOq0C,EAAAA,EAAAA,KAAYpiF,GACnBkiF,iBACAG,WAAYjsE,QAAQtI,EAASu0E,YAC7B5hB,kBACA0hB,aACAG,oBAAoB1uD,EAAAA,GAAAA,GAAmB5zB,EAAQ,kBAjBjCw4E,CAxMM+J,EACxBtgF,gBACAw+D,kBACAyhB,iBACAn0C,QACAs0C,aACAF,aACA/xC,cACAkyC,qBACAE,mBACAC,mBACAC,mBACAC,kBACAC,sBAEA,MAAM,SACJlgE,EAAQ,uBACRmgE,EAAsB,0BACtBC,EAAyB,mBACzBC,EAAkB,QAClBh2C,EAAO,iBACPa,IACE3uB,EAAAA,EAAAA,MACE+jE,GAAUjM,EAAAA,GAAAA,KACV/iB,GAAOgiB,EAAAA,GAAAA,KAEPiN,EAAsBf,IAAmBgB,EAAAA,IAC1ChB,IAAmBiB,EAAAA,IAAsB,MAAQ,MAAS,MAEzDC,GAAqB3yB,EAAAA,KAAgBzmC,OAAO+e,SAASjf,WAAau5D,EAAAA,KAAuBC,EAAAA,KAEzFC,GAA2BzN,EAAAA,GAAAA,MAAoCpI,EAAAA,MAAqB8O,YAAc,EAElGtqC,GAAOolC,EAAAA,GAAAA,IAAQ,IAAMxvE,OAAOC,OAAOo6E,GAAYrgF,OAAQktB,GAAQA,EAAIujB,eAAgB,CAAC4vC,IAEpFqB,GAAoB7I,EAAAA,GAAAA,GAAgB,KACxCj4D,EAAS,CAAEpgB,GAAIL,EAAeutD,sBAAsB,MAGhDi0B,GAAuB9I,EAAAA,GAAAA,GAAiB3d,IAC5CA,EAAE0mB,kBAGFb,EAAuB,CAAE90C,MAFE,UAAVA,EAAoB,OAAS,UAG9C80C,EAAuB,CAAEc,sBAAsB,MAG3CC,GAA6BjJ,EAAAA,GAAAA,GAAiB3d,IAClDA,EAAE0mB,kBAEF,IAAIG,EAAW3B,EAAiB,EAC5B2B,EAAWV,EAAAA,MACbU,EAAWX,EAAAA,KAEb,MAAMY,EAAsBD,IAAaX,EAAAA,IACrCa,GAAAA,GACCF,IAAaV,EAAAA,IAAsBa,GAAAA,GAAgCC,GAAAA,GAExEpB,EAAuB,CAAEX,eAAgB2B,IACzCf,EAA0BgB,KAGtBI,GAAuBvJ,EAAAA,GAAAA,GAAgB,KAC3C3wD,OAAOC,KAAKk6D,EAAAA,IAAoB,SAAU,cAGtCC,GAAqBzJ,EAAAA,GAAAA,GAAgB,MACzC0J,EAAAA,GAAAA,IAA0B,OAGtBC,GAAqB3J,EAAAA,GAAAA,GAAgB,KACzCoI,EAAmB,CAAElyD,SAAUmyD,EAAQ,6BAGnCuB,GAAuB5J,EAAAA,GAAAA,GAAgB,KAC3C5tC,EAAQ,CAAEjkB,IAAK07D,EAAAA,QAGXC,GAAsB9J,EAAAA,GAAAA,GAAgB,KAC1C/sC,EAAiB,CAAEtrC,GAAIL,EAAeutD,sBAAsB,EAAMoB,WAAY,cAGhF,OACE2mB,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,CACGuO,GAAAA,IAA6Bt0C,IAC5BmnC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAC+K,GAAgB,CACf9vC,YAAaA,EACb+vC,WAAYmC,EACZlC,gBAAiBsC,KAEnBvN,EAAAA,GAAAA,GAAC6M,GAAAA,EAAa,QAGlB7M,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAK,iBACL03D,QAAS8L,EAAkBrN,SAE1B6M,EAAQ,mBAEVviB,EAAgBpU,WACfkrB,EAAAA,GAAAA,IAACE,GAAAA,EAAQ,CACPz3D,KAAK,UACL03D,QAAS8K,EAAiBrM,SAAA,EAE1BhB,EAAAA,GAAAA,GAAA,QAAMphD,UAAU,iBAAgBoiD,SAAE6M,EAAQ,mBACzCO,EAA2B,IAC1BpO,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,cAAaoiD,SAAEoN,QAIpCpO,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAK,OACL03D,QAAS+K,EAAiBtM,SAEzB6M,EAAQ,cAEV9wC,EAAKtjC,IAAKogB,IACTmmD,EAAAA,GAAAA,GAACwP,GAAAA,EAAa,CACZ31D,IAAKA,EACL+e,MAAOA,EACP62C,cAAY,EACZC,YAAU,EACVC,aAAcnC,EACdoC,aAAcnC,MAGlBzN,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAK,aACL03D,QAAS+M,EAAoBtO,SAE5B6M,EAAQ,yBAEX7N,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAK,WACL03D,QAASgL,EAAiBvM,SAEzB6M,EAAQ,eAEXzL,EAAAA,GAAAA,IAACE,GAAAA,EAAQ,CACPz3D,KAAK,WACL03D,QAAS+L,EAAqBtN,SAAA,EAE9BhB,EAAAA,GAAAA,GAAA,QAAMphD,UAAU,iBAAgBoiD,SAAE6M,EAAQ,0BAC1C7N,EAAAA,GAAAA,GAAC6P,GAAAA,EAAQ,CACP1iF,GAAG,WACH2iF,MAAOjC,EAAkB,SAAVj1C,EAAmB,mCAAqC,mCACvEm3C,QAAmB,SAAVn3C,EACTo3C,aAAW,QAGf5N,EAAAA,GAAAA,IAACE,GAAAA,EAAQ,CACPz3D,KAAK,aACL03D,QAASkM,EAA2BzN,SAAA,EAEpChB,EAAAA,GAAAA,GAAA,QAAMphD,UAAU,4BAA2BoiD,SAAE6M,EAAQ,yBAAyBpD,iBAC9EzK,EAAAA,GAAAA,GAACiQ,GAAAA,EAAM,CAAC15C,MAAOu3C,QAEjB9N,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAK,OACL03D,QAAS4M,EAAmBnO,SAE3B6M,EAAQ,uBAEX7N,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAK,MACL03D,QAAS6M,EAAqBpO,SAE7BniB,EAAK,mBAEPqxB,EAAAA,MACClQ,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAK,cACL03D,QAASwM,EAAqB/N,SAE7BniB,EAAK,uBAGTovB,IACCjO,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAK,IACLslE,YAAU,EACVp7D,KAAM,GAAGq7D,EAAAA,OACT7N,QAAS0M,EAAmBjO,SAE3BniB,EAAK,mBAGTquB,IACClN,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAK,UACL03D,SAAS8N,EAAAA,GAAAA,KAAmBrP,SAE3BniB,EAAK,0B,mDCtPhB,MAOA,GAP6C8gB,IAC3C,MAAM,OAAE14B,GAAW04B,EACb2Q,GAAmBzQ,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,oBAAqBp5B,GAE7E,OAAOqpC,GAAmBtQ,EAAAA,GAAAA,GAACsQ,EAAgB,IAAK3Q,SAAYxrE,GC+F9D,IAAeqsE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAAYx4E,IAC9B,MAAM,cAAEiC,GAAkBjC,EACpBowC,EAAcnuC,GAAgB2S,EAAAA,EAAAA,KAAW5U,EAAQiC,QAAiBqH,EAClEo8E,EAAsB1lF,EAAOyyB,0BAA0BC,SACvDikD,GAAkBtyD,EAAAA,EAAAA,KAA0BrkB,GAElD,MAAO,CACLynC,YAAa2I,GAAa3I,YAC1Bi+C,sBACA/O,oBATgB6B,CA7EiBmN,EAAGl+C,cAAai+C,sBAAqB/O,sBACxE,MAAM,eAAEiP,EAAc,gBAAEC,EAAe,uBAAEz0C,IAA2BnyB,EAAAA,EAAAA,MAE9D6mE,GAAY9L,EAAAA,GAAAA,OACX+L,EAAkBC,EAAsBC,IAA0BC,EAAAA,GAAAA,IAAQ,IAC1EC,EAAeC,EAAYC,IAAcH,EAAAA,GAAAA,IAAQ,IACjDI,EAAoBC,EAAkBC,IAAqBN,EAAAA,GAAAA,IAAQ,IACpE,SAAEO,IAAaC,EAAAA,EAAAA,MAEfC,EAAQl/C,GAAam/C,MAAgD,KAAvCn/C,EAAYm/C,OAAQz5E,EAAAA,EAAAA,YAA0B7D,GAClFu9E,EAAAA,GAAAA,GAAWhB,EAAiBc,IAE5BG,EAAAA,GAAAA,GAAsB,EAAEC,MAClBhB,GAAoBt+C,GAAeA,EAAY5gB,aAAekgE,GAAiBlgE,aACjFu/D,IACAH,MAED,CAACx+C,EAAas+C,EAAkBK,EAAYH,IAE/C,MAAMe,GAAuB7P,EAAAA,GAAAA,IAAapxE,IACxC,MAAMkhF,EAAoBvB,GAAqBliF,KAC5Cm0C,GAAW,kBAAmBA,GAAUA,EAAO9wB,aAAe9gB,EAAQzD,IAEzE0jF,IACAJ,EAAe,CACbn+C,YAAaw/C,GAAqB,CAAE7kF,KAAM,UAAWykB,WAAY9gB,EAAQzD,OAE1E,CAAC0jF,EAAsBJ,EAAgBF,KAE1CmB,EAAAA,GAAAA,GAAWR,EAAYF,EAhCE,UAgCmC78E,GAE5D,MAAM49E,GAAyB/P,EAAAA,GAAAA,IAAY,KACrCR,EACFvlC,IAGFm1C,KACC,CAACA,EAAkB5P,IAEtB,OACEY,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,6BAA4BoiD,SAAA,CACxC//D,QAAQ+vE,GAAiB1+C,KACxB0tC,EAAAA,GAAAA,GAACgS,GAAAA,EAAiB,CAChBhlF,SAAUslC,EACV2/C,UAAQ,EACRrzD,UAAU,yBAGdohD,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACL4hE,IAAK6L,EACLuB,QAASZ,EACT7zB,KAAK,UACLklB,MAAM,cACN/jD,UAAU,eACV2jD,QAASwP,EAAuB/Q,SAE/B1uC,GACC0tC,EAAAA,GAAAA,GAACmS,GAAAA,EAAW,CAEVzgE,WAAY4gB,EAAY5gB,WACxB+rC,KA/Dc,GAgEd20B,UAAWC,EAAAA,IACXC,aAAoC,gBAAtBhgD,GAAarlC,MAJtBqlC,EAAY5gB,aAMjBsuD,EAAAA,GAAAA,GAACuS,GAAAA,EAAQ,OAEfvS,EAAAA,GAAAA,GAACsQ,GAAgB,CACfkC,gBAAiB7B,EACjB1pC,OAAQkqC,EACRsB,oBAAqBZ,EACrB1O,QAASkO,UCpBXqB,GAA0B,CAAE7yE,UAAM1L,GAClCw+E,GAA0B,CAAExlF,QAAIgH,GA2PtC,IAAeqsE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBx4E,IACC,MAAM8N,GAAW5N,EAAAA,EAAAA,KAAeF,IAE9B2wB,MAAOo3D,EAAW,eAAEhtB,EAAc,OAAE35D,EAAM,QAAEq1B,GAC1C3oB,EAAS8nB,cACP,gBACJ1R,EAAe,UAAEwb,EAAS,qBAAE8C,GAC1BxiC,GACE,4BAAEgoF,IAAgCz0C,EAAAA,GAAAA,GAAqBvzC,GAE7D,MAAO,CACL+nF,cACArzD,YAAWqmC,GAAiB3kD,QAAQ2kD,EAAehyD,OAASgyD,EAAezqD,UAC3E23E,mBAAoB7mF,EACpB8mF,WAAYzxD,EACZsX,OAAOq0C,EAAAA,EAAAA,KAAYpiF,GACnBkkB,kBACAwb,YACA8C,uBACA2lD,kBAAmB/xE,SAAQxJ,EAAAA,EAAAA,KAAyB5M,IACpDgoF,8BACAjyE,sBAAsBC,EAAAA,EAAAA,KAA2BhW,GACjDooF,eAAgBhyE,QAAQpW,EAAO+I,MAAMglE,QAAQ5kB,QAC7C2c,YAAa1vD,QAAQpW,EAAOsiE,SAASwD,aACrCuiB,gBAAgBC,EAAAA,EAAAA,KAAqBtoF,KAzBvBw4E,CAzP8B+P,EAChDC,mBACA7iF,UACA8iF,iBACAC,kBACAX,cACArzD,YACA3e,uBACA4yE,uBACAV,qBACAC,aACAn6C,QACA7pB,kBACAwb,YACA8C,uBACA2lD,oBACAH,8BACAI,iBACAtiB,cACAuiB,iBACAO,gBACAlG,mBACAD,mBACAD,mBACAqG,cAEA,MAAM,oBACJC,EAAmB,uBACnBjG,EAAsB,sBACtBkG,EAAqB,WACrBC,EAAU,mBACVtiB,IACEznD,EAAAA,EAAAA,MAEE+jE,GAAUjM,EAAAA,GAAAA,KACV/iB,GAAOgiB,EAAAA,GAAAA,MACP,SAAEyQ,IAAaC,EAAAA,EAAAA,OAEduC,EAAeC,EAAiBC,IAAqBjD,EAAAA,GAAAA,KAEtDkD,EAAqBzjF,IAAY0jF,EAAAA,GAAkBC,SACnDC,EAAU5jF,IAAY0jF,EAAAA,GAAkB1K,SAExC6K,GAAqBlS,EAAAA,GAAAA,IAAQ,IAC1B4Q,GACHuB,EAAAA,GAAAA,GAAmB,IAAIhnF,KAAkB,IAAbylF,SAC5B5+E,EACH,CAAC4+E,KAEE,iBAAErI,EAAgB,qBAAEE,EAAoB,yBAAED,GAA6Bb,GAC3E+D,EACA9+D,EACAwb,GAAa8C,EACb2lD,EACAH,GACCI,GAGGsB,GAAyB/O,EAAAA,GAAAA,GAAiB3d,IAC9CA,EAAE6X,iBACF7X,EAAE0mB,kBACE5d,EACFkjB,IAEAtiB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBC,sBAIjD+iB,EAAAA,GAAAA,IAAWrS,EAAAA,GAAAA,IAAQ,IAAO+Q,EAAiB,CACzC,eAAgBqB,EAChB,cAAeA,EACf,eAAgBA,KACZE,EAAAA,IAAU,CAAE,QAASF,SACvBpgF,EAAY,CAAC++E,KAEjB,MAAMwB,GAA8DvS,EAAAA,GAAAA,IAAQ,IACnE,EAAGwS,YAAW1tC,aACnB+4B,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLgvE,OAAQkC,IAAY9C,EACpB7zB,KAAK,UACLklB,MAAM,cACN/jD,UAAWqoB,EAAS,SAAW,GAE/Bs7B,QAAS6R,EAAUO,EAAY,IAAMjB,IACrC9Q,UAAWwR,EAAUvG,EAAQ,qBAAuB,sBAAsB7M,UAE1EhB,EAAAA,GAAAA,GAAA,OAAKphD,WAAWkjD,EAAAA,GAAAA,GACd,sBACCsS,GAAW,aACZZ,GAAwB,oBAK7B,CAACY,EAAS9C,EAAUzD,EAAS6F,EAASF,IAEnCoB,GAAoBpP,EAAAA,GAAAA,GAAgB,KACnCoN,GACHa,EAAc,MAIZoB,GAAyBrP,EAAAA,GAAAA,GAAgB,KAC7CkI,EAAuB,CAAEmF,6BAA8BA,MAGnDiC,GAAmBtP,EAAAA,GAAAA,GAAgB,KACvCqO,MAGIkB,EAAmB9zE,QAAQ6xE,IAC5BtiF,IAAY0jF,EAAAA,GAAkBc,cAC9BxkF,IAAY0jF,EAAAA,GAAkBC,SAE7Bc,EAAkB3D,GAAY0B,GAAqB+B,EAAmBA,GAE5EjU,EAAAA,GAAAA,IAAU,IAAOmU,GAAkBjN,EAAAA,GAAAA,GAAsB,IAAM0L,UAAav/E,EAAY,CAAC8gF,EAAiBvB,IAE1G,MAAMwB,EAAyB1kF,IAAY0jF,EAAAA,GAAkBC,SACzDt1B,EAAK,iBACLA,EAAK,UAEHs2B,GAAgBjF,EAAAA,IAAU,wBAA2C5lD,EAAAA,IAAQ8qD,SAAehxB,UAE5FzxC,IAAe0iE,EAAAA,GAAAA,OAGf,uCACJC,GAAsC,gCACtCC,KACEC,EAAAA,GAAAA,GAAsCnC,GAEpCoC,IAAY5Q,EAAAA,GAAAA,OAClB6Q,EAAAA,GAAAA,GAAgBD,IAEhB,MAAME,KAAoBV,GACpBZ,GAAuBvB,GAAuBmB,GAE9C2B,IAAgBzT,EAAAA,GAAAA,IAAQ,KAE1BC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,CACGqT,IACCrU,EAAAA,GAAAA,GAAC6V,GAAAA,EAAQ,CACPhrE,KAAK,WACLtQ,MAAO85E,EACPyB,UAAQ,EACRvqB,YAAatqD,QAAQ6xE,GACrBl0D,UAAU,0BACV2jD,QAASoR,EACToC,uBAAqB,EACrBC,SAAUtD,KAGbI,IACC9S,EAAAA,GAAAA,GAAC6V,GAAAA,EAAQ,CACPj3D,UAAU,0BACV/xB,OAAQimF,EACRvQ,QAASqR,EACTkC,UAAQ,EACRvqB,aAAW,EACXyqB,SAAUrD,QAKjB,CAACG,EAAoBuB,IAExB,OACErU,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,iBAAgBoiD,UAC7BoB,EAAAA,GAAAA,IAAA,OAAKj1E,GAAG,iBAAiByxB,UAAU,cAAckmD,IAAK2Q,GAAUzU,SAAA,CAC7D6M,EAAQpL,QAASzC,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,wBACjCohD,EAAAA,GAAAA,GAACiW,GAAAA,EAAY,CACXC,QAASxB,EACTyB,OAAQ,GAAGC,EAAAA,OAAYjB,KACvBv2D,WAAWkjD,EAAAA,GAAAA,GACT,YACA+L,EAAQpL,OAAS,MACjB4Q,GAAoBxF,EAAQpL,OAAS,gBACrC6S,GAAuCx2D,SAAW+uD,EAAQpL,OAAS,sBAErE4T,UAAWvC,EACX9Q,UAAWqQ,GAAoBxF,EAAQpL,MAAQ,QAAU,OACzD6T,iBAAkBh7B,EAAAA,IAAei7B,EAAAA,KAAc5jE,GAAe,QAAKxe,EACnEqiF,gBAAiB3I,EAAQpL,MAAQ8S,QAAkCphF,EAAU6sE,UAE7EhB,EAAAA,GAAAA,GAACoN,GAAiB,CAChBC,iBAAkBA,EAClBC,iBAAkBA,EAClBC,iBAAkBA,EAClBC,gBAAiBuG,EACjBtG,gBAAiBuG,OAGrB5R,EAAAA,GAAAA,IAACqU,GAAAA,EAAW,CACVC,QAAQ,wBACRC,oBAAoB,+BACpB/3D,WAAWkjD,EAAAA,GAAAA,GACRgR,GAAsBC,EAAc,wBAAqB5+E,EAC1Dk/E,GAAoB,uBAEtB98C,MAAOg9C,OAAkBp/E,EAAam/E,GAAkBV,EACxDgE,QAAS3B,EACT11D,UAAWA,GAA0C,cAA7BorD,EACxBkM,aAA2C,cAA7BlM,EAA2C,cAAWx2E,EACpE2iF,uBAAqD,cAA7BnM,GAAsD,UAAV/xC,EAAoB,aAAUzkC,EAClG4iF,YAAa7B,EACb8B,aAAa,MACblB,SAAU70E,QAAQ6xE,GAAsBC,GACxCkE,SAAUxD,EACVC,QAASA,EACTwD,QAAStC,EACTuC,eAA6C,cAA7BxM,EAA2CkK,OAAyB1gF,EAAU6sE,SAAA,CAE7F4U,IACD5V,EAAAA,GAAAA,GAACoX,GAAAA,EAAY,CACXC,QAAS1B,QAGZ/0E,IAAwBo/D,EAAAA,GAAAA,GAACwQ,GAAY,IACrC7f,IACCqP,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLgvE,QAASZ,EACT7zB,KAAK,UACLklB,MAAM,cACNC,UAAW,GAAGiL,EAAQ,8DACtBtL,QAASuS,EACTl2D,WAAWkjD,EAAAA,GAAAA,IAAgBlhE,GAAwB,iBAAiBogE,UAEpEhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,YAGf+hC,EAAAA,GAAAA,GAACsX,GAAAA,EAAc,CACbrwC,OAAqC,YAA7B0jC,EACR4M,UAAQ,EACR34D,UAAU,2BAA0BoiD,UAEpChB,EAAAA,GAAAA,GAAC6K,GAAuB,CACtBH,iBAAkBA,EAClBE,qBAAsBA,EACtBrI,QAASsS,cCvRf2C,GAA0B7kF,OAAO4G,KAAK26E,EAAAA,IAAmBxnF,OAAS,EAGxE,IAAI+qF,GAEJ,MAmMA,IAAejX,EAAAA,GAAAA,IAnMgBkX,EAC7BlnF,UACAoiF,cACAG,aACAQ,kBACAD,iBACAE,uBACArP,kBACAjY,uBACAE,4BACAgY,mBACAqP,gBACAC,UACAiE,gBACAnW,sBAEA,MAAM,gBAAEvmB,EAAe,sBAAE28B,IAA0B9tE,EAAAA,EAAAA,OAC5C+tE,EAAsBC,IAA2BnW,EAAAA,GAAAA,IAAS7d,EAAAA,KAC1Di0B,EAA6BC,IAAkCrW,EAAAA,GAAAA,KAAS,IAE/Eb,EAAAA,GAAAA,IAAU,KACRjsD,OAAO0mC,UAAU08B,yBAAyBvoE,KAAKsoE,IAC9C,IAEH,MAAM,uBACJE,EAAsB,6BAAEC,EAA4B,+BACpDC,EAA8B,mBAAEC,IAC9BC,EAAAA,GAAAA,GAAoBlU,GAClBmU,EAAuBnU,GAAoB5zE,IAAY0jF,EAAAA,GAAkB1K,SACzEgP,EAAsBD,GAAwBF,GAGlDtT,aAAc0T,EACdC,qBAAsBC,IACpBC,EAAAA,GAAAA,GAA4B1sB,GAAwBE,GAElDysB,GAAgBhU,EAAAA,GAAAA,KAAO,GAEvBiU,GAAmBtT,EAAAA,GAAAA,GAAgB,KACnCh1E,IAAY0jF,EAAAA,GAAkB1K,WAGlCqP,EAAc/5D,SAAU,EACxBg5D,GAAwB,MAGpBiB,GAAmBvT,EAAAA,GAAAA,GAAgB,KACvCqT,EAAc/5D,SAAU,EAEpB24D,KACFjgE,aAAaigE,IACbA,QAAetjF,GAGjBsjF,GAAe5iE,OAAO9e,WAAW,KAC1B8iF,EAAc/5D,SACjBg5D,GAAwB,IA5DF,OAiEtBkB,GAAuBxT,EAAAA,GAAAA,GAAgB,KAC3CoS,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkBgF,aAGlDC,GAAuB3T,EAAAA,GAAAA,GAAgB,KAC3CoS,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkBC,aAGlDiF,GAAuB5T,EAAAA,GAAAA,GAAgB,KAC3CoS,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkBmF,WACtDp+B,MAGIq+B,GAAoB9T,EAAAA,GAAAA,GAAgB,KACpClqB,EAAAA,KAAgBy8B,EAClBljE,OAAOC,KAAK,GAAGykE,EAAAA,UAAsB,SAAU,YACtCntB,EACTv3C,OAAO0mC,UAAUi+B,gBAEjB3kE,OAAO+e,SAAS6lD,WAIdC,GAAyBlU,EAAAA,GAAAA,GAAgB,KAC7CoS,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkByF,oBAGlDC,GAAuBpU,EAAAA,GAAAA,GAAgB,KAC3CoS,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkB2F,mBAGxD/Y,EAAAA,GAAAA,IAAU,KACR,IAAIgZ,EASJ,OARItpF,IAAY0jF,EAAAA,GAAkB1K,SAChCsQ,EAAmBjlE,OAAO9e,WAAW,KACnC+hF,GAAwB,IApGF,MAsGfe,EAAc/5D,SAAWglC,EAAAA,KAClCg0B,GAAwB,GAGnB,KACDgC,IACFtiE,aAAasiE,GACbA,OAAmB3lF,KAGtB,CAAC3D,IAEJ,MAAMquD,GAAO+iB,EAAAA,GAAAA,KAEb,OACEQ,EAAAA,GAAAA,IAAA,OACEj1E,GAAG,kBACH4sF,aAAej2B,EAAAA,QAAkC3vD,EAAnB2kF,EAC9BkB,aAAel2B,EAAAA,QAAkC3vD,EAAnB4kF,EAA6B/X,SAAA,EAE3DhB,EAAAA,GAAAA,GAACoT,GAAc,CACbC,iBAAkBmF,EAClBhoF,QAASA,EACT8iF,eAAgBA,EAChBG,cAAeA,EACflG,iBAAkByL,EAClB1L,iBAAkB6L,EAClB9L,iBAAkB+L,EAClB1F,QAASA,EACTF,qBAAsBA,EACtBD,gBAAiBA,KAEnBvT,EAAAA,GAAAA,GAACmJ,GAAAA,GAAU,CACTlrC,KAAMu1C,EAAuB,OAAS,WACtCnK,YAAamO,GACbpO,UAAW54E,EACXypF,eAAa,EACbC,oBAAqBhG,EAAAA,GAAkB1K,SACvC2Q,YAAU,EACVC,iBAAkBlG,EAAAA,GAAkB1K,SAASxI,SAE3C3Z,IACA,OAAQ72D,GACN,KAAK0jF,EAAAA,GAAkB1K,SACrB,OACExJ,EAAAA,GAAAA,GAACkE,GAAW,CACVG,qBAAsBmU,EACtBrU,gBAAiBA,EACjBC,iBAAkBoU,IAGxB,KAAKtE,EAAAA,GAAkBc,aACrB,OACEhV,EAAAA,GAAAA,GAACoD,GAAU,CACTwP,YAAaA,EACbG,WAAYA,EACZ1rB,SAAUA,EACVqsB,QAASA,IAGf,KAAKQ,EAAAA,GAAkBC,SACrB,OAAOnU,EAAAA,GAAAA,GAAC4J,GAAW,CAACj9E,OAAQ2mF,EAAgBjsB,SAAUA,EAAUqsB,QAASA,IAC3E,QACE,WAIP+E,IACCzY,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL2X,OAAK,EACLC,OAAK,EACL17D,WAAWkjD,EAAAA,GAAAA,GAAe,aAAc6W,GACxCpW,QAAS+W,EAAkBtY,SAE1BniB,EAAK,yBAGTq5B,IACClY,EAAAA,GAAAA,GAACua,GAAAA,EAAU,CACTtzC,OAAQm9B,EACRltB,UAAWqhC,EACXZ,cAAeA,EACf6C,qBAAsBpC,EACtBqC,oBAAqBtC,KAGzBnY,EAAAA,GAAAA,GAACoB,GAAa,CACZrL,QAAS8hB,EACTxW,iBAAkB8X,EAClB7X,aAAcoY,EACdnY,WAAYqY,EACZpY,gBAAiBA,SChOzB,GANoC7B,IAClC,MAAM+a,GAAU7a,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,WAE/C,OAAOqa,GAAU1a,EAAAA,GAAAA,GAAC0a,EAAO,IAAK/a,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCGpD,GANqCxB,IACnC,MAAMuZ,GAAWrZ,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,YAEhD,OAAO6Y,GAAWlZ,EAAAA,GAAAA,GAACkZ,EAAQ,IAAKvZ,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCqB3B,IA2BtBwZ,GAAW,SAAXA,GAAW,OAAXA,EAAAA,EAAW,eAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,2BAAXA,CAAW,EAAXA,IAAW,IAWhB,MAAMC,GAAejoF,OAAO4G,KAAKohF,IAAajuF,OAAS,EAyevD,IAAe8zE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBx4E,IACC,MAAM8N,GAAW5N,EAAAA,EAAAA,KAAeF,IAE9B41B,cAAc,MACZjF,EAAK,QACL8F,GACD,4BACDqiD,EAA2B,iBAC3B3K,EAAgB,WAChB6hB,EAAU,kBACVC,EACAxlB,aAAa,sBACXO,IAEAl9D,GACE,cACJ7L,EACAqgE,UAAU,YACRwD,GACD,qBACDzE,EAAoB,0BACpBE,EAAyB,gBACzBd,GACEzgE,EAEE0qB,GAAc9F,EAAAA,EAAAA,KAAkB5kB,GAChCkwF,EAAa95E,QAAQsU,GAAapoB,IAClCi3E,GAAmB4W,EAAAA,EAAAA,KAAuBnwF,GAC1CmwD,EAAmBriD,EAASqiD,iBAC5BwmB,GAAkBtyD,EAAAA,EAAAA,KAA0BrkB,GAElD,MAAO,CACL+nF,YAAap3D,EACbu3D,WAAYzxD,EACZ25D,wBAA8C,IAArBjiB,EACzB2K,8BACA72E,gBACA6jE,cACAmqB,oBACAC,aACA7uB,uBACAE,4BACAgY,mBACAppB,mBACAu4B,gBAAiB56E,EAAS8nB,aAAaslC,UACvCuF,kBACA4vB,2BAA4BrlB,EAC5B2L,kBACAyX,WAAY4B,EAAW5B,WACvBkC,eAAgBN,EAAWM,iBAlDb9X,CAtepB,UAAoB,IAClByB,EAAG,WACHmU,EAAU,eACVkC,EAAc,YACdvI,EAAW,WACXG,EAAU,wBACVkI,EAAuB,4BACvBtX,EAA2B,cAC3B72E,EAAa,YACb6jE,EAAW,kBACXmqB,EAAiB,WACjBC,EAAU,qBACV7uB,EAAoB,0BACpBE,EAAyB,iBACzBgY,EAAgB,iBAChBppB,EAAgB,gBAChBu4B,EAAe,gBACfjoB,EAAe,2BACf4vB,EAA0B,gBAC1B1Z,IAEA,MAAM,qBACJ4Z,EAAoB,uBACpBC,EAAsB,sBACtBzH,EAAqB,kBACrB0H,EAAiB,oBACjB3H,EAAmB,iBACnB4H,EAAgB,gBAChBC,EAAe,SACfjuE,EAAQ,sBACRqqE,EAAqB,mBACrBrmB,IACEznD,EAAAA,EAAAA,OAEGwpE,EAAgBmI,IAAqB9Z,EAAAA,GAAAA,IAAiB,KACtD+Z,EAAcvX,IAAmBwX,EAAAA,GAAAA,MAGjCC,EAAeC,IAAoBla,EAAAA,GAAAA,IAAiB,GAE3D,IAAIma,EAA2BnB,GAAYoB,KAC3C,OAAQ9C,GACN,KAAK/E,EAAAA,GAAkBmF,SACrByC,EAAcnB,GAAYtB,SAC1B,MACF,KAAKnF,EAAAA,GAAkBgF,SACrB4C,EAAcnB,GAAYzB,SAC1B,MACF,KAAKhF,EAAAA,GAAkByF,gBACvB,KAAKzF,EAAAA,GAAkB8H,gBACrBF,EAAcnB,GAAYsB,WAC1B,MACF,KAAK/H,EAAAA,GAAkB2F,cACvB,KAAK3F,EAAAA,GAAkBgI,cACrBJ,EAAcnB,GAAYwB,SAI9B,MAAMC,GAAc5W,EAAAA,GAAAA,GAAiB6W,IACnC,SAASC,IACP1E,EAAsB,CAAEqB,gBAAY9kF,IACpCo9D,EAAmB,CAAEjK,YAAQnzD,IAC7BsnF,EAAkB,IAClBJ,EAAuB,CAAEt1B,WAAW,IACpCu1B,IACAvlF,WAAW,KACTqlF,EAAqB,CAAE5/D,MAAO,KAC9Bm4D,EAAoB,CAAE9zE,UAAM1L,IAC5By/E,EAAsB,CAAEzmF,QAAIgH,IAC5BknF,EAAuB,CAAEt1B,WAAW,IACpC81B,EAAiBvuF,KAAKC,QAxEI,IA0E9B,CAEA,IAA8B,IAA1B8uF,EAKJ,GAAIpD,IAAe/E,EAAAA,GAAkBgI,cAKrC,GAAIjD,IAAe/E,EAAAA,GAAkB8H,gBAArC,CAKA,GAAI/C,IAAe/E,EAAAA,GAAkB2F,cAAe,CAClD,MAAM0C,EAAoB1rF,SAAS2rF,eAAe,2BAC9CD,GACFA,EAAkB5oD,MAEtB,CAEA,GAAIslD,IAAe/E,EAAAA,GAAkBgF,SACnC,OAAQiC,GACN,KAAK3pB,EAAAA,GAAgBirB,YACrB,KAAKjrB,EAAAA,GAAgBuV,QACrB,KAAKvV,EAAAA,GAAgBkrB,QACrB,KAAKlrB,EAAAA,GAAgBmrB,cACrB,KAAKnrB,EAAAA,GAAgBorB,YACrB,KAAKprB,EAAAA,GAAgBqrB,QACrB,KAAKrrB,EAAAA,GAAgBsrB,YACrB,KAAKtrB,EAAAA,GAAgBurB,eACrB,KAAKvrB,EAAAA,GAAgBwrB,SACrB,KAAKxrB,EAAAA,GAAgByrB,SACrB,KAAKzrB,EAAAA,GAAgB0rB,aAEnB,YADA3rB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBuqB,OAG/C,KAAKvqB,EAAAA,GAAgB2rB,sBAEnB,YADA5rB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBkrB,UAE/C,KAAKlrB,EAAAA,GAAgB4rB,2BAEnB,YADA7rB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgB2rB,wBAG/C,KAAK3rB,EAAAA,GAAgB6rB,mBACrB,KAAK7rB,EAAAA,GAAgB8rB,kBACrB,KAAK9rB,EAAAA,GAAgB+rB,gBACrB,KAAK/rB,EAAAA,GAAgBgsB,oBACrB,KAAKhsB,EAAAA,GAAgBisB,WACrB,KAAKjsB,EAAAA,GAAgBksB,gBACrB,KAAKlsB,EAAAA,GAAgBmsB,aACrB,KAAKnsB,EAAAA,GAAgBosB,iBACrB,KAAKpsB,EAAAA,GAAgBqsB,gBACrB,KAAKrsB,EAAAA,GAAgBssB,kBACrB,KAAKtsB,EAAAA,GAAgBusB,kBACrB,KAAKvsB,EAAAA,GAAgBwsB,qBACrB,KAAKxsB,EAAAA,GAAgBysB,gBACrB,KAAKzsB,EAAAA,GAAgB0sB,oBACrB,KAAK1sB,EAAAA,GAAgB2sB,eACrB,KAAK3sB,EAAAA,GAAgB4sB,cACrB,KAAK5sB,EAAAA,GAAgB6sB,aACrB,KAAK7sB,EAAAA,GAAgB8sB,qBACrB,KAAK9sB,EAAAA,GAAgBC,iBACrB,KAAKD,EAAAA,GAAgB+sB,gBACrB,KAAK/sB,EAAAA,GAAgBgtB,wBAEnB,YADAjtB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBqrB,UAG/C,KAAKrrB,EAAAA,GAAgBitB,oBAInB,YAHAltB,EAAmB,CACjBjK,OAAQqJ,EAAca,EAAAA,GAAgB+sB,gBAAkB/sB,EAAAA,GAAgBC,mBAI5E,KAAKD,EAAAA,GAAgBktB,8BACrB,KAAKltB,EAAAA,GAAgBmtB,gBAEnB,YADAptB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgB+sB,kBAG/C,KAAK/sB,EAAAA,GAAgBotB,2BAEnB,YADArtB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBitB,sBAG/C,KAAKjtB,EAAAA,GAAgBqtB,0BAEnB,YADAttB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBktB,gCAG/C,KAAKltB,EAAAA,GAAgBstB,8BAEnB,YADAvtB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBqtB,4BAG/C,KAAKrtB,EAAAA,GAAgButB,kCACrB,KAAKvtB,EAAAA,GAAgBwtB,iCAEnB,YADAztB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgB6rB,qBAE/C,KAAK7rB,EAAAA,GAAgBytB,+BACrB,KAAKztB,EAAAA,GAAgB0tB,8BAEnB,YADA3tB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgB+rB,kBAE/C,KAAK/rB,EAAAA,GAAgB2tB,mCACrB,KAAK3tB,EAAAA,GAAgB4tB,kCAEnB,YADA7tB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBgsB,sBAE/C,KAAKhsB,EAAAA,GAAgB6tB,0BACrB,KAAK7tB,EAAAA,GAAgB8tB,yBAEnB,YADA/tB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBisB,aAE/C,KAAKjsB,EAAAA,GAAgB+tB,+BACrB,KAAK/tB,EAAAA,GAAgBguB,8BAEnB,YADAjuB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBksB,kBAE/C,KAAKlsB,EAAAA,GAAgBiuB,4BACrB,KAAKjuB,EAAAA,GAAgBkuB,2BAEnB,YADAnuB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBmsB,eAE/C,KAAKnsB,EAAAA,GAAgBmuB,gCACrB,KAAKnuB,EAAAA,GAAgBouB,+BAEnB,YADAruB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBosB,mBAE/C,KAAKpsB,EAAAA,GAAgBquB,+BACrB,KAAKruB,EAAAA,GAAgBsuB,8BAEnB,YADAvuB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBqsB,kBAE/C,KAAKrsB,EAAAA,GAAgBuuB,iCACrB,KAAKvuB,EAAAA,GAAgBwuB,gCAEnB,YADAzuB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBssB,oBAE/C,KAAKtsB,EAAAA,GAAgByuB,oCACrB,KAAKzuB,EAAAA,GAAgB0uB,mCAEnB,YADA3uB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBwsB,uBAE/C,KAAKxsB,EAAAA,GAAgB2uB,iCACrB,KAAK3uB,EAAAA,GAAgB4uB,gCAEnB,YADA7uB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBusB,oBAE/C,KAAKvsB,EAAAA,GAAgB6uB,iBAEnB,YADA9uB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgB4sB,gBAE/C,KAAK5sB,EAAAA,GAAgB8uB,wBAEnB,YADA/uB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgB6uB,mBAE/C,KAAK7uB,EAAAA,GAAgB+uB,qBAEnB,YADAhvB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgB8uB,0BAE/C,KAAK9uB,EAAAA,GAAgBgvB,sBAEnB,YADAjvB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgB+uB,uBAE/C,KAAK/uB,EAAAA,GAAgBivB,0BAEnB,YADAlvB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBgvB,wBAE/C,KAAKhvB,EAAAA,GAAgBkvB,2BACrB,KAAKlvB,EAAAA,GAAgBmvB,aACrB,KAAKnvB,EAAAA,GAAgBovB,kCAEnB,YADArvB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgB6sB,eAE/C,KAAK7sB,EAAAA,GAAgBqvB,uBAEnB,YADAtvB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBkvB,6BAE/C,KAAKlvB,EAAAA,GAAgBsvB,2BAEnB,YADAvvB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBqvB,yBAE/C,KAAKrvB,EAAAA,GAAgBuvB,wBAEnB,YADAxvB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBsvB,6BAE/C,KAAKtvB,EAAAA,GAAgBwvB,mBAEnB,YADAzvB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBovB,oCAE/C,KAAKpvB,EAAAA,GAAgByvB,uBAEnB,YADA1vB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBwvB,qBAG/C,KAAKxvB,EAAAA,GAAgB0vB,oBACrB,KAAK1vB,EAAAA,GAAgB2vB,kBAEnB,YADA5vB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBuV,UAG/C,KAAKvV,EAAAA,GAAgB4vB,aAEnB,YADA7vB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgB2vB,oBAG/C,KAAK3vB,EAAAA,GAAgB6vB,iCACrB,KAAK7vB,EAAAA,GAAgB8vB,iCAEnB,YADA/vB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgB+vB,gCAG/C,KAAK/vB,EAAAA,GAAgB+vB,8BACrB,KAAK/vB,EAAAA,GAAgBgwB,yBAGnB,OAFA5J,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkB1K,gBACtDjY,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBuqB,OAG/C,KAAKvqB,EAAAA,GAAgBiwB,cACrB,KAAKjwB,EAAAA,GAAgB2gB,YAEnB,YADA5gB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgByrB,WAG/C,KAAKzrB,EAAAA,GAAgBkwB,eAEnB,YADAnwB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBwrB,WAG/C,KAAKxrB,EAAAA,GAAgBmwB,sBAEnB,YADApwB,EAAmB,CAAEjK,OAAQkK,EAAAA,GAAgBysB,kBAQ/ChF,IAAe/E,EAAAA,GAAkB1K,UAAYyR,EAC/CrD,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkBc,eAKxDsH,GA3MA,MAFE1E,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkByF,uBALtD/B,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkB2F,qBALtDyC,MA0NEsF,GAAoBpc,EAAAA,GAAAA,GAAiBhqD,IACrCy9D,IAAe/E,EAAAA,GAAkBC,UAKrCyD,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkBc,eAElDx5D,IAAUo3D,GACZwI,EAAqB,CAAE5/D,WAPvBigE,EAAkBjgE,KAWhBqmE,GAAoBrc,EAAAA,GAAAA,GAAgB,KACxCoS,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkBc,eACtDoG,EAAqB,CAAE5/D,MAAO,KAC9Bo4D,EAAsB,CAAEzmF,GAAI6tD,OAG9B8lB,EAAAA,GAAAA,IACE,KACE,MAAM5hD,EAAa+5D,IAAe/E,EAAAA,GAAkBmF,SAC9CvS,EAAamS,IAAe/E,EAAAA,GAAkB1K,SAC9CsY,GAAqB/G,IAAe3W,EAK1C,OAAKllD,GAAc4iE,IAAwBhb,IAAe5nD,GACpD+7D,GAA2B6G,GACxB9Z,EAAAA,GAAAA,GAAsB,KAC3BoU,WAGF,GAGJ,CAACnB,EAAyBhC,EAAYmD,EAAarB,EAAY3W,IAGjE,MAAM2d,GAAqBvc,EAAAA,GAAAA,GAAiB3d,IACtCoxB,IAAe/E,EAAAA,GAAkBc,eAIrCntB,EAAE6X,iBACFkY,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkBc,kBAGlDgN,GAA4Bxc,EAAAA,GAAAA,GAAiB3d,IACjDA,EAAE6X,iBACFnyD,EAAS,CAAEpgB,GAAIL,EAAeutD,sBAAsB,MAGhD4nC,GAAsBzc,EAAAA,GAAAA,GAAiB3d,IAC3CA,EAAE6X,iBACFkY,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkBmF,aAGlD6I,GAAuB1c,EAAAA,GAAAA,GAAiB3d,IAC5CA,EAAE6X,iBACFkY,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkBgF,cAGxD1E,EAAAA,GAAAA,IAAWrS,EAAAA,GAAAA,IAAQ,KAAM,CACvB,cAAe4f,MAEVI,EAAAA,IAAc,CACjB,cAAeH,MAEbvN,EAAAA,IAAU,CACZ,QAASuN,EACT,QAASC,MAEP1L,EAAAA,IAAa9B,EAAAA,IAAU,CAAE,QAASyN,KACpC,MAEJphB,EAAAA,GAAAA,IAAU,KACR0a,IAEIL,IAAmB3pB,EAAAA,GAAgBqrB,SACrCtB,KAED,CAACC,EAAiBD,EAAkBJ,KAEvCiH,EAAAA,GAAAA,GAAc,KACRtH,GACF3W,EAAgB2W,IAEjB,CAAC3W,EAAiB2W,IAErB,MAAMuH,GAAwBC,EAAAA,GAAAA,IAAYC,EAAAA,GAAAA,GAAYzG,IAAgBnB,GAAYzB,SAAWiC,GAAkB,IAoF/G,OAlFAra,EAAAA,GAAAA,IAAU,KACR,GAAKhd,EAAAA,GAIL,OAAO0+B,EAAAA,GAAAA,GAAuB1d,EAAIhmD,QAAU,CAC1C2jE,wBAAyB,2CACzB/a,wBAAyB,2BACzBgb,kBAAmBtG,EACnBuG,SAAUA,KACR/K,EAAsB,CAAEqB,WAAY/E,EAAAA,GAAkBgF,WACtD3nB,EAAmB,CAAEjK,OAAQ+6B,EAAsBvjE,cAGtD,CAACujE,EAAuBvd,KAqEzB9E,EAAAA,GAAAA,GAACmJ,GAAAA,GAAU,CACTrE,IAAKA,EACL7mC,KAAM0lC,EAA8B,OAASif,EAAAA,GAC7CvZ,YAAauR,GACbxR,UAAW0S,EACX7B,eAAa,EACbC,oBAAqBS,GAAYoB,KACjC5B,YAAU,EACVC,iBAAkBO,GAAYoB,KAC9B5uF,GAAG,aACH01F,kBAAgB,EAAA7hB,SA7EpB,SAAuB3Z,GACrB,OAAQy0B,GACN,KAAKnB,GAAYtB,SACf,OACErZ,EAAAA,GAAAA,GAACkB,GAAa,CACZ7Z,SAAUA,EACVqsB,QAAS0I,EACTzE,cAAekK,EACf1d,gBAAiBA,EACjBC,iBAAkBA,EAClB9Y,gBAAiBA,EACjBsY,mBAAoBsX,IAG1B,KAAKP,GAAYzB,SACf,OACElZ,EAAAA,GAAAA,GAACkZ,GAAQ,CACP7xB,SAAUA,EACVy7B,cAAe3H,EACfO,aAAcA,EACdvX,gBAAiBA,EACjBqP,qBAAsB7P,EACtB+P,QAAS0I,IAGf,KAAKzB,GAAYsB,WACf,OACEjc,EAAAA,GAAAA,GAAC0a,GAAO,CAENrzB,SAAUA,EACV07B,WAAS,EACTvyF,QAASyoF,EACTvF,QAAS0I,GAJJR,GAOX,KAAKjB,GAAYwB,SACf,OACEnc,EAAAA,GAAAA,GAAC0a,GAAO,CAENrzB,SAAUA,EACV72D,QAASyoF,EACTvF,QAAS0I,GAHJR,GAMX,QACE,OACE5b,EAAAA,GAAAA,GAAC0X,GAAQ,CACPlnF,QAASyoF,EACT1F,gBAAiBA,EACjBX,YAAaA,EACbG,WAAYA,EACZO,eAAgBA,EAChBnP,gBAAiBA,EACjBsP,cAAemO,EACflO,QAAS0I,EACT5I,qBAAsB7P,EACtBzX,qBAAsBA,EACtBE,0BAA2BA,EAC3BgY,iBAAkBA,EAClBuT,cAAekK,EACfrgB,gBAAiBA,IAI3B,GAkBF,IC/hBA,GANuCwhB,EAAG/7C,aACxC,MAAMg8C,GAAcpjB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAAgBp5B,GAEnE,OAAOg8C,GAAcjjB,EAAAA,GAAAA,GAACijB,EAAW,SAAM9uF,GCEzC,GAP2CwrE,IACzC,MAAM,OAAE14B,GAAW04B,EACbujB,GAAiBrjB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,kBAAmBp5B,GAEzE,OAAOi8C,GAAiBljB,EAAAA,GAAAA,GAACkjB,EAAc,IAAKvjB,SAAYxrE,GCkC1D,IAAeqsE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBx4E,IACQ,CACL48D,cAAc18D,EAAAA,EAAAA,KAAeF,GAAQ48D,eAHvB4b,CA7B8B8f,EAAG17B,mBACnD,MAAM,SAAEl6C,IAAazD,EAAAA,EAAAA,MAEfs5E,EAAYA,KAChB71E,EAAS,CAAEpgB,QAAIgH,GAAa,CAAEkvF,gBAAgB,KAG1CC,EAA8CA,EAAGr3F,SAAQgB,OAAMwF,gBACnEw1E,EAAAA,GAAAA,GAAe,CACb5gB,UAAU,EACV5sC,MAAM8oE,EAAAA,GAAAA,IAAmBt3F,EAAQgB,EAAMwF,GACvCy1E,OAAQkb,KAIZ,OACEpjB,EAAAA,GAAAA,GAAA,OAAAgB,SACGvZ,GAAchuD,IAAI,CAAC4N,EAAanX,KAC/B8vE,EAAAA,GAAAA,GAACsjB,EAAoB,IAIfj8E,GAFC,GAAGA,EAAYpb,UAAUob,EAAY5U,YAAY4U,EAAYpa,QAAQiD,W,wFCnBpF,IAAIszF,GACAC,GAwHJ,SAASC,GAAWv2F,GAClB,OAAO3B,KAAKE,IAAI,EAAGyB,EACrB,C,4BCrIA,MAOA,GAPuDwyE,IACrD,MAAM,OAAE14B,GAAW04B,EACbgkB,GAA6B9jB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,8BAA+Bp5B,GAEjG,OAAO08C,GAA6B3jB,EAAAA,GAAAA,GAAC2jB,EAA0B,IAAKhkB,SAAYxrE,GCGlF,GAPwCwrE,IACtC,MAAM,OAAE14B,GAAW04B,EACbikB,GAAc/jB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAAgBp5B,GAEnE,OAAO28C,GAAc5jB,EAAAA,GAAAA,GAAC4jB,EAAW,IAAKjkB,SAAYxrE,GCGpD,GAPkDwrE,IAChD,MAAM,OAAE14B,GAAW04B,EACbkkB,GAAwBhkB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,yBAA0Bp5B,GAEvF,OAAO48C,GAAwB7jB,EAAAA,GAAAA,GAAC6jB,EAAqB,IAAKlkB,SAAYxrE,GCGxE,GAP8CwrE,IAC5C,MAAM,OAAE14B,GAAW04B,EACbmkB,GAAoBjkB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,qBAAsBp5B,GAE/E,OAAO68C,GAAoB9jB,EAAAA,GAAAA,GAAC8jB,EAAiB,IAAKnkB,SAAYxrE,G,gBCJhE,MASA,GATsDwrE,IACpD,MAAM,uBAAE5tB,GAA2B4tB,EAC7BokB,GAA4BlkB,EAAAA,GAAAA,GAChCC,GAAAA,GAAQO,MAAO,6BAA8BtuB,GAG/C,OAAOgyC,GAA4B/jB,EAAAA,GAAAA,GAAC+jB,EAAyB,IAAKpkB,SAAYxrE,G,gBCbhF,MC2EA,IAAeqsE,EAAAA,GAAAA,IAhDwBwjB,EACrCn5E,OACAo5E,gBACA3xF,cACAiwE,UACA2hB,YACAtlE,gBAEA,MAAMivD,GAAUjM,EAAAA,GAAAA,KACV/iB,GAAOgiB,EAAAA,GAAAA,KAEPiE,GAAMD,EAAAA,GAAAA,OACN,kBACJsf,EAAiB,kBACjBC,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuBzf,GAAMof,GAEjC,OACE9hB,EAAAA,GAAAA,IAAA,OAAKxjD,WAAWkjD,EAAAA,GAAAA,GD/CG,WC+CyBljD,GAAYkmD,IAAKA,EAAI9D,SAAA,EAC/DhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLC,MAAM,YACNz/D,OAAK,EACL0b,UDnDmC,WCoDnC2jD,QAASA,EACTiiB,cAAeJ,EACfxhB,UAAWiL,EAAQoW,GAAejjB,UAElChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAMpzB,EAAM+T,UDxDmC,eC0DtD3d,QAAQ3O,KAAgB0tE,EAAAA,GAAAA,GAAA,OAAKphD,UD1D4E,WC0D9CoiD,UAAEC,EAAAA,GAAAA,IAAqBpiB,EAAMvsD,KACxF4xF,IACClkB,EAAAA,GAAAA,GAAC+C,GAAAA,EAAI,CACH97B,OAAQk9C,EACRhhB,QAASkhB,EACT5J,oBAAqB6J,EACrBphB,WAAS,EACTF,UAAU,QACVC,UAAU,SAAQjC,UAElBhB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACz3D,KAAK,YAAY03D,QAAS2hB,EAAUljB,SAAE6M,EAAQ,0BCpElE,GAA2C,WCiK3C,IAAerN,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBx4E,IACC,MAAM2M,GAAqBC,EAAAA,EAAAA,KAAyB5M,GACpD,IAAK2M,EACH,MAAO,CAAC,EAGV,MAAM,OAAEvL,EAAM,SAAEwG,EAAUxF,KAAMuN,GAAoBhD,EAC9CvJ,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1Bw4F,EAAwBxjF,SAAQkjB,EAAAA,EAAAA,KAA0Bt5B,IAE1D65F,EAAkBz2F,GAAQwE,IAAaD,EAAAA,IAAsC,WAApBgI,IACzDiqF,EAEN,MAAO,CACLjqF,kBACAvO,SACAwG,WACA+iD,eAAgBkvC,EAAkBz2F,EAAKwB,0BAAuB0E,EAC9D9E,gBAAiBq1F,EAAkBz2F,EAAKoB,qBAAkB8E,EAC1Dqf,eAAgBkxE,EAAkBz2F,EAAKulB,oBAAiBrf,EACxDwwF,cAAeD,EAAkBz2F,EAAKylB,yBAAsBvf,EAC5D7B,YAAaoyF,EAAkBz2F,EAAKqE,iBAAc6B,IAtBpCkvE,CA9HqCuhB,EACvDC,iBACAC,UACAtqF,kBACAvO,SACAwG,WACAH,cACAjD,kBACAmkB,iBACAgiC,iBACAmvC,gBACAI,qBAEA,MAAM,eACJC,EAAc,kBAAEC,EAAiB,iBAAEC,EAAgB,qBAAEv1E,EAAoB,gBACzEw1E,EAAe,iBAAEC,EAAgB,oBAAE5+E,IACjCsD,EAAAA,EAAAA,MAEEu7E,GAAaxgB,EAAAA,GAAAA,MAEbygB,EAAqBrkF,QAAQu0C,GAC7B+vC,EAAoBtkF,QAAQ0jF,GAE5Ba,GAAyBhgB,EAAAA,GAAAA,GAAgB,KACxCv5E,GACLm5F,EAAiB,CAAEn5F,SAAQwG,eAGvBgzF,GAAwBjgB,EAAAA,GAAAA,GAAgB,KACvCv5E,GACLk5F,EAAgB,CAAEl5F,SAAQwG,gBAG5BquE,EAAAA,GAAAA,IAAU,KACJwkB,GAAsBr5F,IAAWoD,GAAiB3C,QACpDijB,EAAqB,CAAE1jB,YAExB,CAACA,EAAQ0jB,EAAsB21E,EAAoBj2F,GAAiB3C,UAEvEo0E,EAAAA,GAAAA,IAAU,KACJwkB,GAAsBr5F,GACxB0jB,EAAqB,CAAE1jB,YAExB,CAACA,EAAQ0jB,EAAsB21E,KAElCxkB,EAAAA,GAAAA,IAAU,KACJykB,GAAqBt5F,IAAWunB,GAAgB9mB,QAClD8Z,EAAoB,CAAEva,YAEvB,CAACA,EAAQua,EAAqB++E,EAAmB/xE,GAAgB9mB,UAEpEo0E,EAAAA,GAAAA,IAAU,KACJykB,GAAqBt5F,GACvBua,EAAoB,CAAEva,YAEvB,CAACA,EAAQua,EAAqB++E,IAEjC,MAAMG,GAAwBlgB,EAAAA,GAAAA,GAAgB,KAC5C,GAAKqf,EAIL,GAAwB,WAApBrqF,EACFwqF,QACK,CACL,MAAMW,EAAoBN,EAAWvmE,QAAS8mE,cAAetmB,cAC3D,2CAEIumB,EAAkBF,EAAkB7+B,iBAAiC,sBACrEg/B,EAAqBD,EAAgBA,EAAgBn5F,OAAS,GACpE,IAAKo5F,EACH,QAGFC,EAAAA,GAAAA,IAAc,CACZC,UAAWL,EACXM,QAASH,EACT1pC,SAAU,MACV8pC,OAhFa,IAkFjB,IAGIrkB,GAAeC,EAAAA,GAAAA,GDtHA,YCwHlB+iB,GAAkB5jF,QAAQu0C,IAAmBv0C,QAAQ0jF,KDxHyG,YCyH9J1jF,QAAQu0C,IAAmBv0C,QAAQ0jF,MAAoBE,GDzHwQ,YC0H/TC,GD1H+M,YC2H/MC,GD3HqQ,YC8HxQ,OACE3iB,EAAAA,GAAAA,IAAA,OAAK0C,IAAKugB,EAAYzmE,UAAWijD,EAAab,SAAA,EAC5ChB,EAAAA,GAAAA,GAACgkB,GAAgB,CACfn5E,KAAK,gBACLo5E,cAAc,8BACd1hB,QAAS0iB,EACTf,UAAWsB,EACXlzF,YAAakjD,EACb52B,WAAWkjD,EAAAA,GAAAA,GDtI+C,YCwIvDwjB,GAAsBa,IACtBZ,GDzI8G,eC6InHvlB,EAAAA,GAAAA,GAACgkB,GAAgB,CACfn5E,KAAK,UACLo5E,cAAc,sBACd1hB,QAAS2iB,EACThB,UAAWuB,EACXnzF,YAAaqyF,EACb/lE,WAAY2mE,GAAqBY,MAGnCnmB,EAAAA,GAAAA,GAACgkB,GAAgB,CACfn5E,KAAK,aACLo5E,cAAc,mBACd1hB,QAASmjB,EACTpzF,YAAaA,EACbssB,UD3JqI,mBE2B7I,IAAe4hD,EAAAA,GAAAA,IApBf,WACE,MAAM3hB,GAAOgiB,EAAAA,GAAAA,MAEP,uBAAE5kC,IAA2BnyB,EAAAA,EAAAA,MAE7Bs8E,GAAc5gB,EAAAA,GAAAA,GAAgB,KAClCvpC,MAGF,OACEmmC,EAAAA,GAAAA,IAAA,OACExjD,UClBiB,WDmBjB2jD,QAAS6jB,EAAYplB,SAAA,EAErBhB,EAAAA,GAAAA,GAAA,OAAKphD,UCrB+B,WDqBPoiD,SAAEniB,EAAK,iCACpCmhB,EAAAA,GAAAA,GAAA,OAAKphD,UCtBqD,WDsB1BoiD,SAAEniB,EAAK,qCAG7C,G,2BEVO,SAASwnC,GAAQC,GACtB,MAAO,YAAaA,CACtB,CAEO,SAASC,GACdprF,EAAwBpI,EAAwByzF,EAAuBC,EAA0BC,GAOjG,IAAIC,EAEJ,MAAMC,EAAiC,CAPC,CACtCC,aAAc1rF,EAAS,GAAG0E,KAC1BinF,UAAUC,EAAAA,GAAAA,IAAiC,IAAnB5rF,EAAS,GAAG0E,MACpCmnF,aAAc,CAAC,MAuFjB,OAjFA7rF,EAASpO,QAAQ,CAAClB,EAASyY,KACzB,MAAM2iF,EAAmBL,EAAWA,EAAWl6F,OAAS,GAClDw6F,EAAqBD,EAAiBD,aAAaC,EAAiBD,aAAat6F,OAAS,GAC5Fb,EAAQ2mD,UACLm0C,GAQHA,EAAaxrF,SAAS7E,KAAKzK,GACvBA,EAAQs7F,cACVR,EAAaS,gBAAkBv7F,GAE7BA,EAAQ2E,QAAQiI,OAASkuF,EAAaU,sBACpCV,EAAaW,gBACfX,EAAaU,qBAAsB,EACnCV,EAAaW,oBAAiBnzF,GAE9BwyF,EAAaW,eAAiBz7F,IAhBlC86F,EAAe,CACbY,QAAS17F,EAAQqd,UACjB/N,SAAU,CAACtP,GACX27F,YAAa37F,EACbw7F,qBAAqB,IAgBfx7F,EAAQ2E,QAAQ0N,WAAWL,cAAcnR,QAAU,GAAK,EAClEw6F,EAAmB5wF,KAAK,CACtBixF,QAAS,QAAQ17F,EAAQsB,KACzBgO,SAAU,CAACtP,GACX27F,YAAa37F,EACbw7F,qBAAqB,EACrBI,aAAa,IAGfP,EAAmB5wF,KAAKzK,GAG1B,MAAM67F,EAAcvsF,EAASmJ,EAAQ,IAGnCqiF,GACKe,GAAgBA,EAAYx+E,WAAaw+E,EAAYx+E,YAAcy9E,EAAaY,UAErFL,EAAmB5wF,KAAKqwF,GACxBA,OAAexyF,GAGjB,MAAMwzF,EAA2BT,EAAmBA,EAAmBx6F,OAAS,GAChF,GAAIg7F,IAAgBf,EAAc,CAChC,MAAMiB,GAAyBb,EAAAA,GAAAA,IAAiC,IAAnBW,EAAY7nF,MACzD,GAAIonF,EAAiBH,WAAac,EAAwB,CACxD,MAAMC,EAAiC,CACrChB,aAAca,EAAY7nF,KAC1BinF,SAAUc,EACVZ,aAAc,CAAC,KAEjBJ,EAAWtwF,KAAKuxF,EAClB,MACEH,EAAYv6F,KAAO4F,GAChBlH,EAAQuR,WAAasqF,EAAYtqF,WAC/BspF,GAAa76F,EAAQi8F,kBACvBj8F,EAAQqC,aAAew5F,EAAYx5F,YACnCrC,EAAQk8F,kBAAoBL,EAAYK,kBACvCx0F,EAAAA,EAAAA,IAAgB1H,IAA6C,cAAjCA,EAAQ2E,QAAQ0E,QAAQjI,OACpDsG,EAAAA,EAAAA,IAAgBm0F,IAAqD,cAArCA,EAAYl3F,QAAQ0E,QAAQjI,MAC7DpB,EAAQm8F,eACRN,EAAYM,eACXN,EAAY7nF,KAAOhU,EAAQgU,KA3FR,KA4FnB2mF,IACE36F,EAAQsB,KAAOq5F,GACbmB,GACC,gBAAiBA,GACjBA,EAAyBH,aAAar6F,KAAOq5F,IAC/CkB,EAAYv6F,KAAOq5F,GACpBC,GAAkB56F,EAAQyzD,aAAayU,SAAW2zB,EAAYpoC,aAAayU,SAEjFkzB,EAAiBD,aAAa1wF,KAAK,GAEvC,IAGKswF,CACT,C,oFCjHA,MC0HA,IAAepmB,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAU0gB,aACT,MAAM,SAAEoP,GAAa9vB,EAAO8vB,SAASoC,SAC/B9uB,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQ0gB,GAChC,IAAKtd,EACH,MAAO,CAAC,EAGV,MAAMuR,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQ0gB,GAC1BpG,GAAWC,EAAAA,EAAAA,KAAmBva,EAAQ0gB,GAEtClT,GAAc4vF,EAAAA,EAAAA,KAAsBp9F,EAAQoD,EAAKd,IAEvD,MAAO,CACL+6F,gBAAiBvtE,EACjBwtE,oBAAqB9vF,GAAeA,EAAYlL,KAAOc,EAAKgN,uBACxD5C,EAAYlL,QACZgH,EACJ4a,gBAAiBlkB,EAAOkkB,gBACxBvX,oBAAoBC,EAAAA,EAAAA,KAAyB5M,GAC7Cu9F,cAAejjF,GAAUijF,cACzB5oF,SArBc6jE,CAnF+BglB,EACjDH,kBACAn5E,kBACAo5E,sBACA3wF,qBACA4wF,gBACA5oF,WAEA,MAAM,qBACJ8oF,EAAoB,YACpBxiF,EAAW,oBACX/K,IACE+O,EAAAA,EAAAA,MAEE+0C,GAAO+iB,EAAAA,GAAAA,KAEP2mB,GAAe1jB,EAAAA,GAAAA,MAEfj0E,GAAUuxE,EAAAA,GAAAA,IAAQ,KACtB,GAAIimB,GAAex3F,QAAS,OAAOw3F,EAAcx3F,QACjD,IAAKs3F,GAAiBx7F,OAAQ,OAE9B,MAAM87F,EAAch9F,KAAK6B,MAAM7B,KAAKsN,SAAWovF,EAAgBx7F,QAC/D,OAAOw7F,EAAgBM,IACtB,CAACJ,GAAex3F,QAASs3F,KAE5BpnB,EAAAA,GAAAA,IAAU,KACJonB,GAAiBx7F,QAA8B,yBAApBqiB,GAI/Bu5E,KACC,CAACv5E,EAAiBu5E,EAAsBJ,KAE3CpnB,EAAAA,GAAAA,IAAU,KACgB,yBAApB/xD,GAA8Co5E,GAChDptF,EAAoB,CAAEC,MAAOmtF,KAE9B,CAACp5E,EAAiBhU,EAAqBotF,IAE1C,MAAMM,GAAsBjjB,EAAAA,GAAAA,GAAgB,KACrChuE,GAILsO,EAAY,CACVlV,QAAS,IACJA,EACHK,qBAAqB,GAEvBoW,YAAa7P,MAIX+C,EAAQ6tF,GAAe7tF,OAASskD,EAAK,iCACrC5wC,EAAcm6E,GAAen6E,aAAe4wC,EAAK,6BAEvD,OACEujB,EAAAA,GAAAA,IAAA,OAAKxjD,UDjGc,WCiGSoiD,SAAA,EAC1BoB,EAAAA,GAAAA,IAAA,OAAKxjD,UDlGiC,WCkGPoiD,SAAA,EAC7BhB,EAAAA,GAAAA,GAAA,KAAGphD,UDnG2E,WCmGlD4jD,IAAI,OAAMxB,SAAEzmE,KACxCylE,EAAAA,GAAAA,GAAA,KAAGphD,UDpGoG,WCoGrE4jD,IAAI,OAAMxB,SAAE/yD,KAE9C+xD,EAAAA,GAAAA,GAAA,OAAK8E,IAAKyjB,EAAc3pE,UDtGoG,WCsGzE2jD,QAASkmB,EAAoBznB,SAC7EpwE,IACCovE,EAAAA,GAAAA,GAAC0oB,GAAAA,EAAW,CACVH,aAAcA,EACd33F,QAASA,EACT6sD,KAAM,IACNkrC,YAAU,SAKjBP,IACCpoB,EAAAA,GAAAA,GAAA,OAAKphD,UDlHsD,WCkH1BoiD,SAC9BniB,EAAK,8BAA8BpzC,EAAAA,EAAAA,IAAgBjM,Y,2HCnH9D,SAA6C,WAA7C,GAAsK,WAAtK,GAA+O,WAA/O,GAAme,WCuPne,IAAeghE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUoB,aACT,MACE28F,aAAeC,WAAYC,IACzBj+F,EACEoD,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1B2lC,GAAexsB,EAAAA,EAAAA,KAAmBva,EAAQoB,GAC1CukC,GAAcC,EAAAA,EAAAA,KAAsB5lC,EAAQoB,GAGlD,IACI2uE,EADAmuB,GAAoB,EAUxB,OAZgB1vD,EAAAA,EAAAA,KAAUxuC,EAAQoB,KAK5B2lC,EACFgpC,EAAUhpC,EAAagpC,QAEvBmuB,GAAoB,GAIjB,CACL96F,OACA2jC,eACAgpC,UACAmuB,oBACAD,gBACAt4D,gBA1Bc6yC,CA5LsC2lB,EACxD/6F,OACAhC,SACA2uE,UACAmuB,oBACAD,gBACAt4D,cACAoB,eACAq3D,kBAEA,MAAM,gBAAEC,EAAe,iBAAEzwD,IAAqB3uB,EAAAA,EAAAA,MACxC+jE,GAAUjM,EAAAA,GAAAA,KACV/iB,GAAOgiB,EAAAA,GAAAA,MAEP,aACJsoB,EAAY,kBACZC,EAAiB,eACjBC,EAAc,gBACdC,GACE13D,GAAc/H,UAAY,CAAC,GAE/Bi3C,EAAAA,GAAAA,IAAU,KACRooB,EAAgB,CAAE39E,OAAQtf,KACzB,CAACA,IAEJ,MAAM63C,GAAUq+B,EAAAA,GAAAA,IAAQ,KACtB,GAAK2mB,GAAkBK,EACvB,OAAOI,EAAAA,GAAAA,IAAoBT,EAAeK,IACzC,CAACL,EAAeK,IAEbK,GAAkBC,EAAAA,GAAAA,GAAS7uB,GAASlqE,OAAQg5F,EAAAA,EAAAA,IAAqB9uB,EAAQlqE,YAASyD,GAClFw1F,GAAgBF,EAAAA,GAAAA,GAAS7uB,GAAStwD,KAAMs/E,EAAAA,EAAAA,IAAkBhvB,EAAQtwD,IAAK,aAAUnW,GACjF01F,EAAoBjvB,GAASlqE,OAAQo5F,EAAAA,EAAAA,IAAuBlvB,EAAQlqE,OAASkqE,GAAStwD,KACxFy/E,EAAAA,EAAAA,IAAmBnvB,EAAQtwD,UAAOnW,EAChC61F,EAAiBpvB,IAAYA,EAAQ3sD,cAAgB2sD,EAAQtwD,MAAQswD,EAAQlqE,MAC7Eu5F,GAAmBnmD,IAAYslD,EAE/Bc,GAAgBC,EAAAA,EAAAA,IAA+Bl+F,IAE/C,MAAEX,EAAK,OAAE8+F,GAAWP,GAAqB,CAAC,EAE1CzD,GAAc5gB,EAAAA,GAAAA,GAAiB3d,KACnCwiC,EAAAA,GAAAA,GAAUxiC,GACVpvB,EAAiB,CACftrC,GAAIlB,EAAQouD,sBAAsB,EAAMoB,WAAY,cAAeC,uBAAuB,MAIxF4uC,EAAmBjB,GAAkBp7F,GACzC+xE,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,uBAAsBoiD,UACnChB,EAAAA,GAAAA,GAAA,QAAAgB,SACGniB,EAAK,kBAAmB,CACvBr/C,KAAMvR,EAAKsM,MACXgwF,MAAMC,EAAAA,GAAAA,IAAmB3rC,EAAMwqC,IAC9B,CAAEoB,WAAW,EAAMC,cAAc,OALE,8BAQxCv2F,EAEEw2F,EAAoBrB,GAAmBr7F,GAC3C+xE,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,uBAAsBoiD,UACnChB,EAAAA,GAAAA,GAAA,QAAAgB,SACGniB,EAAK,mBAAoB,CACxBr/C,KAAMvR,EAAKsM,MACXgwF,MAAMC,EAAAA,GAAAA,IAAmB3rC,EAAMyqC,IAC9B,CAAEmB,WAAW,EAAMC,cAAc,OALE,+BAQxCv2F,EAEEy2F,GAAYzoB,EAAAA,GAAAA,IAAQ,KACxB,MAAM5mE,EAAwB,GAkB9B,GAjBIuoC,GACFvoC,EAAQjF,KAAK,CACXu3E,EAAQ,iBACRzL,EAAAA,GAAAA,IAAA,QAAMxjD,UDtIuT,WCsIrRoiD,SAAA,EACtChB,EAAAA,GAAAA,GAAA,QAAMphD,UDvI0U,WCuIhToiD,UAC7B6pB,EAAAA,GAAAA,IAAWC,EAAAA,GAAAA,IAAWhnD,GAASinD,SAEjCjnD,GAASknD,iBAIZ5B,GACF7tF,EAAQjF,KAAK,CACXuoD,EAAK,4BACLosC,EAAAA,GAAAA,IAAwBpsC,EAAK/e,KAAMspD,KAGnCx3D,GAAcs5D,iBAAkB,CAClC,MAAMrgG,GAASmL,EAAAA,EAAAA,MACT2jD,EAAQnpB,GAAa57B,IAAIoN,MAAM,EAAG,GAAGvI,IAAKtM,IAAO6X,EAAAA,EAAAA,KAAWna,EAAQsC,IAAMR,OAAOsU,SACvF1F,EAAQjF,KAAK,CACXuoD,EAAK,6BACLujB,EAAAA,GAAAA,IAAC+oB,GAAAA,EAAI,CAACvsE,UDzJsZ,WCyJ9X2jD,QAAS6jB,EAAYplB,SAAA,EACjDhB,EAAAA,GAAAA,GAAA,QAAMphD,UD1J0a,WC0J/YoiD,SAC9BniB,EAAK,aAAc,CAClBr7C,MAAOouB,EAAas5D,kBACnB,CACD1gF,YAAaonB,EAAas5D,qBAG7BjqF,QAAQ04C,GAAOjtD,UAAWszE,EAAAA,GAAAA,GAACorB,GAAAA,EAAU,CAAC3tC,KAAK,QAAQ9D,MAAOA,KAC3DqmB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,OAAOrf,UDlKgb,iBCqKxc,CACA,OAAOrjB,GACN,CAACsjD,EAAMgvB,EAAS/pC,EAASslD,EAAmB54D,EAAaoB,IAE5D,OACEwwC,EAAAA,GAAAA,IAAA,OAAKxjD,WAAWkjD,EAAAA,GAAAA,GD1KG,WC0KyB,SAASd,SAAA,CAClD+nB,GAAqBkB,IAAmBjqB,EAAAA,GAAAA,GAAA,QAAAgB,SAAO6M,EAAQ,aACtDmc,GAAkBC,IAAqBlB,IAAsBE,IAC7DjpB,EAAAA,GAAAA,GAAA,QAAAgB,SAAO6M,EAAQ,gBAEhBjT,IACCwH,EAAAA,GAAAA,IAAA,OACExjD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GDjLgE,YCkL1FkF,OAAOC,EAAAA,GAAAA,GACLhgG,EAAQ,UAAUA,WAAY6I,GAC9B6sE,SAAA,CAEDwoB,IACCxpB,EAAAA,GAAAA,GAAA,OACEphD,UAAWunE,GACXoF,IAAK/B,EACLl+F,MAAOA,EACP8+F,OAAQA,EACRoB,IAAI,aAGP7B,IACC3pB,EAAAA,GAAAA,GAACyrB,GAAAA,EAAc,CACbC,SAAO,EACP9sE,UAAWunE,GACXoF,IAAK5B,EACLgC,MAAI,EACJC,yBAAuB,EACvBC,OAAK,EACLC,aAAW,EACXT,OAAOC,EAAAA,GAAAA,GAAWrqF,QAAQ3V,IAAU,UAAUA,MAAW2V,QAAQmpF,IAAW,WAAWA,SAG1FP,IAAsBL,IAAoBG,IACzC3pB,EAAAA,GAAAA,GAAC+rB,GAAAA,EAAQ,CACPntE,UAAWunE,GACX76F,MAAOA,EACP8+F,OAAQA,EACR4B,kBAAgB,IAGnB9B,IACClqB,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAA0BnlB,SACvC6M,EAAQ,qBAGXqc,GAAiBtvB,EAAQ3sD,cACzBm0D,EAAAA,GAAAA,IAAA,OAAKxjD,UAAWunE,GAA0BnlB,SAAA,EACxChB,EAAAA,GAAAA,GAAA,KAAGphD,UD1N2M,WC0N5KoiD,SAAE6M,EAAQ,mBAC3Cgd,EAAAA,GAAAA,GAAWjwB,EAAQ3sD,YAAa,CAAC,KAAM,QAAS,iBAKvDg8E,GAAmBh8F,IACnBm0E,EAAAA,GAAAA,IAAA,OACExjD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GDlOqC,YCkOGnlB,SAAA,EAElEhB,EAAAA,GAAAA,GAAA,MAAIphD,UDpO4P,WCoO5NoiD,UAAE6pB,EAAAA,GAAAA,IAAWx9B,EAAAA,EAAAA,IAAaxO,EAAM5wD,OACpE+xE,EAAAA,GAAAA,GAAA,KAAGphD,WAAWkjD,EAAAA,GAAAA,GDrOgR,WCqOxOqkB,IAAkBnlB,SACrEniB,EAAK,iCAERmhB,EAAAA,GAAAA,GAACisB,GAAAA,EAAS,CAACC,aAAc/F,GAAkB1vE,KAAMm0E,KAC/C38F,GAAMk+F,aACN/pB,EAAAA,GAAAA,IAAA,OAAKxjD,WAAWkjD,EAAAA,GAAAA,GD1O2V,WC0OpTqkB,IAAkBnlB,SAAA,EACvEhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,iBACX+hC,EAAAA,GAAAA,GAAA,KAAGphD,UD5OiY,WC4OjWoiD,SAAEniB,EAAK,kCAKjDyrC,EACAK,Q,eCvOP,MACMyB,GAAkCj5D,EAAAA,GAAa,IAAO,I,iDCZ5D,SAAuG,WCwNvG,IAAeqtC,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,EAAQwhG,KACP,MAAM,QACJxgG,EAAO,WAAEygG,GACPD,GACE,OAAEpgG,GAAWJ,EAEb46F,GAAiBz6F,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAC9CsgG,GAAkBC,EAAAA,EAAAA,IAAYvgG,GAC9BwgG,GAAsBC,EAAAA,EAAAA,IAAwBzgG,GAE9C0gG,GAAmBlG,IAAkBmG,EAAAA,EAAAA,IAAsB/gG,GAC3DghG,EAAgBP,GAAcK,EAIpC,MAAO,CACLj0D,QAJaC,EAAAA,EAAAA,KAAa9tC,EAAQgB,GAKlCghG,gBACAC,cALmBC,EAAAA,EAAAA,KAAsBliG,EAAQgB,GAMjD46F,iBACAuG,cAAeT,EACfE,wBAtBcppB,CA1JoC4pB,EACtDphG,UACAygG,aACAtrB,WACA7zE,KACA+/F,kBACAx0D,SACAm0D,gBACAC,eACArG,iBACAuG,gBACAP,sBACA3H,cAEA,MAAM,SAAEv3E,EAAQ,6BAAE4/E,IAAiCrjF,EAAAA,EAAAA,MAC7Cg7D,GAAMD,EAAAA,GAAAA,OAEN,YAAEvlB,GAAgBzzD,EAElBuhG,EAAgBP,EAAgBn0D,OAASvkC,EACzC0qD,GAAOgiB,EAAAA,GAAAA,KAEPwsB,EAAwBH,GAAmB,GAC1Cn3B,EAASu3B,IAAavc,EAAAA,GAAAA,GAAQsc,IACrCvsB,EAAAA,GAAAA,IAAU,KACJusB,GAIJt3F,WAAWu3F,EAAWJ,EAAkBK,EAAAA,MACvC,CAACL,EAAiBI,EAAWD,IAEhC,MAEMG,EAF2BluC,IAC3BmnC,GAAkBuG,GAAiBP,IAAwBW,GACnBN,EAAeM,EACvDK,EAAmBD,IAAcl7E,EAAAA,EAAAA,IAAck7E,GAE/CE,GAAiBloB,EAAAA,GAAAA,GAAgB,KAChCgoB,GAILjgF,EAAS,CAAEpgB,GAAIqgG,EAAWrgG,OAGtBwgG,GAAgBnoB,EAAAA,GAAAA,GAAgB,KAC/BgoB,GAIgB38F,SAASyuE,cAA8BsuB,EAAAA,MAE1DT,EAA6B,CAAEtgG,OAAQ2gG,EAAWrgG,OAIhD0gG,GAAoBroB,EAAAA,GAAAA,GAAgB,KACxCkoB,OAIA5oB,IAAKgpB,EAAS,aACd/oB,IACEI,EAAAA,GAAAA,GAAkB,CACpBl+B,OAAQqlD,GAAcv2B,EACtBqP,kBAAkB,KAGd,kBACJ+e,EAAiB,kBAAE4J,EAAiB,kBACpC3J,EAAiB,uBAAEC,EAAsB,sBACzCC,IACEC,EAAAA,GAAAA,GAAuBzf,GAErBkpB,GAAoBxoB,EAAAA,GAAAA,GAAgB,IAAMsoB,EAAUhvE,SACpDmvE,GAAiBzoB,EAAAA,GAAAA,GAAgB,IAAM30E,SAASyuE,cAAc,4CAC9D4uB,GAAiB1oB,EAAAA,GAAAA,GACrB,IAAMV,GAAKhmD,SAASwgD,cAAc,IAAI6mB,eAElCgI,GAAY3oB,EAAAA,GAAAA,GAAgB,KAAM,CAAG4oB,YAAY,KAEjDC,EAAavJ,GAAW0I,IAAeC,GAAoBxsF,SAAQs5B,EAAAA,EAAAA,IAAgBizD,KACnFc,EAA0BrtF,QAAQ8sF,KAAuBN,GAAoBY,GAsD7EzvE,GAAYkjD,EAAAA,GAAAA,GAChB,yBDvMmB,YC2MrB,OACEM,EAAAA,GAAAA,IAAA,OAAKj1E,GAAIA,EAAIyxB,UAAWA,EAAWkmD,IAAKA,EAAI9D,SAAA,CACzC+D,IACC/E,EAAAA,GAAAA,GAAA,OAAK8E,IAAKgpB,EAAWlvE,UD9MuB,WC8MWoiD,SAvB7D,WACE,MAAMutB,GAAef,GAAcluC,EAAeA,EAAYC,oBAAiBprD,EAE/E,OACE6rE,EAAAA,GAAAA,GAACuM,GAAAA,EAAM,CACL9uB,KAAK,QACL7+B,UD7LsE,WC8LtE7Z,KAAMyoF,EACN/0F,KAAM81F,EACNhsB,QAASirB,EAAaK,OAAoB15F,EAC1CqwF,cAAeJ,GAGrB,CAWSoK,KAGJxtB,EACAstB,IA/DDtuB,EAAAA,GAAAA,GAAC+C,GAAAA,EAAI,CACH97B,OAAQk9C,EACRsK,OAAQV,EACRC,kBAAmBA,EACnBC,eAAgBA,EAChBE,UAAWA,EACXD,eAAgBA,EAChBtvE,UAAWunE,GACXhjB,QAASkhB,EACT5J,oBAAqB6J,EACrB8J,YAAU,EACVlrB,WAAS,EAAAlC,UAEToB,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,CACGysB,IACCztB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAK,WACL03D,QAASmrB,EAAe1sB,SAEvBniB,EAAK,iBAGTwvC,IACCruB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAK,UACL03D,QAASorB,EAAc3sB,SAEtBniB,EAAK,uC,gECxKpB,MASA,GAT0D8gB,IACxD,MAAM,OAAE14B,GAAW04B,EACb+uB,GAAgC7uB,EAAAA,GAAAA,GACpCC,GAAAA,GAAQO,MAAO,iCAAkCp5B,GAGnD,OAAOynD,GAAgC1uB,EAAAA,GAAAA,GAAC0uB,EAA6B,IAAK/uB,SAAYxrE,G,gBC8CxF,MAsRA,IAAeqsE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUoB,aACT,MAAMJ,GAAU8iG,EAAAA,EAAAA,KAAuB9jG,EAAQoB,GAEzC2iG,GAAkBC,EAAAA,EAAAA,KAAsBhkG,GACxCikG,EAAoBjjG,GAAUy3D,EAAAA,EAAAA,IAA4Bz3D,QAAWsI,EACrE46F,EAAgBD,IAAqBE,EAAAA,EAAAA,IAAiBJ,EAAiBE,GAE7E,MAAO,CACLjjG,UACA+sC,OAAOq0C,EAAAA,EAAAA,KAAYpiF,GACnBkkG,gBACAE,iBAAkBpjG,GAAUqjG,EAAAA,EAAAA,KAAuBrkG,EAAQgB,QAAWsI,EACtEg7F,iBAAkBtjG,GAAUujG,EAAAA,EAAAA,KAAuBvkG,EAAQgB,QAAWsI,IAbxDkvE,CApRgCgsB,EAClDpjG,SACAJ,UACA08F,eACA3vD,QACA02D,gCACAC,gCACAR,gBACAE,mBACAE,uBAEA,MAAM,cACJK,EAAa,QACb53D,EAAO,cACP63D,EAAa,eACbC,EAAc,gBACd3/B,EAAe,kBACf4/B,IACE7lF,EAAAA,EAAAA,MAEE+0C,GAAO+iB,EAAAA,GAAAA,KACPguB,GAAa/qB,EAAAA,GAAAA,MACbC,GAAMD,EAAAA,GAAAA,MACNgrB,EAAgB5uF,QAAQpV,IAExB,SAAEylF,IAAaC,EAAAA,EAAAA,OAEnBue,QAASC,IACPC,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1H,EACT2H,WAhC6B,IAiC7BC,UAAW,KAEP,kBACJhM,EAAiB,kBAAE4J,EAAiB,wBACpCqC,EAAuB,kBAAEhM,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBzf,OAAK3wE,GAAW,EAAMg/B,EAAAA,KAEjD2tC,EAAAA,GAAAA,IAAU,IACD+uB,EAAgBE,EAAoBH,EAAW9wE,QAAWuxE,IAC3DA,EAAOC,gBAAkBzkG,GAAS4mB,UACpC+8E,EAAc,CAAE/8E,SAAU5mB,EAAQ4mB,kBAEjCte,EACJ,CAACtI,GAAS4mB,SAAUo9E,EAAeE,EAAqBP,IAE3D,MAKMe,GAA6B/qB,EAAAA,GAAAA,GAAgB,KACjDiqB,OAGI,MACJ/+F,EAAK,MAAEC,GACL9E,GAAUiF,EAAAA,EAAAA,IAAkBjF,GAAW,CAAE6E,WAAOyD,EAAWxD,WAAOwD,GAEhEq8F,EAAQ7/F,GAAO6/F,MACfC,EAAWxvF,QAAQvQ,GAASC,GAE5By1F,GAAc5gB,EAAAA,GAAAA,GAAgB,KAC7B35E,IAEL6jG,EAAe,CAAEj9E,SAAU5mB,EAAQ4mB,SAAUC,WAAShiB,IAAS8/F,SAAer8F,IAC9EyjC,EAAQ,CAAEjkB,IAAK9nB,EAAQ8nB,IAAKC,iBAAiB,OAGzC88E,GAAkBlrB,EAAAA,GAAAA,GAAgB,KACjC35E,IACL6jG,EAAe,CAAEj9E,SAAU5mB,EAAQ4mB,SAAUC,SAAS,IACtDq9C,EAAgB,CACdtP,OAAQuP,EAAAA,GAAkBq/B,iBAC1BpjG,SACAsjE,oBAAoB,OAIlBohC,GAA0BnrB,EAAAA,GAAAA,GAAgB,KACzC35E,GACL8jG,EAAkB,CAChBl9E,SAAU5mB,EAAQ4mB,SAClB4yC,UAAWx5D,EAAQw5D,UACnBD,eAAgBv5D,EAAQu5D,eACxBE,YAAaz5D,EAAQy5D,gBAMnBsrC,GAAmBzuB,EAAAA,GAAAA,IAAQ,KAC/B,IAAI0uB,EACAC,EAEAzF,EAAQ,GAEZ,GAAI36F,GAASC,EAAO,CAClB,IAAIrF,EACAoF,EACFpF,GAAQylG,EAAAA,GAAAA,IAAyB,CAC/B/yF,MAAOtN,EACP4gF,aACChmF,MACMqF,IACTrF,GAAQylG,EAAAA,GAAAA,IAAyB,CAC/B/yF,MAAOrN,EACP2gF,aACChmF,OAGDA,IACEA,EAAQ0lG,GAAAA,KACVF,EAAexlG,GAEjBulG,EAAkBrlG,KAAKE,KAAIulG,EAAAA,GAAAA,MAAoB3lG,GAEnD,CAMA,OAJIulG,IACFxF,EAAQ,UAAUwF,EA/BD,OAkCZ,CACLC,eAAcI,gBA9BO,EA8BS7F,UAE/B,CAAC36F,EAAOC,EAAO2gF,KAEZ,aACJwf,EAAY,MAAEzF,GACZuF,EAEJ,GAAK/kG,GAAYA,EAAQ2E,QAqEzB,OACE4xE,EAAAA,GAAAA,IAAA,OACE0C,IAAKA,EAELlmD,UAAU,wDAAuDoiD,SAAA,EAEjEoB,EAAAA,GAAAA,IAAA,OACExjD,UAAU,qEACV4jD,IAAI,OACJ6oB,MAAOA,EACP8F,YArKmBtpC,KACvBupC,EAAAA,GAAAA,GAAwBvpC,GACxBuoC,EAAwBvoC,IAoKpB28B,cAAeJ,EAAkBpjB,SAAA,EAEjCoB,EAAAA,GAAAA,IAACivB,GAAAA,EAAgB,CAACC,UAAWzlG,EAAQylG,UAAW1yE,UAAU,gBAAgB4jD,IAAI,OAAMxB,SAAA,CAjD1F,WACE,GAAKn1E,EAEL,OAAI6E,GAEAsvE,EAAAA,GAAAA,GAACuxB,GAAAA,EAAK,CACJ7gG,MAAOA,EACPkoC,MAAOA,EACP44D,YAAavC,EACbF,cAAeA,EACfgB,oBAAqBT,EACrBmC,WAAS,EACTlvB,QAAS6jB,EACTsL,YAAaZ,IAIfngG,GAEAqvE,EAAAA,GAAAA,GAAC2xB,GAAAA,EAAK,CACJhhG,MAAOA,EACP2+F,8BAA+BA,EAC/BC,8BAA+BA,EAC/BkC,WAAS,EACTD,YAAavC,EACb2C,YAAazC,EACbJ,cAAeA,EACfxsB,QAASiuB,EAAQpK,EAAcsK,EAC/BgB,YAAaZ,SAXnB,CAiBF,CAgBSe,GACAhmG,EAAQ6E,QACPsvE,EAAAA,GAAAA,GAACuM,GAAAA,EAAM,CACL9uB,KAAK,QACL/sD,MAAO7E,EAAQ6E,MACfkuB,WAAWkjD,EAAAA,GAAAA,GAAe,iBAAkBjjB,EAAK4jB,OAAS,aAG9DL,EAAAA,GAAAA,IAAA,QAAMxjD,WAAWkjD,EAAAA,GAAAA,GAAe,6BAA8B2uB,GAAY,aAAazvB,SAAA,CACpFn1E,EAAQimG,cAAgBjzC,EAAK,4BAA8BA,EAAK,qBACjEmhB,EAAAA,GAAAA,GAAC+xB,GAAAA,EAAW,CAACxvB,QAASouB,EAAyB/xE,UAAU,WAAUoiD,SAChEniB,EAAK,qCA1FlB,WACE,GAAKhzD,EACL,OACEu2E,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,6BAA6B4jD,IAAI,OAAMxB,SAAEn1E,EAAQ0O,QAC/D0G,QAAQpV,EAAQ2E,SAASiI,QACxBunE,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,yBAAyB4jD,IAAI,OAAOsC,IAAK8qB,EAAW5uB,UACjEhB,EAAAA,GAAAA,GAAA,QAAMphD,UAAU,qBAAqB4jD,IAAI,OAAMxB,UAC5CiG,EAAAA,GAAAA,IAAuB,CACtBxuE,KAAM5M,EAAQ2E,QAAQiI,KAAKA,KAC3B0J,SAAUtW,EAAQ2E,QAAQiI,KAAK0J,gBAMvC69D,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jD,UAAU,2BACV6+B,KAAK,OACLklB,MAAM,cACNqvB,eAAa,EACbzvB,QAAS6jB,EAAYplB,SAEpBn1E,EAAQktC,eAIjB,CAkESk5D,OAEHjyB,EAAAA,GAAAA,GAACkyB,GAAAA,EAAe,KAChB9vB,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,yBAAwBoiD,SAAA,EACrChB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jD,UAAU,wBACV+jD,MAAM,oBACNz/D,OAAK,EACLu6C,KAAK,OACLmlB,UAAW/jB,EAAK,SAChB0jB,QAASguB,EAA2BvvB,UAEpChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,QAAQrf,UAAU,4BAE9B/yB,EAAQw5D,YACP2a,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jD,UAAU,wBACV+jD,MAAM,oBACNz/D,OAAK,EACLu6C,KAAK,OACLmlB,UAAW/jB,EAAK,QAChB0jB,QAAS6hB,EACTI,cAAeJ,EAAkBpjB,UAEjChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,OAAOrf,UAAU,kCAKnCmvE,IACC/tB,EAAAA,GAAAA,GAAC0uB,GAA6B,CAC5BznD,OAAQk9C,EACRsK,OAAQV,EACRoE,WAAYrtB,EACZryD,SAAU5mB,EAAQ4mB,SAClB4yC,UAAWx5D,EAAQw5D,UACnBC,YAAaz5D,EAAQy5D,YACrBF,eAAgBv5D,EAAQu5D,eACxB+d,QAASkhB,EACT5J,oBAAqB6J,MAhErB,wBC6IV,IAAe9jB,EAAAA,GAAAA,IA3U0B4xB,EACvCC,aACApmG,SACAwG,WACAmH,aACA04F,gBACAC,qBACAC,mBACA5jG,WACA6jG,aACAC,gBACAhM,YACAiM,gBACAC,kBACAnB,YACAlJ,eACAsK,cACAC,+BACAC,uBACA9lG,OACA+lG,UACAC,gBACA/tC,aACAguC,0BACA7J,iBACAC,kBACA+D,wBACAjqF,gBACA+vF,qBACAC,gBACAC,2BACAvO,cAEA,MAAM,oBAAEwO,IAAwBxpF,EAAAA,EAAAA,MAE1BypF,EAAuBC,GAAAA,GACvBC,GAAaC,EAAAA,GAAAA,GAAiB,IAAMV,IAAYO,IAAwB,CAACP,EAASO,IAElFI,GAAqBvwF,IAAkB8hD,GAEvC,8BACJ0uC,EAA6B,8BAC7BtE,EAA6B,8BAC7BC,GLzGW,SACbtiG,EACAs7F,EACAwK,EACAM,EACApnG,GAEA,MAAM,oBACJ8O,EAAmB,iBAAE84F,EAAgB,sBAAEC,EAAqB,0BAC5DC,IACEjqF,EAAAA,EAAAA,OAEE,SAAEwnE,IAAaC,EAAAA,EAAAA,MACfyiB,EAAkC1iB,EAAW,IAAM,KAGvDwe,QAAS8D,EAA+BK,OAAQC,EAAkBC,SAAUC,IAC1EpE,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1H,EACT8L,WAtBsC,KAuBpC94F,IACF,GAAa,WAATtO,IAAqBqnG,EAAAA,GAAAA,KACvB,OAGF,IAAIt5F,EAAQ,EACZ,MAAMu5F,EAAuB,GACvBC,EAAwB,GACxBC,EAAmC,GACnCC,EAAsC,GACtCC,EAAmC,GAEzCp5F,EAAQxO,QAAS6nG,IACf,MAAM,eAAEtE,EAAc,OAAED,GAAWuE,GAE7B,QAAEC,GAAYxE,EACdv+F,EAAY2D,OAAOo/F,EAAQ7iG,eAAiB6iG,EAAQ/iG,WACpDgjG,EAAkD,SAA9BD,EAAQC,kBAC5BC,EAAcF,EAAQE,YAAct/F,OAAOo/F,EAAQE,kBAAe5gG,EAEnEm8F,GAODx+F,EAAYkJ,IACdA,EAAQlJ,GAGN+iG,EAAQx8B,kBACVk8B,EAAWj+F,KAAKxE,GAGd+iG,EAAQG,mBACVR,EAAYl+F,KAAKxE,GAGf+iG,EAAQ35F,UACVu5F,EAAuBn+F,KAAKy+F,GAAejjG,GAGzCgjG,GACFH,EAAuBr+F,KAAKy+F,GAAejjG,IAvBvC+iG,EAAQ35F,UACVw5F,EAA0Bp+F,KAAKy+F,GAAejjG,KA0BhDihG,EAAqBj0E,SAAW9jB,GAAS+3F,EAAqBj0E,SAChE/jB,EAAoB,CAAEC,UAGpBu5F,EAAW7nG,QACbmnG,EAAiB,CAAE5nG,SAAQ2N,WAAY26F,IAGrCC,EAAY9nG,QACdonG,EAAsB,CAAEl6F,WAAY46F,KAGlCC,EAAuB/nG,QAAUgoG,EAA0BhoG,SAC7D2mG,EAAyB,CAAEoB,yBAAwBC,8BAGjDC,EAAuBjoG,QACzBqnG,EAA0B,CAAE9nG,SAAQ2I,IAAK+/F,OAI7CM,EAAAA,GAAAA,GAAkBf,EAAkBE,GAEpC,MACEtE,QAASR,IACPU,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1H,EACT8L,WAAYjI,GACZlG,OAAQ8N,KAGFlE,QAASP,IAAkCS,EAAAA,GAAAA,IAAwB,CACzEC,QAAS1H,EACT8L,WAAYjI,KAGd,MAAO,CACLwH,gCACAtE,gCACAC,gCAEJ,CKHM2F,CAAoBjoG,EAAMs7F,EAAcwK,EAAsBM,EAA0BpnG,IAEtF,oBACJkpG,EAAmB,oBACnBC,EAAmB,mBACnBC,EAAkB,cAClBC,GCxGW,SACbroG,EACAs7F,EACA3uF,EACA24F,EACAC,EACA5jG,EACAukG,EACAC,EACAJ,GAEA,MAAM,qBAAE92F,IAAyB4N,EAAAA,EAAAA,OAE1ByrF,EAAmBC,IAAoBrzB,EAAAA,GAAAA,IAC5C,IAAgB,WAATl1E,EAAoB,EACzBgS,EAAAA,EAAAA,IAAS,IAAM/C,EAAqB,CAAEsG,UAAWO,EAAAA,GAAkBC,YAAc,KAAM,GAAM,IAC7F/D,EAAAA,EAAAA,IAAS,IAAM/C,EAAqB,CAAEsG,UAAWO,EAAAA,GAAkBI,WAAa,KAAM,GAAM,IAC1F,GAEJ,CAACjH,EAAsBtC,IAGnBw7F,GAAsBvwB,EAAAA,GAAAA,MACtBwwB,GAAqBxwB,EAAAA,GAAAA,MACrBywB,GAAgBzwB,EAAAA,GAAAA,MAEhB4wB,GAAoBjwB,EAAAA,GAAAA,GAAgB,KACxC,IAAKwtB,EAAS,OAEd,IAAKp5F,GAAYlN,OAGf,OAFAymG,GAAmB,QACnBC,GAAc,GAIhB,IAAKZ,EAGH,OAFAW,GAAmB,QACnBC,GAAc,GAIhB,MAAMpN,EAAYuC,EAAazpE,QACzB42E,EAAaJ,EAAcx2E,QACjC,IAAKknE,IAAc0P,EAAY,OAE/B,MAAM,aAAEC,EAAY,aAAEC,EAAY,UAAEC,GAAc7P,EAC5C8P,EAAeJ,EAAWK,UAC1BC,EAAexqG,KAAK0X,MAAM4yF,EAAeD,EAAYF,GAErDM,EAAaD,GArDC,EAuDC,IAAjBJ,IAEJzC,EAAmBvkG,GAAYqnG,IALVD,GArDH,KA2DlB5C,GAAe6C,OAIfnG,QAASoG,IACPlG,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1H,EACTrC,OAAQiQ,EAAAA,IACN56F,IACGi6F,GAAqBD,GAI1Bh6F,EAAQxO,QAAQ,EAAGujG,iBAAgBD,aAC5BC,IAEoB,sBAArBD,EAAOzxE,WACT22E,IAGuB,qBAArBlF,EAAOzxE,WACT42E,SAKAL,EAAsBv7F,GAAcA,EAAWlN,OAAS,GAE9D0pG,EAAAA,GAAAA,IAAehB,EAAqBD,EAAsBe,OAAgC/hG,IAC1FiiG,EAAAA,GAAAA,IAAef,EAAoBF,EAAsBe,OAAgC/hG,GAEzF,MACE27F,QAASuG,EACTpC,OAAQqC,EACRnC,SAAUoC,IACRvG,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1H,EACTrC,OAAQsQ,IACRC,kBAAmBC,GAAAA,IAClBjB,IAEHW,EAAAA,GAAAA,IAAed,EAAee,GAE9B,MACEvG,QAAS6G,EACT1C,OAAQ2C,EACRzC,SAAU0C,IACR7G,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1H,EACTrC,OA3GoB,EA4GpBuQ,kBAAmBC,GAAAA,IAClBjB,IAEHW,EAAAA,GAAAA,IAAed,EAAeqB,IAE9B71B,EAAAA,GAAAA,IAAU,KACJkyB,GACFyC,KAED,CAACzC,EAASyC,IAEb,MAAMqB,GAAgBtxB,EAAAA,GAAAA,GAAgB,KACpC8wB,IACAM,IAEA7gG,WAAW,KACT8gG,IACAN,KA3HuB,QAgI3BnU,EAAAA,GAAAA,GAAc0U,EAAe,CAACA,EAAel9F,IAG7C,MAAMm9F,GAA8BC,EAAAA,GAAAA,IAAmBzE,EApIvB,KAuIhC,OAFA0E,EAAAA,GAAAA,GAAgBH,EAAe,CAACA,EAAeC,IAExC,CACL5B,sBACAC,sBACAC,qBACAC,gBAEJ,CDjCM4B,CACFjqG,EACAs7F,EACA3uF,EACA24F,EACAC,EACA5jG,EACAukG,EACAC,EACAJ,GAGInlB,IAAUjM,EAAAA,GAAAA,KACV/iB,IAAOgiB,EAAAA,GAAAA,KAEPs2B,IACJn3B,EAAAA,GAAAA,GAAA,OAAKphD,WAAWkjD,EAAAA,GAAAA,GArES,iBAqE4B,wBAAwBd,UAC3EhB,EAAAA,GAAAA,GAAA,QAAAgB,SAAO6M,GAAQ,qBADiE,mBAI9EupB,GAA0BA,CAACvrG,EAAqBwrG,KACpD,GAAIxrG,EAAQi8F,iBAAkB,CAC5B,MAAMwP,EAAiBD,GAAOl8F,UAAUzO,QAAU,EAC5Cge,EAAS7e,EAAQi8F,iBAAmBwP,EAC1C,OACEt3B,EAAAA,GAAAA,GAAA,OACEphD,WAAWkjD,EAAAA,GAAAA,GAAe,wBAAwBd,UAGlDhB,EAAAA,GAAAA,GAAA,QAAAgB,SAEIn1E,EAAQqC,WACJ2wD,GAAK,+BAAgC,CACrCn0C,QAAQC,EAAAA,EAAAA,GAAkBk0C,GAAMn0C,KAEhC,MACA,MAAMguB,GAASC,EAAAA,EAAAA,MAAa3iC,EAAAA,EAAAA,MAAanK,GACnC0rG,EAAY7+D,GAAS2mB,EAAAA,EAAAA,IAAaR,GAAMnmB,GAAU,GACxD,OAAOmmB,GAAK,+BAAgC,CAC1Cr/C,KAAM+3F,EACN7sF,QAAQC,EAAAA,EAAAA,GAAkBk0C,GAAMn0C,IAEnC,EAPC,MARH,wBAAwB7e,EAAQsB,KAoB3C,GAGIqqG,GAAwBnK,EAAwB,EAAIiF,EAAc/pF,OAAO,CAACC,EAAKivF,IAC5EjvF,EAAMivF,EAAazQ,aAAa0Q,OAAOhrG,OAC7C,GACH,IAAIirG,GAAkB,EAEtB,MAAMC,IAAiBC,EAAAA,GAAAA,GAAsBj+F,GACvCk+F,GAAe72F,QACnBrH,GAAcg+F,IAAkBh+F,EAAWA,EAAWlN,OAAS,KAAOkrG,GAAeA,GAAelrG,OAAS,IA4JzGk6F,GAAa0L,EAAc74F,IAAI,CACnCs+F,EACAC,EACAC,KAEA,MAAMjR,EA9JR,SACE+Q,EAA6BC,EAAwBC,GAErD,OAAOF,EAAU/Q,aAAavtF,IAAI,CAChCy+F,EACAC,EACAC,KAEA,GACyB,IAAvBF,EAAYxrG,SACR25F,GAAQ6R,EAAY,MACrB3kG,EAAAA,EAAAA,IAAgB2kG,EAAY,KACY,cAAxCA,EAAY,GAAG1nG,QAAQ0E,QAAQjI,KAClC,CACA,MAAMpB,EAAUqsG,EAAY,GACtBG,EACJF,IAAqBC,EAAkB1rG,OAAS,GAC7CsrG,IAAmBC,EAAgBvrG,OAAS,EAGjD,OAAOk1D,EAAAA,EAAAA,IAAQ,CACb/1D,EAAQsB,KAAO2lG,EAA6Bh0E,SAAWq4E,IACvDn3B,EAAAA,GAAAA,GAACs4B,GAAAA,EAAa,CAEZzsG,QAASA,EACT4G,SAAUA,EACV8lG,6BAA8B3E,EAC9BtE,8BAA+BA,EAC/BC,8BAA+BA,EAC/BwD,qBAAsBA,EACtB7F,gBAAiBsK,KAA0BG,GAC3Ca,YAAaH,GAAgBP,GAC7BO,aAAcA,EACdI,sBAAuBhF,EACvBJ,yBAA0BA,GAXrBxnG,EAAQsB,KAcnB,CAEA,IAAIurG,EAEJ,MAAMC,EAAsBT,EAAYz+F,IAAI,CAC1C6sF,EACAsS,KAEA,MAAM/sG,EAAUw6F,GAAQC,GAAkBA,EAAekB,YAAclB,EACjE+Q,EAAQhR,GAAQC,GAAkBA,OAAiBnyF,EACnDvH,GAAQisG,EAAAA,EAAAA,IAAahtG,GACrBitG,EAAiBzS,GAAQC,GACzBoB,EAAcwQ,EAAYU,EAAe,GAE3C/sG,EAAQ0I,iBAAmBs+F,EAAY/zE,WAAYi6E,EAAAA,EAAAA,IAAiBltG,EAAQ0I,mBAC9Es+F,EAAY/zE,SAAUi6E,EAAAA,EAAAA,IAAiBltG,EAAQsB,KAGjD,MAAM6rG,GAAmBF,GAAkBjtG,EAAQqd,UAAYrd,EAAQqd,eAAY/U,EAC7E8kG,EAAsBvR,IAAgBrB,GAAQqB,GAAeA,EAAYx+E,eAAY/U,EACrF+kG,EAAoBrtG,EAAQsB,KAAOsF,EAEnC2pD,EAAW,CACf+8C,eAAiC,IAAjBP,EAChBQ,cAAeR,IAAiBV,EAAYxrG,OAAS,EACrD2sG,uBAAwBp4F,QAAQ+3F,GAAmBA,IAAoBN,GACvEY,sBAAuBr4F,QAAQ+3F,GAAmBA,IAAoBC,GACtEZ,aACEO,IAAiBV,EAAYxrG,OAAS,GACnCyrG,IAAqBC,EAAkB1rG,OAAS,GAChDsrG,IAAmBC,EAAgBvrG,OAAS,GAInDgsG,EAAyBM,EAEzB,MAAMO,GAAaC,EAAAA,EAAAA,IAAqB3tG,GAElCyO,GAAMmH,EAAAA,EAAAA,IAA6B5V,GAAW,GAAGA,EAAQgU,QAAQ05F,IAAeA,EAEhFE,GAA+B,IAAlBxG,IAA4BN,GAAiB1xF,QAAQ2xF,GAExE,OAAOhxC,EAAAA,EAAAA,IAAQ,CACb/1D,EAAQsB,KAAO2lG,EAA6Bh0E,SAAWq4E,GACvDtrG,EAAQi8F,mBAAqBpB,GAAa0Q,GAAwBvrG,EAASwrG,IAC3Er3B,EAAAA,GAAAA,GAAC05B,GAAAA,EAAO,CAEN7tG,QAASA,EACT0sG,6BAA8B3E,EAC9BtE,8BAA+BA,EAC/BC,8BAA+BA,EAC/B8H,MAAOA,EACP5F,UAAWA,EACXnF,WAAYlwC,EAASg9C,eAAiB1S,IAAc95F,KAAWssG,IAAsBzG,GACrFkH,eAAgBv9C,EAAS+8C,gBAAkBzS,IAAc95F,EACzD6F,SAAUA,EACV+H,gBAAiBvN,EACjBwsG,WAAYA,EACZG,WAAYH,GAAchnG,IAAaD,EAAAA,IAA2B,cAATvF,EACzDigG,gBAAiBsK,KAA0BG,GAC3Ca,YAAap8C,EAASi8C,cAAgBP,GACtCqB,eAAgB/8C,EAAS+8C,eACzBC,cAAeh9C,EAASg9C,cACxBC,uBAAwBj9C,EAASi9C,uBACjCC,sBAAuBl9C,EAASk9C,sBAChCjB,aAAcj8C,EAASi8C,aACvBtF,qBAAsBA,EACtBM,yBAA0BA,EAC1BoF,sBAAuBhF,GAtBlBn5F,GAwBPzO,EAAQsB,KAAOsF,IAEbutE,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,uBAAsBoiD,UACnChB,EAAAA,GAAAA,GAAA,QAAAgB,SACG6M,GAAQ6kB,EACJD,EAAa,aAAe,YAAe,wBAHV,0BAQ7CiF,OAEH,IAAKhR,EAAW,OAAOiS,EAEvB,MAAMkB,EAAqB3B,EAAYA,EAAYxrG,OAAS,GACtD2L,EAAcguF,GAAQwT,GAAsBA,EAAmBrS,YAAcqS,EAC7E7nG,GAAgBwnG,EAAAA,EAAAA,IAAqBnhG,GACrCyhG,EAAsBtC,GAAwBG,GAE9CuB,EAAoB7gG,EAAYlL,KAAOsF,EACvC7F,GAAQisG,EAAAA,EAAAA,IAAaxgG,GAErB0hG,EAAsB7B,EAAY,GAClC/tF,EAAek8E,GAAQ0T,GAAuBA,EAAoBvS,YAAcuS,EAChF9tE,GAAiButE,EAAAA,EAAAA,IAAqBrvF,GAEtC7P,EAAM,GAAG2xB,KAAkBj6B,IAC3B7E,EAAM8+B,IAAmBj6B,EAAiB,iBAAiBi6B,IAC7D,iBAAiBA,KAAkBj6B,IAEjCs6F,EAAa5F,IAAc95F,KAAWssG,IAAsBzG,GAClE,OACEzyB,EAAAA,GAAAA,GAACitB,GAAoB,CAEnB9/F,GAAIA,EACJtB,QAASwM,EACTi0F,WAAYA,EACZY,gBAAiB4M,EACjBhV,QAASA,EAAQ9jB,SAEhB23B,GAPIr+F,IAWb,CAOuB0/F,CAAsBjC,EAAWC,EAAgBC,GAEtE,OACE71B,EAAAA,GAAAA,IAAA,OACExjD,WAAWkjD,EAAAA,GAAAA,GAAe,uBAAwBunB,GAAkBC,IAC9C,IAAnB0O,GAAwB,4BAE3B7G,YAAaC,GAAAA,EACb6I,eAAa,EAAAj5B,SAAA,EAEbhB,EAAAA,GAAAA,GAAA,OACEphD,WAAWkjD,EAAAA,GAAAA,GAAe,cAAe6xB,GAAqB,eAE9DxC,YAAaC,GAAAA,EACb7uB,QAASoxB,EAAoB,IAAML,EAAoB,CAAE1pC,WAAYmuC,EAAUjR,gBAAc3yF,EAAU6sE,UAEvGoB,EAAAA,GAAAA,IAAA,QAAMI,IAAI,OAAMxB,SAAA,CACb9b,GAAc6yC,EAAUlR,eAAiBqT,EAAAA,KACxCrsB,GAAQ,+BAET3oB,GAAc6yC,EAAUlR,eAAiBqT,EAAAA,KACxCrsB,GAAQ,sBAAsBssB,EAAAA,GAAAA,IAAgBtsB,GAASkqB,EAAUjR,cAAU3yF,GAAW,KAEtF+wD,IAAci1C,EAAAA,GAAAA,IAAgBtsB,GAASkqB,EAAUjR,cAXjD,eAcLE,EAAa0Q,SApBTK,EAAUjR,YAyBrB,OACE1kB,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,qBAAqBq7E,eAAa,EAAAj5B,SAAA,CAC9Cm0B,IAAuBn1B,EAAAA,GAAAA,GAAA,OAAK8E,IAAKswB,EAA6Cx2E,UAAU,qBAA9B,qBAC1Ds0E,IACIlzB,EAAAA,GAAAA,GAACgpB,GAAsB,CAAgC/8F,OAAQA,EAAQg9F,aAAW,GAArD,gBAAgBh9F,KACjD26F,GAAW8Q,OACXvC,IACCn1B,EAAAA,GAAAA,GAAA,OACE8E,IAAKuwB,EAELz2E,UAAU,oBADN,qBAIRohD,EAAAA,GAAAA,GAAA,OACE8E,IAAKwwB,EAEL12E,UAAU,eADN,eAGLyzE,GAAcG,IACbxyB,EAAAA,GAAAA,GAACqvB,GAAgB,CAEfpjG,OAAQA,EACRs8F,aAAcA,EACd+G,8BAA+BA,EAC/BC,8BAA+BA,GAJ1BtjG,Q,gBE5Xf,MAAMmuG,GAAY,EAAI7vG,EAAAA,EA+FtB,IAAei2E,EAAAA,GAAAA,IArFkB65B,EAC/B5T,iBACAx5F,OACAqtG,yBACAtmG,YAEA,MAAM6qD,GAAO+iB,EAAAA,GAAAA,KAEb,MAAa,cAAT30E,EAqCN,SAAyB4xD,GACvB,OACEmhB,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,QAAOoiD,UAAChB,EAAAA,GAAAA,GAAA,QAAAgB,SAAOniB,EAAK,yCAEvC,CAxCW07C,CAAgB17C,GAGrB4nC,EAuCN,SAA6B5nC,GAC3B,OACEmhB,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,aAAYoiD,UACzBoB,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,UAASoiD,SAAA,EACtBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,iBAAiBrf,UAAU,sBACtCohD,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAEniB,EAAK,0CAC5BujB,EAAAA,GAAAA,IAAA,MAAIxjD,UAAU,cAAaoiD,SAAA,EACzBhB,EAAAA,GAAAA,GAAA,MAAAgB,SAAKniB,EAAK,iDACVmhB,EAAAA,GAAAA,GAAA,MAAAgB,SAAKniB,EAAK,iDACVmhB,EAAAA,GAAAA,GAAA,MAAAgB,SAAKniB,EAAK,iDACVmhB,EAAAA,GAAAA,GAAA,MAAAgB,SAAKniB,EAAK,uDAKpB,CArDW27C,CAAoB37C,GAGzBy7C,EAoDN,SAAqBz7C,GACnB,OACEmhB,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,aAAYoiD,UACzBoB,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,UAAU4jD,IAAK3jB,EAAK4jB,MAAQ,WAAQtuE,EAAU6sE,SAAA,EAC3DhB,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAEniB,EAAK,2BAC5BmhB,EAAAA,GAAAA,GAAA,KAAGphD,UAAU,cAAaoiD,SAAEniB,EAAK,8BACjCujB,EAAAA,GAAAA,IAAA,MAAIxjD,UAAU,kBAAiBoiD,SAAA,EAC7BhB,EAAAA,GAAAA,GAAA,MAAAgB,SAAKniB,EAAK,2BACVmhB,EAAAA,GAAAA,GAAA,MAAAgB,SAAKniB,EAAK,2BACVmhB,EAAAA,GAAAA,GAAA,MAAAgB,SAAKniB,EAAK,2BACVmhB,EAAAA,GAAAA,GAAA,MAAAgB,SAAKniB,EAAK,iCAKpB,CAlEW47C,CAAY57C,GAGjB7qD,EASN,SAAqB6qD,EAAiB7qD,GACpC,OACEgsE,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,aAAYoiD,UACzBoB,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,UAASoiD,SAAA,EACtBhB,EAAAA,GAAAA,GAAC06B,GAAAA,EAAS,CACR1mG,MAAOA,EACPypD,KAAM28C,GACNx7E,UAAU,iCAEZohD,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAEniB,EAAK,uCAC5BmhB,EAAAA,GAAAA,GAAA,KAAGphD,UAAU,gCAA+BoiD,UAAE6pB,EAAAA,GAAAA,GAAWhsC,EAAK,mCAAoC,CAAC,aAI3G,CAtBW87C,CAAY97C,EAAM7qD,IAIzBgsE,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,QAAOoiD,UAAChB,EAAAA,GAAAA,GAAA,QAAAgB,SAAOniB,EAAK,oB,wCCnDvC,MCoGA,IAAe2hB,EAAAA,GAAAA,KACb6C,EAAAA,EAAAA,IAAqB,CAACx4E,GAAUgC,OAAQ0e,MACtC,MAAMqtB,GAAQq0C,EAAAA,EAAAA,KAAYpiF,IACpB,aAAE+vG,IAAiBC,EAAAA,EAAAA,KAAkBhwG,EAAQ+tC,IAAU,CAAC,EAG9D,MAAO,CACLgiE,eACA71F,MAJWC,EAAAA,EAAAA,KAAWna,EAAQ0gB,KAHlC83D,CAtEF,UAAqC,aACnCu3B,EAAY,KAAE71F,EAAI,kBAAEG,IAEpB,MAAM2oE,GAAUjM,EAAAA,GAAAA,KACV/iB,GAAOgiB,EAAAA,GAAAA,MACP,iBAAEjuD,EAAgB,sBAAEmuB,IAA0Bj3B,EAAAA,EAAAA,MAE9CgxF,GAAyBt1B,EAAAA,GAAAA,GAAgB,IAAM5yD,KAE/CmoF,GAAqBv1B,EAAAA,GAAAA,GAAgB,KACzCzkC,EAAsB,CAAC,KAGzB,GAAKh8B,EAEL,OACEi7D,EAAAA,GAAAA,GAAA,OAAKphD,UD/Cc,WC+CSoiD,UAC1BoB,EAAAA,GAAAA,IAAA,OAAKxjD,UDhDyE,WCgDjDoiD,SAAA,EAC3BoB,EAAAA,GAAAA,IAAA,OAAKxjD,UDjDgI,WCiD/FoiD,SAAA,EACpChB,EAAAA,GAAAA,GAACg7B,GAAAA,EAAuB,CACtBC,OAAQC,GAAAA,EAAeC,OACvB19C,KAAM,GACNklB,MAAOi4B,EACPh8E,UDtD0L,cCwD5LohD,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,mBAAmBrf,UDxDmN,iBC0DnPohD,EAAAA,GAAAA,GAAA,QAAMphD,UD1DsQ,WC0DxOoiD,SAEhC97D,EACI25C,GAAKvsC,EAAAA,EAAAA,IAAcvN,GAAQ,8BAAgC,iCAAkC,CAC7FA,MAAMs6C,EAAAA,EAAAA,IAAaR,EAAM95C,GACzB2F,QAAQ0wF,EAAAA,EAAAA,GAAkBv8C,EACxB35C,EACA,CACEm2F,QAAQ,EACRz8E,UDnEqT,WCoErT08E,mBDpE+R,cCsElS,CACD7Q,WAAW,EACXC,cAAc,KAEdG,EAAAA,GAAAA,GAAWhd,EAAQ,wBAAwBxuB,EAAAA,EAAAA,IAAaR,EAAM95C,IAAQ,CAAC,uBAG/Ei7D,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLC,MAAM,oBACNllB,KAAK,UACL89C,MAAI,EACJh5B,QAASr9D,EAAoB61F,EAAqBD,EAClDl8E,UDlFiC,WCkFRoiD,SAGvB97D,GAEIk9D,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,CACGniB,EAAK,mBACNmhB,EAAAA,GAAAA,GAACw7B,GAAAA,EAAQ,CAACC,OAAO,cAGnB5tB,EAAQ,8BAMxB,IC+DM6tB,IAAwBz8F,EAAAA,EAAAA,IAAUC,GAAOA,IANvB,KAM8C,GA2mBtE,IAAeshE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUoB,SAAQwG,WAAUxF,WAC3B,MAAMH,EAAgBjC,EAAOiC,cACvBmB,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1B2lC,GAAexsB,EAAAA,EAAAA,KAAmBva,EAAQoB,GAChD,IAAKgC,EACH,MAAO,CAAEnB,iBAGX,MAAM8M,GAAa+hG,EAAAA,EAAAA,KAAwB9wG,EAAQoB,EAAQwG,EAAUxF,GAC/D8O,EAAwB,cAAT9O,GACjBuM,EAAAA,EAAAA,KAA4B3O,EAAQoB,IACpCwI,EAAAA,EAAAA,KAAmB5J,EAAQoB,GAEzBmX,GAAgB7M,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU3F,GAEzD,KACE2F,IAAaD,EAAAA,IAAmB4Q,GAAkBnV,GAAMgG,SACnD8H,GAAgBtJ,GAAYsJ,EAAatG,OAAOhD,KAErD,MAAO,CAAE3F,iBAGX,MAAM,aAAE8Z,EAAY,kBAAEg1F,GAAsB3tG,EACtCoK,GAAc4vF,EAAAA,EAAAA,KAAsBp9F,EAAQoB,EAAQmX,EAAgB,QAAU,OAC9Ey4F,GAAa90F,EAAAA,EAAAA,KAAuBlc,EAAQoB,GAE5C6vG,EACJrpG,IAAaD,EAAAA,KACToH,IAAe3L,EAAKqE,cAAgBupG,GAAcxjG,IAAgBA,EAAY6Q,UAG9E6yF,GAAU1iE,EAAAA,EAAAA,KAAUxuC,EAAQoB,GAC5B+vG,EAAe/6F,QAAQ2wB,GAAc/H,UAAUoyE,eAC/C5S,EAAiBz3D,GAAc/H,UAAUw/D,eACzCC,EAAkB13D,GAAc/H,UAAUy/D,gBAE1Ct1F,GAAQgB,EAAAA,EAAAA,KAAYnK,EAAQoB,EAAQwG,GACpCwY,GAAgBjP,EAAAA,EAAAA,IAAS/P,QAA+CkI,GAArC+W,EAAAA,EAAAA,KAAmBrgB,EAAQoB,GAC9DymG,IAAiBp9F,EAAAA,EAAAA,KAAiBzK,EAAQoB,EAAQwG,IAAWgB,cAG7D4f,IADuBxS,EAAAA,EAAAA,KAA2BhW,KACTua,EAAAA,EAAAA,KAAmBva,EAAQiC,IAAgBumB,cACpFmuD,GAAkBtyD,EAAAA,EAAAA,KAA0BrkB,GAE5CqxG,EAAoBj7F,QAAQ2wB,GAAcw2D,eAC1C+T,EAAoBtxG,EAAOsxG,kBAE3BC,GAAqBC,EAAAA,EAAAA,KAAuBxxG,EAAQoB,IAASkB,GAC7DmvG,GAAeC,EAAAA,EAAAA,KAAuB1xG,EAAQoB,KAAYgf,GAAcuxF,sBACxEC,EAAsBxuG,GAAMyuG,mBAC5B1lF,GAAsBH,EAAAA,EAAAA,KAA0BhsB,GAEtD,MAAO,CACLwoB,gBACAspF,cAAc,EACd/1F,eACAg1F,oBACAjJ,eAAe/lF,EAAAA,EAAAA,IAAc3e,GAC7B2kG,iBAAiBA,EAAAA,EAAAA,IAAgB3kG,GACjC2uG,aAAap8E,EAAAA,EAAAA,IAAYvyB,GACzB4uG,qBAAsB5uG,EAAK6uG,iBAC3BC,UAAW9uG,EAAK8uG,UAChBtW,gBAAgBz6F,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAC7CsgG,iBAAiBC,EAAAA,EAAAA,IAAYvgG,GAC7BwgG,qBAAqBC,EAAAA,EAAAA,IAAwBzgG,GAC7C+wG,MAAO/7F,QAAQ86F,GACfC,eACA3S,iBACAC,kBACA5jE,SAAU76B,EAAO66B,SACjB9rB,aACAmC,eACAhJ,eAAeC,EAAAA,EAAAA,KAAoBnI,EAAQoB,EAAQwG,GACnD+/F,iBAA2B,WAATvlG,IAAqB6F,EAAAA,EAAAA,KAAuBjI,EAAQoB,EAAQwG,GAC9EopG,aACAoB,oBAAoBC,EAAAA,EAAAA,KAAqBryG,GACzCooG,cAAehoF,EAAehK,QAAQgK,EAAakyF,mBAAgBhpG,EACnEipG,gBAAiBnyF,GAAcoyF,SAC/BrpG,QACAspG,4BAA4BzuG,EAAAA,EAAAA,KAA+BhE,EAAQ,4BACnE0yG,2BAA4BtxG,IAAW6Q,EAAAA,IACvC7I,QAAShG,EAAKgG,QACdy+F,gBACA5lG,gBACA0wG,iBAAiBC,EAAAA,EAAAA,KAAsB5yG,EAAQoB,MAC3C6vG,GAAiC,CAAEzjG,eACvCmpE,kBACA06B,oBACAC,oBACAC,qBACAE,eACAtlF,sBACAylF,wBA7Fcp5B,CAzmB2Bq6B,EAC7CzxG,SACAwG,WACAxF,OACA0vG,eACA1oG,UACA0+F,gBACAiK,cACAC,uBACA/X,UACAp/D,WACAktE,kBACAI,UACAvM,iBACA8F,kBACAE,sBACAsQ,YACAC,QACAhB,eACA3S,iBACAC,kBACA1vF,aACAmC,eACAhJ,gBACA0/F,aACAD,mBACA5rF,eACAg1F,oBACAlJ,gBACAmJ,aACAoB,qBACA5kG,cACA46F,gBACA0K,kBACAC,gBACA5pG,QACAspG,4BACAC,6BACAzwG,gBACA+wG,0BACA34F,oBACAmO,gBACA+pF,kBACAI,kBACAh8B,kBACA06B,qBACAE,sBACAD,qBACAG,gBACAtlF,uBACAylF,uBACApJ,4BACAF,sBACAC,qBAEA,MAAM,qBACJl3F,GAAoB,gBAAE4hG,GAAe,sBAAEC,GAAqB,qBAAEC,GAAoB,kBAAEC,GAAiB,iBACrGxmF,GAAgB,qBAAEymF,GAAoB,eAAEC,GAAc,uBAAEC,KACtDt0F,EAAAA,EAAAA,MAEEy+E,IAAe1jB,EAAAA,GAAAA,MAIfw5B,IAAkBx5B,EAAAA,GAAAA,IACZ,WAAT53E,IAAqBqxG,EAAAA,EAAAA,MAAmBtoG,EAAAA,EAAAA,MAAa/J,EAAQwG,KAC3D8rG,EAAAA,EAAAA,MAAuBvoG,EAAAA,EAAAA,MAAa/J,EAAQwG,IAC5C,GAGCogG,IAAchuB,EAAAA,GAAAA,MACd25B,IAAe35B,EAAAA,GAAAA,MACf45B,IAAsB55B,EAAAA,GAAAA,MACtBkuB,IAAuBluB,EAAAA,GAAAA,MACvBiuB,IAA+BjuB,EAAAA,GAAAA,MAC/B65B,IAAoB75B,EAAAA,GAAAA,MACpB85B,IAA4B95B,EAAAA,GAAAA,KAAO,GACnC+5B,IAA6B/5B,EAAAA,GAAAA,IAAO5jE,QAAQ5I,IAE5C+K,IAAgB7M,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU3F,GACnD+xG,GAAoBz7F,IAAiB3Q,IAAaqsG,EAAAA,IAElDj0E,GAAoB5pB,QAAQrH,GAE5BnL,IAAYuN,EAAAA,EAAAA,IAAS/P,GACrBy6F,GAAYzlF,SAAUxS,KAAckkG,GACrClM,GAAkB8F,GAAmBE,GAAuBoQ,IAEjEza,EAAAA,GAAAA,GAAc,KAERv3D,KACF96B,EAAAA,EAAAA,IAAU,KACR6uG,GAA2B9/E,SAAU,KAGxC,CAAC+L,MAGJu3D,EAAAA,GAAAA,GAAc,KACZ2Q,GAAqBj0E,QAAU/rB,GAC9B,CAACA,KAEJ+tE,EAAAA,GAAAA,IAAU,KAEJztD,IADes/E,GAAiBqK,IACDt3E,GAAYstE,GAAWmJ,IACxD4B,GAAsB,CAAElxG,OAAQZ,KAEjC,CAACA,EAAQy5B,EAAUstE,EAASL,EAAeqK,EAAO3pF,EAAe8oF,MAGpE/Z,EAAAA,GAAAA,GAAc,KACRv3D,KACFioE,GAA6Bh0E,QAAUi0E,GAAqBj0E,UAE7D,CAAC+L,MAEJu3D,EAAAA,GAAAA,GAAc,KACZsc,GAAkB5/E,QAAU+8E,GAC3B,CAACA,KAGJ/6B,EAAAA,GAAAA,IAAU,KACH27B,IAAwBH,IAC7B8B,GAAuB,CAAEnyG,SAAQ0S,eAAgBqY,MAChD,CAACylF,GAAqBH,GAActlF,GAAqB/qB,IC1RvBgyG,KACrC,MAAMc,GAAav5B,EAAAA,GAAAA,GAAiB3d,IAClC,MAAMjuD,GAAaolG,EAAAA,GAAAA,KAEfplG,GAAcA,EAAWlN,OAAS,IACpCm7D,EAAE6X,iBACFu+B,EAAkB,CAAErkG,mBAIxB46E,EAAAA,GAAAA,IAAWrS,EAAAA,GAAAA,IAAQ,KAAM,CACvB,QAAS48B,IACP,MDgRJE,CAA8BhB,IAE9B,MAAM3L,IAAgBnwB,EAAAA,GAAAA,IAAQ,KAC5B,IAAKvoE,GAAYlN,SAAWqP,EAC1B,OAGF,MAAMmjG,EAA+B,GACrCtlG,EAAW7M,QAAQ,CAACI,EAAImX,EAAOmE,KAC7B,MAAM02F,EAAcD,EAAeA,EAAexyG,OAAS,GAErDb,EAAUkQ,EAAa5O,GAC7B,IAAKtB,EACH,OAGF,MAAM,wBAAEuzG,EAAuB,oCAAEC,GAAwC,MACvE,GAAKjC,GAA4B,WAATnwG,EACxB,OAAIkyG,GACCA,EAAYt/F,KAAOu9F,EAAgBkC,YAAclC,EAAgBkC,YAAczzG,EAAQgU,KACnF,CAAEu/F,yBAAyB,EAAMC,qCAAqC,GAG3E/6F,IAAUmE,EAAI/b,OAAS,GAAKb,EAAQgU,KAAOu9F,EAAgBkC,WACtD,CACLF,yBAAyB,EACzBC,qCAAqC,QAHzC,CAQD,EAfwE,IAejE,CAAC,EAMT,GAJIA,GACFH,EAAe5oG,KAAKzK,GAGlBuzG,EAAyB,CAC3B,MAAMptG,EAAgBqtG,EAAsCxzG,EAAQsB,GAAMgyG,GAAahyG,IAAOtB,EAAQsB,GAAK,EAC3G+xG,EAAe5oG,KAAK,CAClBnJ,GAAIoyG,GAA6BvtG,GACjC/F,OAAQJ,EAAQI,OAChB4T,KAAMu9F,EAAiBkC,WACvBpxG,YAAY,EACZsC,QAAS,CACP0E,OAAQ,CACN+I,UAAW,SACXhR,KAAM,gBACNuyG,UAAWpC,GAAiBoC,UAC5BC,aAAcrC,GAAiBqC,mBAAgBtrG,KAIvD,CAEKkrG,GACHH,EAAe5oG,KAAKzK,KAKxB,MAAM6zG,EAA2C,cAATzyG,GAAwBswG,EAC5D,CAAC,OAAQ,MACT,CAAC,MAEL,OAAO2B,EAAexyG,OAClB65F,IACAoZ,EAAAA,EAAAA,IAAQT,EAAgBQ,GACxB5M,GAA6Bh0E,QAC5B7qB,OAA6BE,EAAnBsB,OAAOhD,GAClBg0F,EACAC,SAEAvyF,GACH,CAACuyF,GACF9sF,EAAYmC,EAAc9O,EAC1BswG,EAA4BtpG,EAC5BxB,EAAUg0F,EAAgB2W,KAE5BwC,EAAAA,GAAAA,GAAY,KACV,IAAKhmG,IAAemC,GAAyB,cAAT9O,GAAwBu0E,EAAiB,OAC7E,IAAKmxB,IAAkBiK,EAAa,OAEpC,MAAMhoG,EAAMgF,EAAWjN,OAAQQ,IAC7B,MAAMtB,EAAUkQ,EAAa5O,GAC7B,OAAOtB,GAAWA,EAAQM,WAAWC,QAAQM,SAAWb,EAAQ2E,QAAQ0E,SAGrEN,EAAIlI,QAETsxG,GAAqB,CAAE/xG,SAAQ2I,SAtOQ,MAyOzCgrG,EAAAA,GAAAA,GAAY,KACV,IAAKhmG,IAAemC,GAAyB,cAAT9O,EAClC,OAEF,MAAM4yG,EAAgBjmG,EAAWH,IAAKtM,GAAO4O,EAAa5O,IAAKqD,QAAQ+G,WAAW5K,OAAOsU,SAEzF,IAAK4+F,EAAcnzG,OAAQ,OAE3B,MAAMozG,EAAmBD,EAAct3F,OAAO,CAACC,EAAKjR,KAClD,MAAM,OAAE1K,EAAM,GAAEM,GAAOoK,EAKvB,OAJKiR,EAAI3b,KACP2b,EAAI3b,GAAU,IAEhB2b,EAAI3b,GAAQyJ,KAAKnJ,GACVqb,GACN,CAAC,GAEJ7V,OAAO4I,QAAQukG,GAAkB/yG,QAAQ,EAAEF,EAAQsrD,MACjD+lD,GAAqB,CAAErxG,SAAQsrD,gBAxPE,MA4PrCynD,EAAAA,GAAAA,GAAY,KACV,IAAKhmG,IAAemC,GAAgBtJ,IAAaD,EAAAA,IAA2B,cAATvF,EACjE,OAEF,MAAMpC,GAASmL,EAAAA,EAAAA,MACTpB,EAAMgF,EAAWjN,OAAQQ,IAAOmI,EAAAA,EAAAA,KAAiBzK,EAAQoB,EAAQkB,IAAKm/B,qBACtCn4B,IAAjC4H,EAAa5O,IAAKyqB,YAElBhjB,EAAIlI,QAET+qB,GAAiB,CAAExrB,SAAQ2I,SAxQW,KAyQF,IAEtCgrG,EAAAA,GAAAA,GAAY,KACV,IAAKhmG,IAAemC,GAAgBtJ,IAAaD,EAAAA,IAA2B,cAATvF,EACjE,OAEF,MAAM2H,EAAMgF,EAAWjN,OAAQQ,GAAO4O,EAAa5O,IAAK6qB,WAAW+nF,aAE9DnrG,EAAIlI,QAETyxG,GAAe,CAAElyG,SAAQ2I,SAlRc,KAqRzC,MAAMorG,IAAiB79B,EAAAA,GAAAA,IAAQ,KAC7B,GAAa,WAATl1E,EAIJ,OAAOgS,EAAAA,EAAAA,IAAS,IAAM/C,GAAqB,CAAEsG,UAAWO,EAAAA,GAAkBE,SAAW,KAAM,GAAM,IAEhG,CAAC/G,GAAsBtC,KAEpB,WAAEqmG,GAAU,kBAAEC,IE7aP,WAGb,MAAOD,EAAYE,IAAkBpvB,EAAAA,GAAAA,IAAQ,GAEvCqvB,GAAeC,EAAAA,GAAAA,GARN,KAQgC,GA6B/C,MAAO,CACLJ,aACAC,mBA7BwB16B,EAAAA,GAAAA,GAAiBwgB,IACzCma,IAEKtvG,SAASs0C,KAAKm7D,UAAUC,SAAS,2BACpCC,EAAAA,GAAAA,IAAgB,KACd3vG,SAASs0C,KAAKm7D,UAAUvrG,IAAI,2BAIhCqrG,EAAa,KACX,MAAMK,EAuBZ,SAAuBza,GACrB,MAAM0a,EAAc1a,EAAUl/B,iBAAiC,gBACzD65C,EAAe3a,EAAU6P,UAEzB+K,EAAgBC,iBAAiB7a,GACjC8a,EAAsBC,SAASH,EAAcI,iBAAiB,gCAAiC,IAErG,OAAO9zF,MAAMxI,KAAKg8F,GAAaryG,KAAM6/B,IACnC,MAAM,UAAE6nE,EAAS,aAAEJ,GAAiBznE,EAC9By3C,EAAMowB,EAAY4K,EACxB,OAAQhL,GAAgBhwB,GAAOA,GAAOm7B,EApDvB,IAsDnB,CAnC0BG,CAAcjb,IAElCwa,EAAAA,GAAAA,IAAgB,KACd,MAAMU,EAAerwG,SAASyuE,cAAc,UACxC4hC,GACFA,EAAaZ,UAAUa,OAAO,SAG5BV,GACFA,EAAYH,UAAUvrG,IAAI,SAG5BlE,SAASs0C,KAAKm7D,UAAUa,OAAO,+BASvC,CFuY4CC,GAEpCC,IAAe77B,EAAAA,GAAAA,GAAgB,KACnC,GAAIm5B,GAA0B7/E,QAE5B,YADA6/E,GAA0B7/E,SAAU,GAItC,MAAMknE,EAAYuC,GAAazpE,QAC1BknE,IAIA0Y,GAAkB5/E,SACrBohF,GAAkBla,GAGpB0V,GAAsB,KACpB,MAAM7wG,GAASmL,EAAAA,EAAAA,MAEIiL,SAAQlW,EAAAA,EAAAA,KAAeF,GAAQy2G,gBAAgBr1G,SAEhEonG,GAAyB,CAAEkO,qBAAqB,IAG7Cvb,EAAUJ,gBAIfyY,GAAgBv/E,QAAUknE,EAAU4P,aAAe5P,EAAU6P,UAEhD,WAAT5oG,GACF6wG,GAAgB,CAAE7xG,SAAQwG,WAAUytD,aAAcm+C,GAAgBv/E,iBAKjEyzE,GAAoBiP,IGrdd,SAA4BjZ,EAA0CkZ,GACnF,MAAOlP,EAAoBmP,IAAsBC,EAAAA,GAAAA,MAG3CC,GAAep8B,EAAAA,GAAAA,GAAiBovB,IACpC8M,EAAmB9M,EAAMiN,YAAYzX,WAGvC0X,EAAAA,GAAAA,GAAkBvZ,EAAcqZ,IAEhC9gC,EAAAA,GAAAA,IAAU,KACR,MAAMihC,EAAsBtsG,OAAO8yF,EAAazpE,QAAS+1E,QAAQmN,eAAiB,EAC5EC,EAAkB1P,IAEpB0P,GAAmBA,EAAkBF,GAAuBN,IAC9DlZ,EAAazpE,QAAS+1E,QAAQmN,aAAetrG,OAAOurG,KAErD,CAACR,EAAmBlZ,EAAcgK,IAErC,MAAM2P,GAAsBr9B,EAAAA,GAAAA,MAE5B,MAAO,CAAC0tB,EAAoB2P,EAC9B,CH+buDC,CAAmB5Z,GAAczD,IAAYmY,IAGlGn8B,EAAAA,GAAAA,IAAU,KACR,IAAKk/B,KAAmBrD,GAAgB/1F,GAAgBi1F,EACtD,OAKF,GAD2BjiG,IAAcnJ,EAAAA,EAAAA,IAAiBmJ,EAAWA,EAAWlN,OAAS,IAEvF,OAGF,MAAMs5F,EAAYuC,GAAazpE,UAE1BllB,GAAoC,IAAtBA,EAAWlN,QAC5BkN,EAAWlN,OAASoW,EAAAA,IAAqB,GACrCkjF,EAAUoc,kBAAqCC,cAAgBrc,EAAU2P,eAE7EqK,MAED,CAACrD,EAAc/iG,EAAYomG,GAAgBnE,EAAYj1F,IAE1D,MAAM07F,IAA4BhgB,EAAAA,GAAAA,GAAY,KAC5C,IAAK1oF,IAAe6kG,GAAoB3/E,QACtC,OAGF,MAAMyjF,EAAwB9D,GAAoB3/E,QAC/CnyB,OAAQs5F,GAAYrsF,EAAWtK,SAASmG,OAAOwwF,EAAQ4O,QAAQ/iG,aAI5D28F,EAAS8T,EAAsB,IAAMA,EAAsB,GAC5D9T,IAILoE,GAAY/zE,QAAU2vE,EAAOthG,GAC7BqxG,GAAa1/E,QAAU2vE,EAAO+T,wBAAwB78B,QAGxDyc,EAAAA,GAAAA,GACE,KAAMqgB,EAAAA,GAAAA,IAAa,IAAMH,GAA0BxjF,WAEnD,CAACllB,EAAY44F,EAAkB8P,MAEjCxhC,EAAAA,GAAAA,IACE,IAAMwhC,GAA0BxjF,UAEhC,CAACyzE,GAAoB+P,MAIvBI,EAAAA,GAAAA,GAA4B,EAAE9K,EAAgB+K,MAM5C,MAAMV,EAAkB1P,KAClB2P,EAAsBV,GAAuB1iF,QAInD,GAHA0iF,GAAuB1iF,QAAUmjF,EAI/BroG,IAAeg+F,GACZpF,IAAqBmQ,GACrBV,IAAoBC,QACI/tG,IAAxB+tG,EAEH,OAGF,MAAMlc,EAAYuC,GAAazpE,QAC/B2/E,GAAoB3/E,QAAU5R,MAAMxI,KAAKshF,EAAUl/B,iBAAiC,uBACpF,MAAM87C,EAAkBnE,GAAoB3/E,QAAQ2/E,GAAoB3/E,QAAQpyB,OAAS,GACnFm2G,EAAqB9P,GAAqBj0E,QAC5CknE,EAAU1mB,cAA8B,KAAIy5B,EAAAA,EAAAA,IAAiBhG,GAAqBj0E,iBAClF3qB,EAEE2uG,EACJlpG,GAAcg+F,GAAkBh+F,EAAWA,EAAWlN,OAAS,KAAOkrG,EAAeA,EAAelrG,OAAS,GAEzGq2G,EACJnpG,IAAa,KAAOg+F,IAAiB,IAAMh+F,GAAYlN,SAAYoW,EAAAA,IAAqB,EAAI,EAExFkgG,EAAkBF,IAA0BC,EAIhDvQ,GACGwQ,GACCppG,GAAcA,EAAWlN,OAASoW,EAAAA,IAAqB,IACvDkjF,EAAUJ,cAAe0a,UAAUC,SAAS,2BAC7CkC,EAAAA,GAAAA,IAAa,IACbzc,EAAUoc,kBAAqCC,cAAyC,EAAzBrc,EAAU2P,iBAG5EsN,EAAAA,GAAAA,IAAcjd,EAAUJ,cAAgB,yBACxCI,EAAUJ,cAAe0a,UAAUvrG,IAAI,yBAEvCgB,WAAW,KACLiwF,EAAUJ,gBACZsd,EAAAA,GAAAA,IAAiBld,EAAUJ,cAAe,0BAvajB,OA4a/Bud,EAAAA,GAAAA,IAAoB,KAClB,MAAM,UAAEtN,EAAS,aAAED,EAAY,aAAED,GAAiB3P,EAC5C9lC,EAAem+C,GAAgBv/E,QAErC,IAAIskF,EAAeljD,GAAgBgiD,GAAuBvM,GACtDqN,IAKFI,GADuBR,EAAkBA,EAAgBjN,aAAe,GAG1E,MAAMM,EAAazD,GAAoBmQ,GAAwBS,GA3b5C,GA4bbC,EAAoBzpG,GAAc8kG,GAAkB5/E,UAAYllB,EAAWA,EAAWlN,OAAS,GAGjGs2G,GAAmB/M,IAAeoN,IAEpC3M,EAAAA,GAAAA,IAAe,KACb,MAAM4M,IAAwBhP,EAAAA,GAAAA,OAA6BuO,GAC3D9c,EAAAA,GAAAA,IAAc,CACZC,YACAC,QAASqd,EAAuBV,EAAkBC,EAClDzmD,SAAUknD,EAAuB,MAAQ,QACzCpd,OAncgB,GAochBqd,cAAejG,EAA4B,OAAInpG,MAKrD,MAAMqvG,OAAoCrvG,IAAxB+tG,GAAqCA,IAAwBD,EAC/E,GAAIuB,IAAaphD,EAAAA,GAAAA,MACf,OAGF,MAAMqsC,EAASoE,GAAY/zE,SAAWknE,EAAU1mB,cAAc,IAAIuzB,GAAY/zE,WACxEq4E,GACH1I,GACEqE,GAA6Bh0E,SAC7BknE,EAAU1mB,cAA8B,mBAG7C,IAAImkC,EACJ,GAAIxN,GAAcuN,EAChBC,EAAe7N,EAAeD,OACzB,GAAIlH,EAAQ,CACjB,MAAMiV,EAAejV,EAAO+T,wBAAwB78B,IACpD89B,EAAe5N,GAAa6N,GAAgBlF,GAAa1/E,SAAW,GACtE,MACE2kF,EADStM,EACM3rG,KAAKC,KAClBk4G,EAAAA,GAAAA,GAAqBxM,EAAenR,GAAWrgB,IAhe9B,GAiejBiwB,EAAe11C,GAGF01C,EAAe11C,EAGhC,MAAO,MACL0jD,EAAAA,GAAAA,GAAY5d,EAAWx6F,KAAKq4G,KAAKJ,KACjCK,EAAAA,GAAAA,MAEAzF,GAAgBv/E,QAAUtzB,KAAKE,IAAIF,KAAKq4G,KAAKjO,EAAe6N,GAAe9N,GAEtE+I,GAAkB5/E,UACrB6/E,GAA0B7/E,SAAU,GAEpC43E,EAAAA,GAAAA,IAAe,KACbiI,GAA0B7/E,SAAU,SAW3C,CAACllB,EAAY44F,EAAkBD,GAAoBiP,GAAwBlE,KAE9E3rB,EAAAA,GAAAA,GAAsB,EAAEoyB,WACS5vG,IAA3B4vG,IACFC,EAAAA,GAAAA,IA5fiC,IA4foBtlD,EAAAA,MAEtD,CAACu+C,IAEJ,MAAMxL,GAAYxwF,SAASylF,IAAciM,IAAkBkK,GACrDoH,IAAuBjoG,EAAAA,EAAAA,IAAS/P,KAAYw6F,IAAmBuW,IAAUvQ,GACjE,WAATx/F,KAGEqlG,KAAkBj6F,GAAeuB,KAE7B6kG,GAAoB3/E,SAAkD,IAAvC2/E,GAAoB3/E,QAAQpyB,SAEvC,IAAvBkN,GAAYlN,QAAwE,kBAAxDqP,IAAenC,EAAW,KAAKpJ,QAAQ0E,QAAQjI,MACpC,kBAAvCoL,GAAa7H,SAAS0E,QAAQjI,MAGhCqtG,GAAyBsC,GAAeG,GAClB,IAAvBnjG,GAAYlN,QAAwE,eAAxDqP,IAAenC,EAAW,KAAKpJ,QAAQ0E,QAAQjI,KAC1Ei3G,GAAsC,IAAvBtqG,GAAYlN,QAC4B,gBAAxDqP,IAAenC,EAAW,KAAKpJ,QAAQ0E,QAAQjI,KAE9C2xB,IAAYkjD,EAAAA,GAAAA,GAChB,4BACA2vB,IAAa,cACZ3M,GAAW,cACH,WAAT73F,GAAqB,cACrB0wG,GAAmB,oBACnBC,GAAiB,kBACjBX,GAAsB,qBACtBgD,IAAc,YACbjN,GAAW,eACZ6L,IAAqB,eACrBrB,GAAmB,iBAGfvU,GAAchoF,QAASrH,GAAc04F,IAAkBj6F,GAQ7D,OANAyoE,EAAAA,GAAAA,IAAU,KACJmoB,IAEJkK,IAAmB,IAClB,CAAClK,GAAakK,MAGfnzB,EAAAA,GAAAA,GAAA,OACE8E,IAAKyjB,GACL3pE,UAAWA,GACXulF,SAAU9C,GACVlQ,YAAaC,GAAAA,EAAwBpwB,SAEpCp6D,GACCo5D,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,QAAOoiD,UACpBhB,EAAAA,GAAAA,GAAA,QAAAgB,SACG46B,EAAoBA,EAAkBnjG,KAAO,sBAAqBk6F,EAAgB,UAAY,aAGjGztF,GAAsB+jF,IAAgBiT,GAEtC2B,IAA4B5U,IAC9BjpB,EAAAA,GAAAA,GAACokC,GAA2B,CAACv3G,OAAQZ,KAClC+wG,IAAShB,GAAkB/S,GAE5Bgb,IACFjkC,EAAAA,GAAAA,GAACqoB,GAAe,CAAc98E,OAAQtf,GAAhBA,GACpB2N,KAAgB04F,IAAiBgI,IAA0B4J,KAC7DlkC,EAAAA,GAAAA,GAACq6B,GAAU,CACTpuG,OAAQA,EACR+H,MAAOA,EACP/G,KAAMA,EACNw5F,eAAgBA,EAChB6T,uBAAwBA,KAExBrR,IACFjpB,EAAAA,GAAAA,GAACoyB,GAAkB,CACjBC,WAAYh/E,GAAiBs/E,EAC7B1mG,OAAQA,EACRwmG,WAAYA,EACZE,cAAeA,EACfC,gBAAiBA,EACjBxvF,cAAeA,GACfxJ,WAAYA,GAAc,CAACvB,EAAalL,IACxCmlG,cAAeA,IAAiB/L,GAAc,CAACluF,IAC/Ck6F,mBAAoBA,GACpBC,iBAAkBvxF,QAAQuxF,GAC1B5jG,SAAUqS,QAAQlO,GAClB2/F,cAAeA,EACfhM,UAAWA,GACX+K,UAAWA,GACXlJ,aAAcA,GACdsK,YAAaA,GACbC,6BAA8BA,GAC9BC,qBAAsBA,GACtBtgG,SAAUA,EACVxF,KAAMA,EACN+lG,QAASA,EACTC,cAAeA,EACf/tC,aAAYotC,IAAyB,cAATrlG,EAC5BimG,wBAAyB8J,GAAShB,EAClC3S,eAAgBA,EAChBC,gBAAiBA,EACjB+D,uBAAwBiF,KAAkBsM,GAA2B9/E,QACrEq0E,mBAAoBA,GACpBC,cAAeA,GACfC,yBAA0BA,GAC1BvO,QAASA,KAGX9kB,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,CAACwB,MAAM,QAAQ0hC,gBAAgB,UA9CvCrkC,EAAAA,GAAAA,GAACgpB,GAAsB,CAAC/8F,OAAQA,EAAQg9F,YAAaA,MAJrDjpB,EAAAA,GAAAA,GAACokC,GAA2B,CAACl/F,kBAAmBA,EAAmBrY,OAAQuvG,IAAsBnwG,SA0JzG,SAASszG,GAA6BvtG,GACpC,OAAOA,EAAgB,IACzB,CIz2BA,MAOA,GAPiD2tE,IAC/C,MAAM,SAAEtY,GAAasY,EACf2kC,GAAuBzkC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyBhZ,GAErF,OAAOi9C,GAAuBtkC,EAAAA,GAAAA,GAACskC,EAAoB,IAAK3kC,SAAYxrE,G,sLCQhEowG,GAAkB,CAAEj5G,MAAO,IAAK8+F,OAAQ,KACxCoa,GAAe,I,wCC0CrB,MAAMC,GAAyC,CAC7C,GAAK,IACL,IAAM,GACN,EAAG,EACH,IAAK,IACL,EAAG,KAECC,GAAuB/xG,OAAO4G,KAAKkrG,IAAgB/0G,OAAO+J,IAAIhE,QA2SpE,SAASkvG,GAAYC,GACnB,MAAM,MAAErqG,EAAK,UAAEsqG,EAAS,SAAEC,GAAaF,EAEvC,OACExiC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,QAAQ4jD,IAAI,OAAMxB,UAAE6pB,EAAAA,GAAAA,GAAWtwF,GAASuqG,KACtDD,IACC7kC,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,WAAW4jD,IAAI,OAAMxB,UAAE6pB,EAAAA,GAAAA,GAAWga,OAIzD,CAEA,SAASE,GAAYn2F,EAAkBo2F,GACrC,OACE5iC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,QAAQ4jD,IAAI,OAAMxB,SAAEgkC,IAAcna,EAAAA,GAAAA,GAAWma,MAC5DhlC,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,WAAW4jD,IAAI,OAAMxB,SAAEpyD,MAG5C,CAsBA,UAAey0D,EAAAA,EAAAA,IACb,CAACx4E,GAAUqsD,eACT,MAAM,YAAEhqB,IAAgBniC,EAAAA,EAAAA,KAAeF,IACjC,OAAEoB,EAAM,UAAE6F,GAAco7B,EACxBrhC,GAAWqrD,GAAYjrD,GAAU6F,GAAYhC,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ6F,QAAaqC,EAE5FukC,EAAS7sC,IAAW8sC,EAAAA,EAAAA,KAAa9tC,EAAQgB,GACzCoC,EAAOpC,IAAWuG,EAAAA,EAAAA,KAAWvH,EAAQgB,EAAQI,SAC7C,OACJy0D,EAAM,aAAEC,EAAY,QAAE1vB,EAAO,qBAAE4vB,EAAoB,UAAEx5B,IACnDt8B,EAAAA,EAAAA,KAAeF,GAAQqiC,YAE3B,MAAO,CACLrhC,UACA6sC,SACAzqC,OACAyyD,SACAC,eACAE,uBACA5vB,UACA5J,cApBN,CAhV+C49E,EAC7Cp5G,UACA+yB,YACAsmF,OACAxsE,SACAzqC,OACAyyD,SACAC,eACAE,uBACA5vB,UACAk0E,cACA99E,YACA+9E,wBAEA,MAAM,qBACJC,EAAoB,2BACpBC,EAA0B,oBAC1BC,EAAmB,aACnB7tG,EAAY,iBACZy1B,IACErjB,EAAAA,EAAAA,MAEE+0C,GAAO+iB,EAAAA,GAAAA,MAEP,SAAE0P,IAAaC,EAAAA,EAAAA,MACfi0B,GAAmBC,EAAAA,GAAAA,GAAiB55G,IAEpC,MAAE+4G,EAAK,MAAErrF,EAAK,MAAE5oB,GAAU60G,GAAmB10G,EAAAA,EAAAA,IAAkB00G,GAAoB,CAAC,EACpFE,EAAUzkG,QAAQsY,GAAS5oB,GAC3Bg1G,EAA6BD,IAAYd,GAAOjyE,UAAY,GAAKizE,EAAAA,IACjEZ,EAAatsE,GAAS2mB,EAAAA,EAAAA,IAAaR,EAAMnmB,QAAUvkC,EAEnD0xG,EAAYL,IAAoBM,EAAAA,EAAAA,IAAoBN,EAAkB,UACtEO,EAAYF,GAAa/0D,GAAAA,GAA0B+0D,GACnDG,EDrFwBC,EAC9Bp6G,EAAsB6sC,EAAkBzqC,KAExC,MAAM4wD,GAAO+iB,EAAAA,GAAAA,MAEP,MAAEgjC,EAAK,MAAErrF,GAAU1tB,GAAUiF,EAAAA,EAAAA,IAAkBjF,GAAW,CAAC,EAC3D0O,EAAQqqG,EAASA,EAAMrqG,OAASqqG,EAAME,SAAYvrF,EAAQ,gBAAkB,GAC5E2sF,EAAStB,GAAOC,WAAcnsE,IAAU2mB,EAAAA,EAAAA,IAAaR,EAAMnmB,GAC3D2+D,EAASppG,IAAQo/D,EAAAA,EAAAA,IAAaxO,EAAM5wD,IAAU,WAE9Ck4G,EAAkBvB,IAASwB,EAAAA,EAAAA,IAAiBxB,KAAUliD,EAAAA,EAAAA,IAAakiD,EAAO,aAC1EyB,EAAa3tE,IAAU4tE,EAAAA,EAAAA,IAAkB5tE,EAAQ,OACjDje,EAAQmqF,GAASuB,GAAoB5sF,GAAS8sF,EAC9CroG,GAAQyrF,EAAAA,GAAAA,GAAShvE,GAEjBgjC,GAAO0kB,EAAAA,GAAAA,IAAQ,IA2BvB,SAAsByiC,EAAkBrrF,EAAkB5F,GACxD,IAAKA,EAAK,OAAO4wF,GACjB,GAAIK,EAAO,CACT,IAAKA,EAAM2B,gBAAgB75G,OAAQ,OACnC,MAAM85G,EAAY5B,EAAM2B,eAAel4G,KAAMovD,GAAuB,MAAdA,EAAKxwD,MAC3D,OAAOu5G,GAAa5B,EAAM2B,eAAe,EAC3C,CAEA,OAAIhtF,EACKktF,EAAAA,QADT,CAKF,CAvCWC,CAAa9B,EAAOrrF,EAAOvb,GACjC,CAAC4mG,EAAO5mG,EAAOub,KACVjW,OAAQqQ,IAAQgzF,EAAAA,GAAAA,GAAS,IAanC,SAAyBhzF,EAAc8pC,GACrC,IAAK9pC,EAAK,OAAOtI,QAAQu7F,QAAQC,IACjC,IAAKppD,EAAM,OAAOqpD,EAAAA,GAAAA,GAAYnzF,EAAK6wF,GAAcA,IACjD,MAAM/4G,EAAMD,KAAKC,IAAIgyD,EAAKnyD,MAAOmyD,EAAK2sC,QACtC,GAAI3+F,EAAM+4G,GAAc,CACtB,MAAMuC,EAAQvC,GAAe/4G,EAC7B,OAAOu7G,EAAAA,GAAAA,GAAWrzF,EAAKozF,EACzB,CACA,OAAO17F,QAAQu7F,QAAQjzF,EACzB,CArBIszF,CAAgBjpG,EAAOy/C,GACtB,CAACz/C,EAAOy/C,GAAOopD,IAClB,OAAO1kC,EAAAA,GAAAA,IAAQ,KACN+kC,EAAAA,GAAAA,IAAmB,CACxB3sG,QACA2rG,SACA7O,QACA8P,QAAS,CAAC,CAAE5b,IAAK53E,MAElB,CAAC0jF,EAAO6O,EAAQ3rG,EAAOoZ,KCyDJsyF,CAAwBT,EAAkB9sE,EAAQzqC,IAElE,UACJm5G,EAAS,KACTC,EAAI,UACJC,EAAS,iBACTC,EAAgB,qBAChBC,EAAoB,QACpBr+F,EAAO,OACPC,EAAM,UACNq+F,EAAS,YACTC,EAAW,gBACXC,EAAe,eACfC,IACEC,EAAAA,GAAAA,GACFh8G,IAAWi8G,EAAAA,GAAAA,IAAYj8G,GACvBA,GAAUk8G,EAAAA,EAAAA,IAAiBl8G,GAAY,EACvC65G,EAAU,QAAU,QACpBK,OACA5xG,EACA6xG,OACA7xG,GACA,OACAA,OACAA,EACAtI,IAAWyH,EAAAA,EAAAA,IAAezH,IAC1B,GAGIo7C,EAAShmC,QAAQpV,IAErBi5E,IAAKF,IACHO,EAAAA,GAAAA,GAAkB,CACpBl+B,SACA+gE,gBAAiB7C,KAGb,IAAErgC,EAAG,aAAEC,IAAiBkjC,EAAAA,GAAAA,GAAc,CAC1ChhE,SACA+iC,YAAam7B,EACbrgC,IAAKF,EACLsjC,cAAe9C,KAGX,kBACJjhB,EAAiB,wBACjBiM,EAAuB,kBAAEhM,EAAiB,uBAC1CC,GAAsB,sBAAEC,KACtBC,EAAAA,GAAAA,GAAuB3f,GAAgBG,IAE3CjE,EAAAA,GAAAA,IAAU,KACJz5C,GACFugF,EAAevgF,IAEhB,CAACA,EAAWugF,IAEf,MAAMxhB,IAAc5gB,EAAAA,GAAAA,GAAgB,KAClC,MAAM,OAAEv5E,EAAM,GAAEkB,GAAOq4G,EACvB9tG,EAAa,CAAEzL,SAAQ6F,UAAW3E,MAG9B80E,IAAcuD,EAAAA,GAAAA,GAAgB,KAC7B6hC,IAGDC,GACFF,IAEFj6E,KACAg7E,EAAAA,GAAAA,MACAd,OAGIe,IAAqB5iC,EAAAA,GAAAA,GAAiBjvC,IACrCkxE,IAGLpC,EAAqB,CAAE3kD,OAAQnqB,EAAQ,MACvCkxE,EAAUlxE,EAAQ,QAGd8xE,IAAoB7iC,EAAAA,GAAAA,GAAgB,KACpC1hB,EAAAA,KAAiB99C,EAAAA,IAChB0hG,IAGLA,IACAnC,EAAoB,CAAEt0E,SAAUA,OAG5Bq3E,IAAqB9iC,EAAAA,GAAAA,GAAgB,CAAC+iC,EAAiBlhD,GAAW,KACtE,IAAKsgD,EACH,OAEF,MAAMa,EAAO/D,GAAe8D,GACtBE,EApIoB,IAoIHF,GAAqClhD,EAC5Di+C,EAA2B,CAAE3kD,aAAc6nD,EAAM3nD,qBAAsB4nD,IACvEd,EAAgBc,EAAiBD,EAtIP,KAyItBE,IAAsBljC,EAAAA,GAAAA,GAAgB,KAC1C6e,KACA,MAAMskB,EAAUlzG,OAAO9C,OAAO4I,QAAQkpG,IAAgBp2G,KAAK,EAAE,CAAEm6G,KAAUA,IAAS7nD,KAAgB,KA3IxE,EA6IpBioD,GAAe/nD,EAErBynD,GACEM,GAhJwB,IAgJTD,EA/Ic,EA+ImDA,EAChFC,KAIEC,IAAqBrjC,EAAAA,GAAAA,GAAgB,KACzC,MAAMsjC,EAAcn2G,OAAO4I,QAAQkpG,IAAgBp2G,KAAK,EAAE,CAAEm6G,KAAUA,IAAS7nD,KAAgB,IAtJrE,EAwJpBloD,EAAO,GAxJa,IAwJVkoD,EAvJe,EAuJuDmoD,KACtF,OACE1mC,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,mBAAkBoiD,SAAA,CAC9BmjB,IAAqBnkB,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,oBAAoB2jD,QAAS8hB,MAElErkB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACL0b,WAAWkjD,EAAAA,GAAAA,GACT,kBAAmBjhB,GAAwB,UAAWsjC,GAAqB,UAE7ExhB,MAAM,cACNllB,KAAK,UACLmlB,UAAU,gBACVsP,QAASZ,EACTyI,aAAcqK,EACd7hB,QAASmmC,GACTvX,YAAaf,EACb5L,cAAeJ,EAAkBpjB,UAEjChB,EAAAA,GAAAA,GAAA,QAAMphD,WAAWkjD,EAAAA,GAAAA,GACf,wBACgB,IAAhBrpE,EAAK/L,QAAgB,QACL,IAAhB+L,EAAK/L,QAAgB,QACrBs0E,SAECvoE,WAOLswG,IAAuB5mC,EAAAA,GAAAA,IAAQ,IACpB,IAAXzhB,GAAgBzvB,EAAgB,QAChCyvB,EAAS,GAAY,WACrBA,EAAS,GAAY,WAClB,WACN,CAACA,EAAQzvB,IAEZ,IAAIi0E,GAASngC,EAIb,OACE3C,EAAAA,GAAAA,IAAA,OACExjD,WAAWkjD,EAAAA,GAAAA,GAAe,cAAeqjC,EAAc,oBAAsB,cAAevmF,GAC5F4jD,IAAK3jB,EAAK4jB,MAAQ,WAAQtuE,EAC1B2wE,IAAKA,EAAI9D,SAAA,EAEToB,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,sBAAsB2jD,QAAS6jB,GAAYplB,SAAA,CACvD4jC,EAAQD,GAAYC,GAASG,GAAYlmD,EAAK,eAAgBmmD,IAC/DhlC,EAAAA,GAAAA,GAACgpC,GAAAA,EAAY,QAGfhpC,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLgvE,QAASZ,EACT3O,MAAM,cACNllB,KAAK,UACL7+B,UAAU,gBACVqqF,SAAU9/F,MACVo5D,QAASilC,EACT5kC,UAAU,iBAAgB5B,UAE1BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,qBAEbmkC,EAAAA,GAAAA,IAACM,GAAAA,EAAM,CACLx/D,OAAK,EACLgvE,QAASZ,EACT3O,MAAM,cACNllB,KAAK,UACL7+B,WAAWkjD,EAAAA,GAAAA,GAAe,cAAe,gBAAiBwlC,EAAY,QAAU,QAChF/kC,QAAS6kC,EACTxkC,UAAW0kC,EAAY,cAAgB,aAAatmC,SAAA,EAEpDhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,UACX+hC,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,cAEb+hC,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLgvE,QAASZ,EACT3O,MAAM,cACNllB,KAAK,UACL7+B,UAAU,gBACVqqF,SAAU7/F,MACVm5D,QAASglC,EACT3kC,UAAU,aAAY5B,UAEtBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,iBAGbmkC,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,wBAAuBoiD,SAAA,EACpChB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACL0b,UAAU,8BACV+jD,MAAM,cACNllB,KAAK,UACLmlB,UAAU,SACVL,QAAS8lC,GACTn2B,QAASZ,EAAStQ,UAElBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAM8qE,QAGZ/iG,EAAAA,KACAo8D,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,wBAAuBoiD,SAAA,EACpChB,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,0BACfohD,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,gBAAeoiD,UAC5BhB,EAAAA,GAAAA,GAACkpC,GAAAA,EAAW,CAACC,MAAI,EAAC5yE,MAAOtF,EAAU,EAAa,IAATyvB,EAAcu2B,SAAUmxB,aAMtEzC,IACC3lC,EAAAA,GAAAA,GAACiW,GAAAA,EAAY,CACXI,UAAW8N,EACXnhB,UAAU,QACVC,UAAU,MACVrkD,UAAU,qBACVs3D,QAAS2yB,GACT1lC,QAASkhB,GACT+kB,OAAQ9kB,GACR+kB,qBAAsBhlB,GAAuBrjB,SAE5C0jC,GAAqBjrG,IAAK+uG,GA0CrC,SACEA,EAAcc,EAAqB/mC,EACnC1hB,GAEA,MAAM0oD,EAAcD,IAAgB7E,GAAe+D,IAAS3nD,GAnUhC,IAoUtB2nD,IAAmC3nD,EACzC,OACEuhB,EAAAA,GAAAA,IAACE,GAAAA,EAAQ,CAGPC,QAASA,IAAMA,EAAQimC,GACvB39F,KAAM0+F,EAAa,aAAUp1G,EAC7Bm4E,WAAai9B,OAA2Cp1G,GAA9B6rE,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,gBAA6B+iC,SAAA,CAEjEwnC,EAAK,MANDA,EAUX,CA3DmBgB,CAA2BhB,EAAM7nD,EAAc2nD,GAAoBznD,OAKhFmf,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACL0b,UAAU,eACV+jD,MAAM,cACNllB,KAAK,UACL8kB,QAASN,GACTW,UAAU,eAAc5B,UAExBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,iB,gHC1WnB,UAAgB,wBAAwB,WAAW,oBAAsB,WAAW,kCAAkC,WAAW,4BAA8B,WAAW,gCAAgC,WAAW,2BAA6B,WAAW,6BAA6B,WAAW,wBAA0B,YC0L/T,SAASwrE,GAAS3+G,EAAW8mD,EAAWtmD,EAAe8+F,EAAgBsf,GACrE,MAAO,IAAI5+G,KAAK8mD,EAAI83D,KAAUA,KAAUA,eACtCp+G,OAAW8+F,EAAS,EAAIsf,KAAUA,KAAUA,YAAiBp+G,MACjE,CAoCA,UAAek1E,EAAAA,GAAAA,IA/M+BmpC,EAC5CnmG,QAAOc,YAEP,MAAMikF,GAAe1jB,EAAAA,GAAAA,MAEf+kC,GAAeznC,EAAAA,GAAAA,IAAQ,IAmF/B,SAAyB3+D,EAAec,GACtC,MAAMulG,EAAermG,EAAQc,EAAQ,EAC/BwlG,EAmBR,SAAsBtmG,GACpB,IAAIsmG,EAAY,EAahB,OAZc,IAAVtmG,EACFsmG,EAAY,GACO,IAAVtmG,EACTsmG,EAAY,GACO,IAAVtmG,EACTsmG,EAAY,IACO,IAAVtmG,GAEAA,EAAQ,KADjBsmG,EAAY,KAKPA,CACT,CAlCoBC,CAAavmG,GACzBwmG,EAmCR,SAAuBxmG,EAAec,GACpC,IAAIwlG,EAAY,GAahB,OAZc,IAAVtmG,EACFsmG,EAAY,GACO,IAAVtmG,EACTsmG,EAAY,GACO,IAAVtmG,EACTsmG,EAAsB,IAAVxlG,EAAc,GAAK,IACZ,IAAVd,GAEAA,EAAQ,KADjBsmG,EAAY,KAKPA,CACT,CAlDqBG,CAAczmG,EAAOqmG,GAClCK,EAmDR,SAAwB1mG,EAAesmG,GACrC,OAAOtmG,GAAS,EAAI,GAAKsmG,EAAYtmG,EAAQ,GAAKA,EAAQ,EAC5D,CArDsB2mG,CAAe3mG,EAAOsmG,GAEpCM,EAAa,WAAW5mG,IACxB6mG,EAoDR,SAAqBl9G,EAAY28G,EAAmBtmG,GAGlD,IAAI8mG,EAAI,GACR,GAAc,IAAV9mG,EACF8mG,EAAIb,GAAS,EAAG,EAAG,EAAGK,EAJT,GAKTL,GAAS,EAAG,GAAI,EAAGK,EAAY,EALtB,GAMTL,GAAS,EAAG,GAAI,EAAGK,EANV,QAQb,IAAK,IAAI55G,EAAI,EAAGA,EAAIsT,EAAOtT,IACzBo6G,GAAKb,GAAS,GAAIK,EAAY,GAAK55G,EAAG,EAAG45G,EAT9B,GAaf,MACE,iBAAiB38G,uBACJm9G,wBAGjB,CAvEmBC,CAAYH,EAAYN,EAAWtmG,GAE9CgnG,EA4ER,SAA2BlmG,EAAewlG,EAAmBtmG,GAC3D,OAAc,IAAVA,EACK,EACY,IAAVA,EACQ,IAAVc,EAAc,EAAIwlG,EAAY,EAGzB,IAAVtmG,EACY,IAAVc,EACK,EACY,IAAVA,EACF,GAGF,IAECwlG,EAAY,GAAKxlG,CAE7B,CA9FyBmmG,CAAkBZ,EAAcC,EAAWtmG,GAC5DknG,EA+FR,SAA4BpmG,EAAed,EAAesmG,EAAmBI,GAC3E,OAAI1mG,GAAS,GAITc,GAAS,EAHJ,EAKEA,GAASd,EAAQ,EACnB0mG,EAAc,IAGfJ,EAAY,GAAK,GAAKxlG,EAAQ,IAAMwlG,EAAY,EAC1D,CA3G0Ba,CAAmBd,EAAcrmG,EAAOsmG,EAAWI,GAC3E,MAAO,CACLF,aACAK,WACAG,iBACAE,kBACAR,cACAE,aAEJ,CArGWQ,CAAgBpnG,EAAOc,GAC7B,CAACd,EAAOc,IAyCX,IAvCAumG,EAAAA,GAAAA,IAAgB,KACd,IAAKtiB,EAAazpE,QAChB,OAGF,MAAM,YACJorF,EAAW,gBACXQ,EAAe,WACfV,EAAU,eACVQ,EAAc,WACdJ,EAAU,SACVC,GACET,EAEEkB,EAAaviB,EAAazpE,QAAQsjF,kBACxC,GAAI7Z,GAAczpE,QAAS,CACzB,MAAMisF,EAAiBxiB,EAAazpE,SAC9B,MAAEusE,GAAU0f,EAClB1f,EAAMjB,OAAS,GAAG8f,MAClB7e,EAAM2f,UAAY,eAAeN,OACjCrf,EAAMgf,SAAW,SAASD,MAC1B,MAAMa,EAAMF,EAAezrC,cAAc,OACnC4rC,EAAMH,EAAezrC,cAAc,OACnC6rC,EAAOJ,EAAezrC,cAAc,QACrC2rC,GACCH,IACFA,EAAWM,UAAY,oCAAoCf,mBAG3Dc,IACFA,EAAKC,UAAYf,GAEfa,IACFA,EAAI7f,MAAMjB,OAAS,GAAG4f,MACtBkB,EAAI7f,MAAM2f,UAAY,cAAcR,OAExC,GACC,CAACZ,IAEU,IAAVpmG,EACF,OACEw8D,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAAOklB,oBAAoBrqC,UACzChB,EAAAA,GAAAA,GAAA,OACEphD,UAAWunE,GAAOmlB,4BAClBxmC,IAAKyjB,MAMb,MAAM,YACJ2hB,EAAW,gBAAEQ,EAAe,WAAEV,EAAU,eAAEQ,EAAc,WAAEJ,GACxDR,EAEJ,OACE5pC,EAAAA,GAAAA,GAAA,OAAKphD,WAAWkjD,EAAAA,GAAAA,GACdqkB,GAAOklB,oBACP7nG,EApEoB,GAoES2iF,GAAOolB,yBACpCvqC,UAEAoB,EAAAA,GAAAA,IAAA,OACExjD,UAAWunE,GAAOqlB,2BAClB1mC,IAAKyjB,EACL8C,MACE,oBAAoB+e,uCACVF,+BAAyCQ,QACpD1pC,SAAA,EAEDhB,EAAAA,GAAAA,GAAA,YACAA,EAAAA,GAAAA,GAAA,OACEphD,UAAWunE,GAAOslB,wBAClBpgB,MAAO,aAAa2e,uBAAgCQ,2BAC1BE,gBCnGpC,GAAkK,WAAlK,GAAiM,WAAjM,GAAgc,WC2D1bgB,GAAa,MAAQnhH,EAAAA,EAyR3B,IAAei2E,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GACCoB,SAAQwG,WAAU+H,sBAElB,MAAMvM,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAE1By5B,EAAW76B,EAAO66B,SAClBtiB,GAAgB7M,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU5H,EAAOiC,eAE1DiP,GAAetH,EAAAA,EAAAA,KAAmB5J,EAAQoB,GAE1C6vC,EAAQ,CACZ7tC,OACAy3B,YAGF,GAAwB,WAApBlrB,IAAiCuB,EACnC,OAAO+/B,EAGT,GAAIrpC,IAAaD,EAAAA,KAAmB4Q,IAAkBnV,GAAMgG,QAAS,CACnE,MAAM03G,EAAkBl2G,OAAOhD,GACzB5G,EAAU8/G,GAAkB77G,EAAAA,EAAAA,KAAkBjF,EAAQoB,EAAQ0/G,QAAmBx3G,EACjFy3G,EAAmB//G,GAAUkhG,EAAAA,EAAAA,KAAsBliG,EAAQgB,QAAWsI,EAE5E,MAAO,IACF2nC,EACHmlB,iBAAkB0qD,EAClB5vG,eACA8vG,UAAU,EACVD,mBAEJ,CAEA,MAAM3qD,EAAoB79C,OAA4DjP,GAA5CsH,EAAAA,EAAAA,KAAgB5Q,EAAQoB,EAAQwG,GAC1E,GAAIwuD,GAAkBv0D,OAAQ,CAC5B,MAAMo/G,EAAqB/vG,EAAaklD,EAAiB,KACnD,SACJ4qD,GAAW,GAEXC,GAC+B,IAA5B7qD,EAAiBv0D,SACjBoyD,EAAAA,EAAAA,KAAgCj0D,EAAQihH,EAAoBr5G,IAC5D,CAAC,EAEN,MAAO,IACFqpC,EACHmlB,mBACAllD,eACA8vG,WAEJ,CAEA,OAAO/vE,GArDSunC,CAhQQ0oC,EAC1B9/G,SACAwG,WACAo5G,WACAG,qBACA/qD,mBACAllD,eACAopG,cACAyG,mBACAK,wBACArtF,YACA3wB,OACAy3B,WACAwmF,aACA9G,oBACA+G,2BAEA,MAAM,qBACJC,EAAoB,aAAE10G,EAAY,WAAEse,EAAU,WAAEq2F,EAAU,mBAAEC,IAC1DxiG,EAAAA,EAAAA,MACE+0C,GAAOgiB,EAAAA,GAAAA,KAEP0rC,GAAqBjnC,EAAAA,GAAAA,GAAgB2mC,GACrCN,EAAkBz+F,MAAMC,QAAQ8zC,GAAoBA,EAAiBsrD,GAAsBtrD,EAC3FurD,EAAgBzwG,GAAgB4vG,EAAkB5vG,EAAa4vG,QAAmBx3G,EAClFs4G,EAAsBv/F,MAAMC,QAAQ8zC,GACtCA,EAAiBv0D,OAAUu0D,EAAmB,EAAI,EAChDyrD,EAAsBlhH,KAAKE,IAAI+gH,EAAsBF,EAAoB,GAEzEI,EAAkBf,GAAmBvsD,EAAAA,EAAAA,IAAaR,EAAM+sD,QAAoBz3G,EAE5ExD,EAAQ67G,IAAiBI,EAAAA,EAAAA,IAAgBJ,GACzCliG,EAAM3Z,GAAO6/F,MAAQ7/F,OAAQwD,EAC7B04G,EAAmB5rG,QAAQqJ,IAAQA,EAAIwiG,mBAAmBpgH,QAE1DqgH,GAAiBC,EAAAA,GAAAA,GAAaR,GAC9B3G,EAAY2G,IAAiB1G,EAAAA,EAAAA,IAAoB0G,EAAeK,EAAmB,OAAS,aAC5FI,GAAexjB,EAAAA,GAAAA,GAASoc,GACxBqH,EAAYV,IAAiBW,EAAAA,EAAAA,IAAoBX,GAEjDjtF,EAAYte,SAAQqkE,EAAAA,GAAAA,GAAgB0mC,IAEpCoB,GADkBC,EAAAA,GAAAA,GAAkB,CAAC9tF,GAnEnB,MAoEoBA,EAEtC+tF,GAAyB7H,EAAAA,GAAAA,GAAiB+G,GAAe,IAE/D1rC,EAAAA,GAAAA,IAAU,KACJp7C,IAAajzB,IAAaD,EAAAA,IAAkBvE,GAAMgG,UACpDq4G,EAAmB,CAAErgH,SAAQwG,cAE9B,CAACxG,EAAQwG,EAAUizB,EAAUz3B,GAAMgG,WAEtCs5G,EAAAA,GAAAA,GAAiBthH,EAAQ0/G,EAAiBa,GAE1C,MAAMvlE,EAAShmC,QAAQurG,KAAmBN,GAExCpnC,IAAKF,IACHO,EAAAA,GAAAA,GAAkB,CACpBl+B,SACAumE,kBAAkB,EAClBxF,gBAAiB7C,KAGb,IAAErgC,EAAG,aAAEC,IAAiBkjC,EAAAA,GAAAA,GAAc,CAC1ChhE,SACA+iC,YAAam7B,EACbrgC,IAAKF,EACLsjC,cAAe9C,KAGVqI,EAAmBC,EAAiBC,IAAoB58B,EAAAA,GAAAA,KAEzD68B,GAAqBpoC,EAAAA,GAAAA,GAAgB,KACzCmoC,IACAtB,EAAW,CAAEpgH,SAAQ6F,UAAW06G,EAAer/G,GAAIof,SAAS,MAGxDshG,EAAerB,IAAiBsB,EAAAA,EAAAA,IAA6BtB,GAE7DuB,GAA0BvoC,EAAAA,GAAAA,GAAgB,KAC1CqoC,GACFzB,EAAqB,CAAEngH,OAAQugH,EAAcvgH,OAAQ6F,UAAW06G,EAAcr/G,GAAI4qC,OAAQ81E,MAIxFG,GAAuBxoC,EAAAA,GAAAA,GAAgB,KAC3CxvD,EAAW,CAAE/pB,SAAQwG,WAAUxF,KAAM,aAGjCghH,IAAqBzoC,EAAAA,GAAAA,GAAiB3d,IAC1C,MAAMqmD,EAAgBrmD,EAAEwgB,UAAYn7D,MAAMC,QAAQ8zC,GAC9CA,GAAiBktD,EAAAA,GAAAA,GAAcltD,EAAiBv0D,OAAQu0D,EAAiB76B,QAAQulF,GAAoB,IACrGA,EAECK,MACHt0G,EAAa,CACXzL,SAAQwG,WAAUX,UAAWo8G,EAAe3zD,mBAAmB,IAEjE4xD,EAAqB+B,OAIlBE,GAAcC,GAAkBC,KAAsBv9B,EAAAA,GAAAA,MAEvD,YAAEqV,GAAW,gBAAEmoB,KAAoBC,EAAAA,GAAAA,GAAaP,IAmCtD,GAAKlpC,GAAiBuoC,EAEtB,OACElrC,EAAAA,GAAAA,IAAA,OACE0C,IAAKA,EACLlmD,WAAWkjD,EAAAA,GAAAA,GACT,6BDrOe,WCqO4BqjC,EDrOa,WAAvB,WCqOwDvmF,GACzFoiD,SAAA,EAEAyrC,EAAsB,GAAKW,KAC3BhrC,EAAAA,GAAAA,IAACM,GAAAA,EAAM,CACLx/D,OAAK,EACLu6C,KAAK,UACLklB,MAAM,cACNC,UAAW/jB,EAAK,gCAChB0jB,QAAU6qC,OAA0Cj5G,EAAvB65G,EAAiChtC,SAAA,CAE7DzhD,IACCygD,EAAAA,GAAAA,GAAC8K,GAAAA,EAAO,CACNnI,MAAM,OACN/jD,WAAWkjD,EAAAA,GAAAA,GDnPgH,WCoPzGqkB,IAAqBinB,GAAoBjnB,OAI/DnmB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CACH7kC,KAAK,WACLrf,WAAWkjD,EAAAA,GAAAA,GACTqkB,GAAoBinB,GAAoBjnB,SAK/C0lB,IACC7rC,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLu6C,KAAK,UACLklB,MAAM,cACNC,UAAW/jB,EAAK,0BAChB0jB,QAASmrC,EAAgB1sC,UAEzBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,aAGf+hC,EAAAA,GAAAA,GAACyuC,GAAAA,EAAa,CACZxnE,OAAQwmE,EACRtqC,QAASwqC,EACTl1G,KAAMomD,EAAK,sBACX6vD,aAAc7vD,EAAK,eACnB8vD,eAAgBf,KAElBxrC,EAAAA,GAAAA,IAAA,OACExjD,WAAWkjD,EAAAA,GAAAA,GDnRwE,WCmRnCssC,IDnRoL,YCoRpO7rC,QAAS6jB,GACT+K,YAAaod,GACb/rC,IAAK3jB,EAAK4jB,MAAQ,WAAQtuE,EAAU6sE,SAAA,EAEpChB,EAAAA,GAAAA,GAAC2pC,GAAuB,CACtBnmG,MAAOipG,EACPnoG,MAAOioG,KAETvsC,EAAAA,GAAAA,GAACmJ,GAAAA,GAAU,CAACC,UAAWkkC,EAAuBngH,GAAI8wC,KAAK,gBAAgBrf,UD5R0T,WC4RpRoiD,SA9FnH,SAAyB4tC,EAAuB79G,EAAkB89G,EAAuBC,GACvF,MAAM,MAAExjH,EAAK,OAAE8+F,IAAW2kB,EAAAA,EAAAA,MACpBC,EAASj+G,GAAW69G,EACpBK,EAAoBJ,GAAe99G,EAEzC,OACEqxE,EAAAA,GAAAA,IAAA,OAAKxjD,UDpMuZ,WCoMzXoiD,SAAA,CAChC4tC,IAAiBE,IAAcG,IAC9BjvC,EAAAA,GAAAA,GAAA,OACEphD,UAAWunE,GACXoF,IAAKyjB,EACL1jH,MAAOA,EACP8+F,OAAQA,EACRoB,IAAI,GACJ0jB,WAAW,IAGdD,IAAsBH,IACrB9uC,EAAAA,GAAAA,GAAA,SACEurB,IAAKx6F,EACLzF,MAAOA,EACP8+F,OAAQA,EACR0B,aAAW,EACXF,yBAAuB,EACvBhtE,UAAWunE,KAGdyoB,IACI5uC,EAAAA,GAAAA,GAACmvC,GAAAA,EAAY,CAACP,aAAcI,EAAQI,UAAWnuG,QAAQ6tG,GAAYxjH,MAAOA,EAAO8+F,OAAQA,MAGpG,CAgESilB,CACCtC,EACAE,EACAJ,EACAK,MAGJ9qC,EAAAA,GAAAA,IAAA,OACExjD,WAAWkjD,EAAAA,GAAAA,GDrS+F,WCqS5DirC,GDrS8O,YCsS5RvqC,IAAK3jB,EAAK4jB,MAAQ,WAAQtuE,EAAU6sE,SAAA,EAEpCoB,EAAAA,GAAAA,IAAA,OAAKxjD,UDxS0S,WCwSjR4jD,IAAK3jB,EAAK4jB,MAAQ,WAAQtuE,EAAU6sE,SAAA,EAC9D2rC,IACA3sC,EAAAA,GAAAA,GAACsvC,GAAAA,EAAe,CACd72G,KAA8B,IAAxBg0G,EACF5tD,EAAK,4BACLA,EAAK,qBAAsB,CAAEv6C,MAAOooG,GAAuB,CAAEliG,YAAaiiG,MAIjFE,IAAmB9hB,EAAAA,GAAAA,GAAW8hB,OAEjC3sC,EAAAA,GAAAA,GAACmJ,GAAAA,GAAU,CACTC,UAAWkkC,EAAuBngH,GAClC8wC,KAAK,oBACLrf,UDtTmQ,WCsT3NoiD,UAExChB,EAAAA,GAAAA,GAAA,KAAGwC,IAAI,OAAO5jD,UDxToT,WCwT1RoiD,UACtChB,EAAAA,GAAAA,GAACuvC,GAAAA,EAAc,CACb1jH,QAASyhH,EACTkC,eAlQG,IAmQHC,QAASxuG,QAAQ8rG,GACjB2C,UAAWhE,aAKnB1rC,EAAAA,GAAAA,GAACgpC,GAAAA,EAAY,IACZ6E,IACC7tC,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLjlB,KAAK,OACL7+B,UDtU4V,WCuU5V2jD,QAASwrC,EACT4B,uBAAqB,EACrB51B,aAAej2B,EAAAA,QAAkC3vD,EAAnBk6G,GAC9Br0B,aAAel2B,EAAAA,QAAoC3vD,EAArBm6G,GAA+BttC,UAE5D4uC,EAAAA,GAAAA,GAAyB/wD,EAAMgvD,cC0C5C,IAAertC,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GACCoB,SAAQwG,WAAU+H,kBAAiB82E,eAEnC,MAAM,kBACJtmF,EAAiB,4BAAE24E,EAA2B,YAAEz2C,EAAW,aAAEu6B,IAC3D18D,EAAAA,EAAAA,KAAeF,GACboD,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1B8Y,GAAOC,EAAAA,EAAAA,KAAWna,EAAQoB,IAExBA,OAAQ+gC,EAAal7B,UAAWm7B,GAAmBC,EACrD2iF,EAAe7iF,GAAeC,GAChCn9B,EAAAA,EAAAA,KAAkBjF,EAAQmiC,EAAaC,QACvC94B,EAEJ,IAAIV,EACJ,GAAwB,WAApB+G,EAA8B,CAChC,MAAMgB,GAAYC,EAAAA,EAAAA,KAAgB5Q,EAAQoB,EAAQwG,GAClDgB,EAAgB+H,GAAW9O,MAC7B,MAAO,GAAwB,cAApB8N,EAAiC,CAC1C,MAAMxB,GAAeC,EAAAA,EAAAA,KAAmBpO,EAAQoB,EAAQwG,GACxDgB,EAAgBuF,GAActM,MAChC,MAAO,GAAwB,WAApB8N,GAAgC/H,IAAaD,EAAAA,GAAgB,CACtE,MAAMhB,GAAa8D,EAAAA,EAAAA,KAAiBzK,EAAQoB,EAAQwG,GACpDgB,EAAgBjC,GAAYiC,eAAiB,CAC/C,CAEA,MAAMukE,GAAeE,EAAAA,EAAAA,KAAkBrtE,EAAQoB,EAAQwG,EAAU,gBAE3D6/B,EAAcvtB,GAAMutB,YACpBw9E,EAAqBx9E,GAAeznC,EAAO8mB,aAAa9d,KAAKy+B,EAAY5gB,YACzEq+F,EAAwC,gBAAtBz9E,GAAarlC,KAAyBqlC,EAAYwQ,UAAO3uC,EAE3EiP,GAAgB7M,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU5H,EAAOiC,eAEhE,MAAO,CACLkrE,eACAhtE,oBACAglH,oBAAoBhvD,EAAAA,EAAAA,KAAyBn2D,EAAQymF,GACrD2rB,oBAAoBC,EAAAA,EAAAA,KAAqBryG,GACzCglH,eACA5hH,OACAwF,gBACAgzF,gBAAgBz6F,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAC7C03E,8BACAssC,qBAAsBzkH,KAAKE,IAAI,EAAG+7D,EAAa/6D,OAAS,GACxDqiB,gBAAiBlkB,EAAOkkB,gBACxBwb,UAAW1/B,EAAO0/B,UAClB8C,qBAAsBxiC,EAAOwiC,qBAC7ByiF,qBACAC,kBACA3sG,kBAnDcigE,CA3R4B6sC,EAC9CjkH,SACAwG,WACA+H,kBACA82E,WACAtZ,eACAilC,qBACAjyG,oBACA6kH,eACA5hH,OACAwF,gBACAg/F,aACAhM,iBACA9iB,8BACAssC,uBACAlhG,kBACAwb,YACA8C,uBACA4+E,wBACAD,qBACA8D,qBACAC,kBACA3sG,gBACA+oG,2BAEA,MAAM,mBACJgE,EAAkB,SAClB5iG,EAAQ,iBACR6iG,EAAgB,iBAChBC,EAAgB,sBAChBn6F,EAAqB,iBACrBtD,EAAgB,eAChB09F,EAAc,mBACdlsF,EAAkB,qBAClBs4C,IACE5yD,EAAAA,EAAAA,MAEE+0C,GAAO+iB,EAAAA,GAAAA,KACP2uC,GAAqB1rC,EAAAA,GAAAA,KAAO,IAC5B,SAAE2rC,IAAaj/B,EAAAA,EAAAA,OAEbjmF,MAAOH,IAAgBslH,EAAAA,GAAAA,MAEzB,UAAEC,IAAcn/B,EAAAA,EAAAA,MAEhBo/B,EAAuBxlH,GAAeQ,EAAAA,IACtCilH,EAAwBJ,GAAYxlH,EAEpC6lH,GAAehsC,EAAAA,GAAAA,MAEfisC,GAAmBtrC,EAAAA,GAAAA,GAAgB,KACvCphD,EAAmB,CAAEn4B,SAAQwG,WAAU/E,OAAQ,CAAC,MAG5CggG,GAAiBloB,EAAAA,GAAAA,GAAiBxrD,IACjCA,EAAMq2E,OAAmB0gB,QAAQ,2BAEtCZ,EAAmB,CAAElkH,SAAQwG,gBAI7B0+F,YAAa6f,EACbC,UAAWC,EACXl3B,aAAcm3B,EACdC,aAAcC,EACdC,WAAYC,IACVC,EAAAA,GAAAA,GAAa,CACfC,QAASX,EACTvuC,QAASmrB,EACTyC,UArG6B,MAwGzBuhB,GAAsBlsC,EAAAA,GAAAA,GAAgB,KAC1CzvE,WAAW,KACTw6G,EAAmBzxF,SAAU,GA5GD,OAgH1B6yF,IAAwBnsC,EAAAA,GAAAA,GAAgB,KACxCuqC,EACFrzC,EAAqB,CAAE55B,KAAMitE,IAG/Bn9F,EAAiB,CAAEs0B,WAAYj7C,MAG3B2lH,IAA2BpsC,EAAAA,GAAAA,GAAgB,KAC3CuqC,EACFrzC,EAAqB,CAAE55B,KAAMitE,IAG/BO,EAAe,CACbx1F,eAAgBg1F,EAAoBh1F,mBAIlC+2F,IAAkBrsC,EAAAA,GAAAA,GAAiB3d,IACvC,GAAK0oD,EAAmBzxF,QAAxB,CAIA,GADAyxF,EAAmBzxF,SAAU,EACzBwyD,EAAU,CACZ,MAAMwgC,EAAejhH,SAASyuE,cAA8BsuB,EAAAA,KAC5DkkB,GAAcn+E,MAChB,CAEA,GAAIspE,EAGF,OAFA/mF,SACAw7F,IAIF,GAAwB,WAApBl3G,GAAyD,IAAzBy1G,EAUlC,OATKO,GAAYI,GACf/oD,EAAE0mB,kBACFhhE,EAAS,CAAEpgB,QAAIgH,GAAa,CAAE8S,uBAAuB,KAErDopG,SAGFqB,IAKFtB,IACAsB,GA7BuC,IAgCnCK,IAAoBla,EAAAA,GAAAA,GAAsBoY,GAC1C/1B,QACkB/lF,IAAtB49G,IAAmCA,GAAoB9B,EAAuB8B,QAAoB59G,EAG9F69G,GAAsB/wG,QAAQ4uG,GAC9BoC,GAAyBvB,GAAasB,GACtCE,GAA4BF,KAAwBtB,GAEpD,qBAAE9lC,IAAyBd,GAAoBjrB,EAAM9vC,EAAiBwb,GAAa8C,GAAsB,GAwF/G,SAAS8kF,GAAiBC,GAAU,EAAOC,GAAoB,GAC7D,OACEjwC,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,cAAaoiD,SAAA,EAC1BhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLu6C,KAAK,UACLklB,MAAM,cACNJ,QAASsvC,GACTjvC,UAAW/jB,EAAKuzD,EAAU,QAAU,QAAQpxC,UAE5ChB,EAAAA,GAAAA,GAAA,OAAKphD,WAAWkjD,EAAAA,GAAAA,GAAe,uBAAwBswC,GAAW,kBAEnEC,IAAqBryC,EAAAA,GAAAA,GAACS,GAAa,MAG1C,CAIA,OAFAiV,EAAAA,GAAAA,GAAgBm7B,IAGdzuC,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,eAAekmD,IAAK+rC,EAAa7vC,SAAA,EAC9ChB,EAAAA,GAAAA,GAACmJ,GAAAA,GAAU,CACTlrC,KAAM0lC,EAA8B,OAAS,YAC7CyF,UAAW6mC,EACXh2B,eAAa,EACbC,oBAAqBA,GAAoBlZ,SA9GrB,WAApBxmE,IACE/H,IAAaD,EAAAA,IAAkB4Q,GAAiBnV,GAAMgG,SAwB9D,WAEE,MAAMq+G,EAAsBlvG,EAAgBy7C,EAAK,sBAAmB1qD,EAE9DkP,EAAaD,EAAgB1M,OAAOjE,GAAYxG,EAEhDsmH,EAAgBtkH,GAAMge,YAAche,EAAKukH,kBAAqBnvG,EACpE,OACE++D,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACI2vC,GAAwBV,EAAuB,IAAMkC,GAAiBvB,GAAwBxtG,IAChG48D,EAAAA,GAAAA,GAAA,OACEphD,UAAU,oBACVuyE,YAAa6f,EACbC,UAAWC,EACXl3B,aAAcm3B,EACdC,aAAcC,EACdC,WAAYC,EAAwBvwC,UAEnChlE,EAAAA,EAAAA,IAASu2G,IACRvyC,EAAAA,GAAAA,GAACyyC,GAAAA,EAAe,CAEdlnG,OAAQgnG,EACRv6C,aAAcA,EACdx1B,OAAQooC,IAAwB0nC,EAChCI,SAAUzxG,QAAQ2pE,IAClB+nC,cAAY,EACZC,iBAAe,EACfC,WAAYpsB,EACZqsB,oBAAkB,EAClB1vG,cAAeA,EACf2vG,kBAAmBC,EAAAA,GAAkBC,mBACrCrmC,gBAtOY,GAuOZsmC,OAAK,EACLC,mBAAoBxB,IAbfY,IAgBPvyC,EAAAA,GAAAA,GAACozC,GAAAA,EAAa,CAEZnnH,OAAQsmH,EACR9/G,SAAW2Q,OAA2BjP,EAAX1B,EAC3BulE,aAAcA,EACdq7C,oBAAqBplH,GAAMge,YAC3Bu2B,OAAQooC,IAAwB0nC,EAChCI,SAAUzxG,QAAQ2pE,IAClBgoC,gBAAiBngH,IAAaD,EAAAA,GAC9BmgH,aAAclgH,IAAaD,EAAAA,GAC3BsgH,oBAAkB,EAClBD,WAAS,EACTzvG,cAAeA,EACf2vG,kBAAmBC,EAAAA,GAAkBC,mBACrCrmC,gBAzPY,GA0PZumC,mBAAoBvB,GACpBsB,OAAK,GAfAX,OAqBjB,CAjFae,IAKTlxC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,CACGmxC,MACDnyC,EAAAA,GAAAA,GAAA,MAAAgB,cACqB7sE,IAAlBV,EACqB,WAApB+G,EACG/G,EACGorD,EAAK4zC,EAAa,WAAa,UAAWh/F,EAAe,KACzDorD,EAAK4zC,EAAa,gBAAkB,gBAClB,WAApBj4F,EAAgCqkD,EAAK,sBAAuBprD,EAAe,KACrD,cAApB+G,EACAisF,EAAiB5nC,EAAK,aAAeA,EAAK,WAAYprD,EAAe,UACnEU,EACN0qD,EAAK,mBA+FXqzD,KACAlyC,EAAAA,GAAAA,GAAC+rC,GAAmB,CAElB9/G,OAAQA,EACRwG,SAAUA,EACV+H,gBAAiBA,EACjB2xG,qBAAsBA,EACtBH,mBAAoBA,EACpBC,sBAAuBA,GANlBhgH,IAUTm2E,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,eAAcoiD,SAAA,CAC1BixC,KACCjyC,EAAAA,GAAAA,GAACilC,GAAW,KAEdjlC,EAAAA,GAAAA,GAACuzC,GAAAA,EAAa,CACZtnH,OAAQA,EACRwG,SAAUA,EACV+H,gBAAiBA,EACjB82E,SAAUA,EACVkiC,kBAAmBvB,c,oDC/W7B,MC+JA,IAAezxC,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUoB,aACT,MAAM4tB,GAAMwf,EAAAA,EAAAA,KAAUxuC,EAAQoB,GACxBwnH,GAAmB9kB,EAAAA,EAAAA,KAAuB9jG,EAAQoB,GACxD,MAAO,CACL+wG,MAAO/7F,QAAQ4Y,GACf45F,qBANcpwC,CA7HFqwC,EAChBznH,SACA+wG,QACAxiG,kBACAi5G,mBACArO,wBAEA,MAAM,cACJ5V,EAAa,QACb53D,EAAO,eACP83D,EAAc,kBACdC,IACE7lF,EAAAA,EAAAA,MAEE+0C,GAAOgiB,EAAAA,GAAAA,KAEP55B,EAAShmC,QAAQ+7F,GAASyW,GAAwC,WAApBj5G,GAE9Cm5G,GAA4BlO,EAAAA,GAAAA,GAAiBgO,IAE7C,IAAE3uC,EAAG,aAAEC,IAAiBkjC,EAAAA,GAAAA,GAAc,CAC1ChhE,SACA2sE,oBAAoB,EACpB1L,cAAe9C,KAGX,kBACJjhB,EAAiB,kBAAE4J,EAAiB,wBACpCqC,EAAuB,kBAAEhM,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBzf,GAAMC,GAAc,GAEzCqhB,GAAc5gB,EAAAA,GAAAA,GAAgB,KAC7BmuC,IAELjkB,EAAe,CAAEj9E,SAAUkhG,EAA0BlhG,WACrDmlB,EAAQ,CAAEjkB,IAAKggG,EAA0BhgG,IAAKC,iBAAiB,OAG3DigG,GAAmBruC,EAAAA,GAAAA,GAAiB3d,IACxC,IAAK8rD,EAA2B,OAChC,MAAM,SACJlhG,EAAQ,eAAE2yC,EAAc,UAAEC,EAAS,YAAEC,GACnCquD,EACJ9rD,EAAE0mB,kBACFohB,EAAkB,CAChBl9E,WACA2yC,iBACAC,YACAC,kBAUJ,IANAwb,EAAAA,GAAAA,IAAU,KACJiE,GAAgB4uC,GAClBnkB,EAAc,CAAE/8E,SAAUkhG,EAA0BlhG,YAErD,CAACsyD,EAAc4uC,EAA2B1nH,KAExC84E,IAAiB4uC,EACpB,OAGF,MAAM,SACJlhG,EAAQ,UAAE4yC,EAAS,eAAED,EAAc,YAAEE,GACnCquD,GAEE,UACJriB,EAAS,QACT9gG,EAAO,MACPE,EAAK,MACL6J,GACEo5G,EAEJ,OACEvxC,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEoB,EAAAA,GAAAA,IAAA,OACE0C,IAAKA,EACLlmD,UDhHe,WCiHf2jD,QAAS6jB,EACT+K,YAAaf,EACb5L,cAAeJ,EAAkBpjB,SAAA,EAEjCoB,EAAAA,GAAAA,IAAA,OAAKxjD,WAAWkjD,EAAAA,GAAAA,GDrHoB,WCqHWwvB,IAAawiB,EAAAA,GAAAA,GAAqBxiB,IAAYtwB,SAAA,EAC3FoB,EAAAA,GAAAA,IAAA,QAAMxjD,UDtH8C,WCsHvBoiD,SAAA,CAC1BniB,EAAK,uBACNmhB,EAAAA,GAAAA,GAAC+xB,GAAAA,EAAW,CAACxvB,QAASsxC,EAAkBj1F,UDxHwF,WCwH9DoiD,SAC/DniB,EAAK,sCAGVmhB,EAAAA,GAAAA,GAAA,OAAKphD,UD5HsF,WC4H9DoiD,SAAEzmE,IAC9B/J,EAAQiI,OACPunE,EAAAA,GAAAA,GAAA,OAAKphD,UD9HsG,WC8H/EoiD,UACzBiG,EAAAA,GAAAA,IAAuB,CACtBxuE,KAAMjI,EAAQiI,KAAKA,KACnB0J,SAAU3R,EAAQiI,KAAK0J,gBAK9BzR,IACCsvE,EAAAA,GAAAA,GAACuM,GAAAA,EAAM,CACL9uB,KAAK,QACL/sD,MAAOA,EACPkuB,UD1IsE,gBC8I3EmvE,IACC/tB,EAAAA,GAAAA,GAAC+zC,GAAAA,EAAoC,CACnC9sE,OAAQk9C,EACRsK,OAAQV,EACRoE,WAAYrtB,EACZryD,SAAUA,EACV2yC,eAAgBA,EAChBC,UAAWA,EACXC,YAAaA,EACb6d,QAASkhB,EACT5J,oBAAqB6J,UCtF/B,IAAe9jB,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUgC,aACT,MAAMglC,GAAemiF,EAAAA,EAAAA,KAAmBnpH,EAAQgC,GAE1ConH,EAAkBpiF,GAAcoiF,gBAGtC,MAAO,CACLA,kBACAC,SAJerpH,EAAOg/B,SAASkJ,4BAA4BzjC,SAASzC,KALtDw2E,CArCmC8wC,EACrDtnH,SACAqnH,WACAD,kBACA7O,wBAEA,MAAMn+D,EAAShmC,SAASizG,GAAYD,IAE9B,6BACJG,IACEtqG,EAAAA,EAAAA,OAEE,IAAEg7D,EAAG,aAAEC,IAAiBkjC,EAAAA,GAAAA,GAAc,CAC1ChhE,SACAihE,cAAe9C,IAGXiP,GAAe7uC,EAAAA,GAAAA,GAAgB,KACnC4uC,EAA6B,CAAEvnH,aAIjC,IAFA6kF,EAAAA,GAAAA,GAAW2iC,EAAeH,OAAiC//G,EAtBjC,KAwBrB4wE,GAAiBkvC,EAEtB,OACE7xC,EAAAA,GAAAA,IAAA,OAAK0C,IAAKA,EAAKlmD,UCtDI,WDsDmBoiD,SAAA,EACpChB,EAAAA,GAAAA,GAAA,QAAMphD,UCvD6B,WDuDNoiD,UAC3BhB,EAAAA,GAAAA,GAACmS,GAAAA,EAAW,CACVzgE,WAAYuiG,EAAgBK,OAC5B72D,KAhCyB,OAmC5Bw2D,EAAgBhmG,kB,gBErBvB,MA2KA,IAAeuyD,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUoB,aAAQ,CACjBa,cAAejC,EAAOiC,cACtBiY,MAAMC,EAAAA,EAAAA,KAAWna,EAAQoB,KAHTo3E,CA3K8BkxC,EAChDtoH,SACA2yB,YACA41F,iBACAC,gBACAxY,gBACAyY,kBACA3vG,OACAjY,gBACAs4G,wBAEA,MAAM,qBACJuP,EAAoB,UACpBC,EAAS,WACTC,EAAU,WACVC,EAAU,aACVC,EAAY,eACZC,EAAc,cACdC,EAAa,mBACbC,EAAkB,oBAClBC,IACErrG,EAAAA,EAAAA,MAEE+0C,GAAO+iB,EAAAA,GAAAA,MACNwzC,EAAsBC,EAAoBC,IAAuBvkC,EAAAA,GAAAA,MACjEwkC,EAAkBC,IAAuB7zC,EAAAA,GAAAA,KAAkB,IAC3D8zC,EAAkBC,IAAuB/zC,EAAAA,GAAAA,KAAkB,GAE5Dg0C,GAAgBlQ,EAAAA,GAAAA,GAAiB1gG,GACjC9W,EAAO0nH,IAAiB1wG,EAAAA,EAAAA,IAAc0wG,GAAiBA,OAAgBxhH,EACvEqL,EAAOm2G,IAAiBrjG,EAAAA,EAAAA,IAAcqjG,GAAiBA,OAAgBxhH,EACvEyhH,EAAe3nH,IAAQ4nH,EAAAA,EAAAA,IAAiB5nH,GAExC6nH,GAAyBrQ,EAAAA,GAAAA,GAAiBxJ,GAC1C8Z,GAA2BtQ,EAAAA,GAAAA,GAAiBiP,GAC5CsB,GAAyBvQ,EAAAA,GAAAA,GAAiBgP,GAC1CwB,GAA0BxQ,EAAAA,GAAAA,GAAiB+O,GAE3C0B,GAAmB1wC,EAAAA,GAAAA,GAAgB,KACvCmvC,EAAqB,CAAEppG,OAAQtf,IAC3BgqH,GACFf,EAAmB,CAAE/nH,GAAIlB,MAIvBkqH,GAAqB3wC,EAAAA,GAAAA,GAAgB,KACzC8vC,IACAV,EAAU,CAAErpG,OAAQtf,IAChB+pH,GAA0BT,GAC5BV,EAAW,CAAE5oH,WAEXwpH,GACFX,EAAW,CAAE7oH,aAIXmqH,GAAwB5wC,EAAAA,GAAAA,GAAgB,KAC5C2vC,EAAoB,CAAEtoH,OAAQZ,MAG1BoqH,GAAuB7wC,EAAAA,GAAAA,GAAgB,KAC3C8vC,IACAT,EAAW,CAAE5oH,WACT2pH,GACFZ,EAAe,CAAE/oH,SAAQsf,OAAQze,IACjCmoH,EAAc,CAAEhpH,SAAQwgB,oBAAoB,KAE5CsoG,EAAa,CAAE9oH,aAMbqqH,EAAcr1G,SAFCg7F,GAAiByY,GAAmBD,IAEb1vG,IAE5C+7D,EAAAA,GAAAA,IAAU,KACHw1C,GACHhB,KAED,CAACgB,IAEJ,MAAM,IAAExxC,EAAG,aAAEC,IAAiBkjC,EAAAA,GAAAA,GAAc,CAC1ChhE,OAAQqvE,EACRpO,cAAe9C,IAGjB,GAAKrgC,EAEL,OACE3C,EAAAA,GAAAA,IAAA,OACE0C,IAAKA,EACLlmD,WAAWkjD,EAAAA,GAAAA,GAAe,iBAAkBljD,GAC5C4jD,IAAK3jB,EAAK4jB,MAAQ,WAAQtuE,EAAU6sE,SAAA,CAEnC80C,IACC91C,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL6zC,QAAM,EACNl8B,OAAK,EACL58B,KAAK,OACL7+B,UAAU,yBACV2jD,QAAS2zC,EAAiBl1C,SAEzBniB,EAAK,yBAGTk3D,IACC/1C,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLC,MAAM,SACN4zC,QAAM,EACNl8B,OAAK,EACL58B,KAAK,OACL7+B,UAAU,yBACV2jD,QAAS8yC,EAAmBr0C,SAE3BniB,EAAK,2BAGTm3D,IAA2BD,IAC1B/1C,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLC,MAAM,SACN4zC,QAAM,EACNl8B,OAAK,EACL58B,KAAK,OACL7+B,UAAU,yBACV2jD,QAAS8yC,EAAmBr0C,SAE3BniB,EAAK,gCAGVmhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLgvE,QAAM,EACNz0B,KAAK,UACLklB,MAAM,cACNJ,QAAS6zC,EACTxzC,UAAW/jB,EAAK,SAASmiB,UAEzBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,aAEbmkC,EAAAA,GAAAA,IAACqsC,GAAAA,EAAa,CACZxnE,OAAQmuE,EACRjyC,QAASmyC,EACT/6G,MAAOskD,EAAK,iBAAkBr/C,GAAO0qB,EAAAA,EAAAA,IAAuB1qB,IAAQ6tD,EAAAA,EAAAA,IAAaxO,EAAM5wD,IACvFwK,KAAM+G,EACFq/C,EAAK,mCAAmCpzC,EAAAA,EAAAA,IAAgBjM,IACxDq/C,EAAK,mCACT23D,sBAAoB,EACpB9H,aAAc7vD,EAAK,SACnB8vD,eAAgBnvG,EAAO22G,EAAqBE,EAAqBr1C,SAAA,CAEhExhE,IACCwgE,EAAAA,GAAAA,GAACy2C,GAAAA,EAAQ,CACP73F,UAAU,kBACVkxD,MAAOjxB,EAAK,kBACZkxB,QAAS0lC,EACTiB,QAAShB,IAGZl2G,GAAQi1G,IACPz0C,EAAAA,GAAAA,GAACy2C,GAAAA,EAAQ,CACP73F,UAAU,2CACVkxD,MAAOjxB,EAAK,cACZkxB,QAASwlC,EACTmB,QAASlB,aC3MrB,IAAgB,KAAO,WAAW,QAAU,WAAW,aAAe,WAAW,gBAAkB,YC4FnG,IAAeh1C,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUgC,aACT,MAAMoB,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQgC,GAC1BglC,GAAezsB,EAAAA,EAAAA,KAAmBva,EAAQgC,GAC1C8pH,EAA0B9kF,GAAchI,UAAU8sF,wBAExD,MAAO,CACLA,0BACA1oH,SARco1E,CAxDqCuzC,EACvDD,0BACA1oH,OACApB,SACAu4G,wBAEA,MAAMn+D,EAAShmC,QAAQ01G,GACjB93D,GAAOgiB,EAAAA,GAAAA,MAEP,oBACJg2C,IACE/sG,EAAAA,EAAAA,OAEE,IAAEg7D,EAAG,aAAEC,IAAiBkjC,EAAAA,GAAAA,GAAc,CAC1ChhE,SACAihE,cAAe9C,IAGX0R,GAAetxC,EAAAA,GAAAA,GAAgB,KACnCqxC,EAAoB,CAAEtrG,OAAQ1e,MAGhC,IAAKk4E,IAAiB4xC,EAAyB,OAE/C,MAEM9qH,EAAUgzD,EAAK,+BAAgC,CACnD95C,KAHe9W,GAAOoxD,EAAAA,EAAAA,IAAaR,EAAM5wD,QAAQkG,EAIjDuW,QAAQ0wF,EAAAA,EAAAA,GAAkBv8C,EACxB83D,EACA,CAAEtb,QAAQ,EAAMz8E,UAAWunE,GAAO4wB,gBAAiBzb,mBAAoBnV,GAAO6wB,gBAC/E,CACDtsB,cAAc,EACdD,WAAW,IAGb,OACEroB,EAAAA,GAAAA,IAAA,OAAK0C,IAAKA,EAAKlmD,UAAWunE,GAAO8wB,KAAKj2C,SAAA,EACpChB,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAAOt6F,QAAQm1E,SAC5Bn1E,KAEHm0E,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL6zC,QAAM,EACNW,mBAAiB,EACjB3b,MAAI,EACJlhB,OAAK,EACL58B,KAAK,OACL7+B,UAAWunE,GAAOpuD,OAClBwqC,QAASu0C,EAAa91C,SAErBniB,EAAK,0BCtCRs4D,GAAsB,CAAE/sB,OAAQ,GAwHtC,IAAe5pB,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GACCoB,aAEA,MAAM,YAAEihC,IAAgBniC,EAAAA,EAAAA,KAAeF,GACjCoD,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1B2lC,GAAexsB,EAAAA,EAAAA,KAAmBva,EAAQoB,IAExCA,OAAQ+gC,EAAal7B,UAAWm7B,GAAmBC,EACrD2iF,EAAe7iF,GAAeC,GAChCn9B,EAAAA,EAAAA,KAAkBjF,EAAQmiC,EAAaC,QACvC94B,EAEEijH,EAAqBn2G,SAAQkjB,EAAAA,EAAAA,KAA0Bt5B,IAE7D,MAAO,CACLoD,OACA2jC,eACAylF,sBAAuBp2G,QAAQ4uG,GAC/BuH,uBAnBc/zC,CAtHMi0C,EACxB14F,YACA3yB,SACAwG,WACA+H,kBACAvM,OACA2jC,eACAq6E,wBACAD,qBACAqL,wBACAD,qBACAjL,2BAEA,MAAM,SAAEtiF,GAAa+H,GAAgB,CAAC,GAEhC,UAAE8+E,IAAcn/B,EAAAA,EAAAA,OACfgmC,EAAqBC,IAAuB7V,EAAAA,GAAAA,IAAqBwV,KACjEM,EAAgBC,IAAkB/V,EAAAA,GAAAA,IAAqBwV,KACvDQ,EAAmBC,IAAqBjW,EAAAA,GAAAA,IAAqBwV,KAC7DU,EAAoBC,IAAsBnW,EAAAA,GAAAA,IAAqBwV,KAC/DY,EAAeC,IAAiBrW,EAAAA,GAAAA,IAAqBwV,KACrDc,EAAyBC,IAA2BvW,EAAAA,GAAAA,IAAqBwV,KACzEgB,EAA2BC,IAA6BzW,EAAAA,GAAAA,IAAqBwV,IAE9EjF,EAA4BmF,IAA0B3G,EAEtD2H,GAAmBxzC,EAAAA,GAAAA,KAAO,IAC1B,aACJE,EAAY,IACZD,IACEK,EAAAA,GAAAA,GAAkB,CACpBl+B,QAASmwE,EACThyC,kBAAkB,EAClBuD,mBAAmB,IAkCrB,IA/BA2vC,EAAAA,GAAAA,GAAc,KACZD,EAAiBv5F,SAAU,KAG7Bm4E,EAAAA,GAAAA,GAAgB,KACd,MAAMshB,EAAmBhB,IACnBiB,EAAuBP,IACvBQ,EAAchB,IAOdiB,EAAa,CAACH,EANGZ,IACCE,IAMLW,EAAsBC,EALtBV,IACMI,KAMnBQ,EAAgBN,EAAiBv5F,QACjC85F,EAAcF,EAAWnwG,OAAO,CAACC,EAAKszB,IAAUtzB,EAAMszB,EAAMsuD,OAAQ,GAEpEyuB,EAAehoH,SAAS2rF,eAAe,gBACxCq8B,KAELC,EAAAA,GAAAA,GAAoBJ,EAAYC,IAEhCI,EAAAA,GAAAA,IAAeF,EAAc,CAC3B,+BAAgC,GAAGD,UAEpC,CAACrB,EAAqBI,EAAmBF,EAC1CI,EAAoBE,EAAeE,EAAyBE,IAEzDpzC,EAEL,OACE3C,EAAAA,GAAAA,IAAA,OAAK0C,IAAKA,EAAKlmD,WAAWkjD,EAAAA,GAAAA,GCxHP,WDwHmCljD,GAAWoiD,SAAA,EAC/DhB,EAAAA,GAAAA,GAACilC,GAAW,CACVE,aAAW,EACXC,kBAAmBoS,EACnBtgE,SAAUw5D,IAEXj+G,IAAaD,EAAAA,KAAmBvE,GAAMgG,UACrC+rE,EAAAA,GAAAA,GAACg5C,GAAAA,EAAgB,CACf/sH,OAAQA,EACRm5G,kBAAmBwS,KAGvB53C,EAAAA,GAAAA,GAACu0C,GAAc,CACbtoH,OAAQA,EACRgwG,cAAepyE,GAAUoyE,cACzByY,gBAAiB7qF,GAAU6qF,gBAC3BD,cAAe5qF,GAAU4qF,cACzBD,eAAgB3qF,GAAU2qF,eAC1BpP,kBAAmB0S,KAErB93C,EAAAA,GAAAA,GAACm0C,GAAmB,CAClBtnH,OAAQZ,EACRm5G,kBAAmB8S,KAErBl4C,EAAAA,GAAAA,GAAC42C,GAAqB,CACpB/pH,OAAQZ,EACRm5G,kBAAmBgT,KAErBp4C,EAAAA,GAAAA,GAAC+rC,GAAmB,CAClB9/G,OAAQA,EACRwG,SAAUA,EACV+H,gBAAiBA,EACjB2xG,qBAAsBA,EACtBH,mBAAoBA,EACpBC,sBAAuBA,EACvB7G,kBAAmBsS,EACnBvS,aAAW,EACX+G,YAAagG,KAEflyC,EAAAA,GAAAA,GAAC0zC,GAAS,CACRznH,OAAQA,EACRuO,gBAAiBA,EACjB4qG,kBAAmB4S,UElI3B,IAAex3C,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAU0gB,aACT,MAAM/L,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQ0gB,GAEhC,MAAO,CACL0tG,UAAU/uF,EAAAA,EAAAA,IAAuB1qB,KALnB6jE,CAdpB,UAAoC,SAAE41C,IACpC,MAAMp6D,GAAO+iB,EAAAA,GAAAA,MACP,iBAAEhvD,IAAqB9I,EAAAA,EAAAA,MAEvBgxF,GAAyBt1B,EAAAA,GAAAA,GAAgB,IAAM5yD,KAErD,OACEwvD,EAAAA,GAAAA,IAAA,OAAApB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,OAAAgB,SAAMniB,EAAK,sCAAuCo6D,MAClDj5C,EAAAA,GAAAA,GAACmrB,GAAAA,EAAI,CAAC+tB,WAAS,EAAC32C,QAASu4B,EAAuB95B,SAAEniB,EAAK,iDAG7D,IChBA,GAP6C8gB,IAC3C,MAAM,OAAE14B,GAAW04B,EACbw5C,GAAmBt5C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,oBAAqBp5B,GAE7E,OAAOkyE,GAAmBn5C,EAAAA,GAAAA,GAACm5C,EAAgB,IAAKx5C,SAAYxrE,GCG9D,GAPyCwrE,IACvC,MAAM,SAAEtY,GAAasY,EACfy5C,GAAev5C,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,gBAAiBhZ,GAAU,GAE/E,OAAO+xD,GAAep5C,EAAAA,GAAAA,GAACo5C,EAAY,IAAKz5C,SAAYxrE,GCsKhDklH,GAA8B,IAAM36D,EAAAA,IAqjB1C,IAAe8hB,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUymF,eACT,MAAM14C,GAAQq0C,EAAAA,EAAAA,KAAYpiF,IAExB2hE,UAAW8sD,EAAqBC,WAAYC,EAAgB,gBAAEnV,EAAe,aAAEzJ,IAC7EC,EAAAA,EAAAA,KAAkBhwG,EAAQ+tC,IAAU,CAAC,GAEnC,aACJ6uB,EAAY,kBAAEz8D,EAAiB,wBAAE6N,EAAuB,YACxD4rD,EAAW,aAAED,EAAY,4BAAEmf,EAA2B,kBACtD5e,EAAiB,2BAAEJ,IACjB55D,EAAAA,EAAAA,KAAeF,GACb2M,GAAqBC,EAAAA,EAAAA,KAAyB5M,IAC9C,gBAAEK,GAAoBL,EAEtBixC,EAAoB,CACxBlD,QACA4gF,mBACAnV,kBACAzJ,eACA5vG,oBACAglH,oBAAoBhvD,EAAAA,EAAAA,KAAyBn2D,EAAQymF,GACrDgoC,sBACA70B,sBAAuBxjF,SAAQkjB,EAAAA,EAAAA,KAA0Bt5B,IACzDoyG,oBAAoBC,EAAAA,EAAAA,KAAqBryG,GACzC4uH,kBAAmBx4G,QAAQwjD,GAC3Bi1D,iCAAkCz4G,QAAQ0jD,GAC1Cg1D,uBAAwB14G,QAAQujD,GAChCo1D,wBAAyB34G,QAAQ8jD,GACjC80D,yBAAyB7vD,EAAAA,EAAAA,KAA0Bn/D,GACnDolH,qBAAsBzkH,KAAKE,IAAI,EAAG+7D,EAAa/6D,OAAS,GACxDmM,0BACA3N,mBAGF,IAAKsM,EACH,OAAOskC,EAGT,MAAM,OAAE7vC,EAAM,SAAEwG,EAAUxF,KAAMuN,GAAoBhD,EAC9C/I,GAAYuN,EAAAA,EAAAA,IAAS/P,GACrBgC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1B4tB,GAAMwf,EAAAA,EAAAA,KAAUxuC,EAAQoB,GACxBuP,GAAYC,EAAAA,EAAAA,KAAgB5Q,EAAQoB,EAAQwG,GAC5CwY,EAAehf,GAASif,EAAAA,EAAAA,KAAmBrgB,EAAQoB,QAAUkI,EAC7Dy9B,EAAe3lC,GAASmZ,EAAAA,EAAAA,KAAmBva,EAAQoB,QAAUkI,EAE7D3C,GAAa8D,EAAAA,EAAAA,KAAiBzK,EAAQoB,EAAQwG,GAC9CqnH,EAAkB74G,SAASzP,GAAY86B,gBAAkB96B,GAAYuoH,eACrE/lH,GAAQgB,EAAAA,EAAAA,KAAYnK,EAAQoB,EAAQwG,GACpCqyF,EAAU72F,IAAQ+rH,EAAAA,EAAAA,IAAiB/rH,EAAM+F,EAAO8lH,EAAiB7uG,GACjEgvG,GAAkB1nG,EAAAA,EAAAA,KAA0B1nB,EAAQoB,GACpDiuH,EAA0C,WAApB1/G,EACtB2/G,EAAmC,WAApB3/G,GAAgC/H,IAAaD,EAAAA,GAC5DuwF,EAAY9hF,QAAQhT,IAAQ2e,EAAAA,EAAAA,IAAc3e,IAC1CmsH,EAAen5G,QACnBhT,GAAQksH,IAAiBp3B,IAAal2E,EAAAA,EAAAA,IAAiB5e,KAAUA,EAAKiK,cAAgBjK,EAAKs7B,eACvFt7B,EAAKge,aAELouG,EAAmBp5G,QAAQhT,GAAMiK,aAAejK,EAAKqsH,cACrDC,EAAwBt5G,QAAQhT,GAAMiK,aAAejK,EAAKusH,eAC1D1jD,IAAgBroE,IAAYgsH,EAAAA,EAAAA,KAAoB5vH,EAAQoB,GACxDyuH,EAAgBz5G,QAAQ4Y,GAAOi9C,GAC/B6jD,GAAeD,GAAiBT,EAChCW,EAAa9jD,IAAkBj9C,EAC/BghG,EAAqB55G,QACzBhT,IAAQuyB,EAAAA,EAAAA,IAAYvyB,KAAUgd,GAE1BtD,GAAiBxG,EAAAA,EAAAA,KAAYtW,EAAQoB,EAAQwG,IAAWnB,UACxDwpH,IAAyB7sH,GAAMgG,SACjCxB,IAAaD,EAAAA,KAAmBmV,IAAmB3S,EAAAA,EAAAA,KAAYnK,EAAQoB,EAAQ8uH,EAAAA,MAAmBC,SAEhGC,GAAmBC,EAAAA,EAAAA,KAAuBrwH,EAAQoB,GAClDkvH,EAA6Bl6G,QAAQhT,GAAMge,cAAgBtE,GAAkBszG,GAC7Ex4F,GAASmJ,EAAAA,EAAAA,KAAa/gC,EAAQoB,GAE9BmX,GAAgB7M,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU5H,EAAOiC,eAC1DsuH,GAAwBh4G,GAAiB3Q,IAAaqsG,EAAAA,IAEtD+M,GAAW59G,IACfQ,GACER,GAAM8uG,YAAeha,KAAcs4B,EAAAA,EAAAA,IAAkBptH,EAAM,iBACxDqtH,EAAAA,EAAAA,IAAiBrtH,EAAM,gBAIxBstH,IAAWn2G,EAAAA,EAAAA,KAAmBva,EAAQoB,GAEtC4xG,GAA0B0d,IAAU1d,wBACpC34F,IAAoBojD,EAAAA,EAAAA,KAA4Bz9D,EAAQoB,GACxDu1E,IAAkBtyD,EAAAA,EAAAA,KAA0BrkB,GAC5Cq0C,GAAoBr0C,EAAOq0C,kBAC3Bs8E,GAAmBt8E,IACrB9sC,EAAAA,EAAAA,KAAWvH,EAAQq0C,SAAqB/qC,EAE5C,MAAO,IACF2nC,EACH7vC,SACAwG,WACA+H,kBACAvM,OACA0Z,iBACAlZ,YACAgtH,sBAAuBx6G,QAAQ2wB,GAAc/H,UAC7C4oE,WAAYqnB,EACZh1B,SACGo1B,KACIjsH,GAAQ62F,KACTm1B,KACCI,GAAoBpsH,GAAMiK,eAC3B4iH,IACAK,IACA/3G,KACCo+D,IAAmBg6C,IAAkBruH,KAAOlB,GACnDiuH,sBACAwB,wBAAyBztH,GAAMytH,wBAC/BC,oBAAqB1tH,GAAM0tH,oBAC3BlP,oBAAqBjxG,EAAYA,EAAU9O,OAAS,EACpDi3E,8BACAof,YACAq3B,eACAO,cACAD,gBACAL,mBACAE,wBACAM,qBACAr/G,YACAqwG,YACA+O,aACAx3G,gBACAg4G,yBACAvd,2BACAp7E,SACAvd,qBACAs8D,mBACAg6C,oBACAL,+BAxIc93C,CAnjBpB,UAAsB,cACpBu4C,EAAa,OACb3vH,EAAM,SACNwG,EAAQ,WACRggG,EAAU,gBACVj4F,EAAe,SACf82E,EAAQ,KACRrjF,EAAI,eACJ0Z,EAAc,UACdlZ,EAAS,oBACTyrH,EAAmB,QACnBp1B,EAAO,wBACP42B,EAAuB,oBACvBC,EAAmB,oBACnBlP,EAAmB,iBACnB+M,EAAgB,MAChB5gF,EAAK,gBACLyrE,EAAe,aACfzJ,EAAY,kBACZ5vG,EAAiB,mBACjBglH,EAAkB,oBAClBsJ,EAAmB,gBACnBpuH,EAAe,sBACfu5F,EAAqB,mBACrBwY,EAAkB,kBAClBwc,EAAiB,iCACjBC,EAAgC,uBAChCC,EAAsB,wBACtBC,EAAuB,wBACvBC,EAAuB,4BACvBl2C,EAA2B,qBAC3BssC,EAAoB,UACpBltB,EAAS,sBACT04B,EAAqB,aACrBrB,EAAY,YACZO,EAAW,cACXD,EAAa,wBACb7hH,EAAuB,iBACvBwhH,EAAgB,sBAChBE,EAAqB,mBACrBM,EAAkB,UAClBr/G,EAAS,SACTqwG,GAAQ,WACR+O,GAAU,cACVx3G,GAAa,sBACbg4G,GAAqB,wBACrBvd,GAAuB,OACvBp7E,GAAM,kBACNvd,GAAiB,gBACjBs8D,GAAe,iBACfg6C,GAAgB,2BAChBL,KAEA,MAAM,SACJ5tG,GAAQ,iBACR6iG,GAAgB,iBAChByL,GAAgB,SAChBC,GAAQ,iBACRvqF,GAAgB,sBAChBrb,GAAqB,YACrB6lG,GAAW,eACXvkF,GAAc,WACdwkF,GAAU,iBACV3hH,GAAgB,aAChB4B,GAAY,mBACZggH,GAAkB,qBAClBC,GAAoB,YACpBC,KACEryG,EAAAA,EAAAA,OAEIxe,MAAOH,KAAgBslH,EAAAA,GAAAA,MACzB,SAAED,GAAQ,UAAEE,KAAcn/B,EAAAA,EAAAA,MAE1B1D,IAAUjM,EAAAA,GAAAA,KACV/iB,IAAOgiB,EAAAA,GAAAA,MACNu7C,GAAeC,KAAoB16C,EAAAA,GAAAA,IAAS26C,GAAAA,EAAcC,OAC1DC,GAAoBC,KAAwB96C,EAAAA,GAAAA,KAAS,GACtD+6C,GAAoBF,MAAwBlrC,IAAamT,IACxDk4B,GAAcC,KAAmBj7C,EAAAA,GAAAA,OACjCk7C,GAAkBC,KAAuBn7C,EAAAA,GAAAA,KAAS,IAEnD,6BACJo7C,GAA4B,yBAC5BC,GAAwB,sBACxB/Q,GAAqB,mBACrBD,InDpPW,SACb//G,EAAiBwG,EAAqB+I,GAEtC,MAAOyhH,EAAqBC,IAAuBvb,EAAAA,GAAAA,IAAkC,CAAC,IAC/EqK,EAAoBmR,IAAsBxb,EAAAA,GAAAA,MAC3CrnG,EAAMrO,EAAS,GAAGA,KAAUwG,SAAa0B,EACzC83G,GAAwBvY,EAAAA,GAAAA,GAC5B,IAAOupB,IAAsB3iH,IAAS,EACtC,CAAC2iH,EAAqB3iH,IAsGxB,OAlGAwmE,EAAAA,GAAAA,IAAU,KACR0iB,QAAoBrvF,EACpBgpH,OAAmBhpH,IAClB,CACDlI,EAAQixH,EAAqBC,EAAoB1qH,KAGnDquE,EAAAA,GAAAA,IAAU,KACR,IAAKxmE,EAAK,OACV,MAAMiyG,EAAqB0Q,IAAsB3iH,GAC3C8iH,EAAe5hH,GAAW9O,QAAU,EACtC6/G,GAAsB6Q,GACxBF,EAAoB,IACfD,IACH,CAAC3iH,GAAMopF,GAAW05B,EAAe,MAGpC,CAACH,EAAqB3iH,EAAKkB,GAAW9O,OAAQwwH,IAiF1C,CACLH,8BAhF6Dv3C,EAAAA,GAAAA,GAAgB,EAC7EivB,yBAAyB,GACzBC,4BAA4B,GAC5B6M,0BAEA,KAAKt1G,GAAWwG,GAAa6H,GAAQkB,GAAW9O,QAAQ,OAExD,GAAI60G,EAGF,OAFA9d,QAAgBtvF,OAChBgpH,OAAmBhpH,GAIrB,MAAMkpH,EAAkBrR,IACxB,GAAIqR,EAAiB,CACnB,MAAMC,EAAiB9hH,EAAU4qB,QAAQi3F,GACzCH,EAAoB,IACfD,IACH,CAAC3iH,GAAMopF,GAAW45B,KAEpBH,OAAmBhpH,EACrB,CAEAqvF,IAAoB7sF,EAAAA,EAAAA,KACjB6sF,IAAmB72F,OAAQQ,IAAQunG,EAA0BplG,SAASnC,KAAQ,IAC5EwO,OAAO84F,IAIZ,MAAM8oB,GAAmBx2G,EAAAA,EAAAA,MAAuB/Q,EAAAA,EAAAA,MAAa/J,IAAWw3F,GAMxE,GAJIA,IAAiBD,GAAkBl0F,SAASm0F,MAC9CA,QAAgBtvF,GAGdopH,EAAkB,CACpB,MAAMC,EAA0BhiH,EAAU+I,UAAWpX,GAAOA,EAAKowH,GAEjEL,EAAoB,IACfD,IACH,CAAC3iH,GAAMopF,GAAW85B,IAEtB,MAAO,GAAIh6B,GAAkB92F,OAAQ,CACnC,MAAM+wH,EAAsBjyH,KAAKE,OAAO83F,IAClChjC,EAAWhlD,EAAU4qB,QAAQq3F,GAEnCP,EAAoB,IACfD,IACH,CAAC3iH,GAAMopF,GAAWljC,IAEtB,IA+BAw8D,0BA5B+Bx3C,EAAAA,GAAAA,GAAiB1zE,IAEhD,IAAK7F,IAAWwG,IAAa+I,GAAW9O,OACtC,OAGF+2F,GAAgB3xF,EAEhB,MAAMjH,GAASmL,EAAAA,EAAAA,MACTtB,GAAYnC,EAAAA,EAAAA,KAAgB1H,EAAQoB,EAAQwG,GAC5CirH,EAAkBhpH,GAAWpF,SAASwC,KACvCiS,EAAAA,EAAAA,KAA8BlZ,EAAQoB,EAAQwG,EAAUX,GAEvD6rH,EAAeniH,EAAU4qB,QAAQt0B,GACjC0uD,GAAW2tD,EAAAA,GAAAA,GAAc3yG,EAAU9O,OAAQixH,EAAe,GAE5DD,EACFR,EAAoB,IACfD,IACH,CAAC3iH,GAAOkmD,IAGV28D,EAAmB3hH,EAAUglD,MAO/ByrD,wBACAD,qBAEJ,CmDiIM4R,CAAiB3xH,EAAQwG,EAAU+I,GAEjCqiH,GAAyBvsC,EAAW+nC,QAA8BllH,EAElE2pH,IAAkBC,EAAAA,GAAAA,GAAuB9xH,EAAQ4xH,IACjDG,IAAoBD,EAAAA,GAAAA,GAAuBtrH,EAAUorH,IACrDI,IAA2BF,EAAAA,GAAAA,GAAuBvjH,EAAiBqjH,IACnEK,IAAwBH,EAAAA,GAAAA,GAAuB3D,EAAcyD,IAC7DM,IAAuBJ,EAAAA,GAAAA,GAAuBpD,EAAakD,IAC3DO,IAAyBL,EAAAA,GAAAA,GAAuBrD,EAAemD,IAC/DQ,IAAsBN,EAAAA,GAAAA,GAAuBnD,GAAYiD,IACzDS,IAAmBP,EAAAA,GAAAA,GAAuBj5B,EAAS+4B,MACnDO,KAA2BD,KAAyBD,KAA0BG,IAC/EpyH,IAAWsyH,EAAAA,MAAgB1gB,GAC1B2gB,IAA6BT,EAAAA,GAAAA,GACjCrB,GAAmBmB,KAChB5xH,IAAWsyH,EAAAA,IACVE,IAAqBV,EAAAA,GAAAA,GAAuBh7B,EAAW86B,IACvDa,IAA4BX,EAAAA,GAAAA,GAAuB1D,EAAkBwD,IACrEc,IAAiCZ,EAAAA,GAAAA,GAAuBxD,EAAuBsD,IAC/Ee,IAAwCb,EAAAA,GAAAA,GAC5C9xH,EAAS8wH,QAA+B5oH,EACxC0pH,IAGI9L,IAAoBla,EAAAA,GAAAA,GAAsBoY,GAE1C/1B,QACkB/lF,IAAtB49G,IAAmCA,GAAoB9B,EAAuB8B,QAAoB59G,GAG9F,QAAE6+F,GAAO,uBAAE6rB,GAAsB,0BAAEC,IA2kB3C,SACEC,EACA9O,EACA8B,EACA9lH,EACAqlF,GAEA,MAAO0hB,EAASgsB,IAAcr9C,EAAAA,GAAAA,KAAU2P,GAClC2tC,GAAcC,EAAAA,GAAAA,KAEdC,OAA8ChrH,IAAtB49G,GAAmCA,IAAsB9B,EA8BvF,OA7BIkP,IACEJ,GACFC,GAAW,GAGXjpH,WAAW,KACTipH,GAAW,IACV3F,KAEH4F,MAIJ78B,EAAAA,GAAAA,GAAc,KACP28B,GACHC,GAAW,IAEZ,CAACD,IAYG,CACL/rB,QAASA,IAAYmsB,EACrBN,uBAAwBE,EAZ1B,SAAgCl3D,GACP,cAAnBA,EAAEu3D,cAAgCv3D,EAAEwoC,SAAWxoC,EAAEw3D,eACnDL,EAAW/9G,QAAQhV,GAEvB,OAQoEkI,EAClE2qH,0BAA2BC,EAP7B,WACEC,GAAW,EACb,OAK0E7qH,EAE5E,CAxnByEmrH,EACpE37C,GAA+Bk2C,EAChC5J,EACA8B,GACA9lH,EACAqlF,IAGFxQ,EAAAA,GAAAA,IAAU,IACD70E,GACH+7E,EAAAA,GAAAA,GAAsB,KACtBz6D,GAAS,CAAEpgB,QAAIgH,WAEfA,EACH,CAAClI,EAAQshB,MAEZ60E,EAAAA,GAAAA,GAAc,KACZi6B,GAAiBC,GAAAA,EAAcC,MAC/BK,QAAgBzoH,IACf,CAAClI,KAGJ60E,EAAAA,GAAAA,IAAU,KACR,IAAK96D,EAAAA,KAAWmtB,EAAAA,GACd,OAGF,MAAM,eAAEosF,GAAmB1qG,OAC3B,IAAK0qG,EACH,OAGF,MAAM3d,EAAeA,KACnB,MAAM4d,EAAcD,EAAen1B,SAAWv5F,SAAS4uH,gBAAgBpd,cAEvE7B,EAAAA,GAAAA,IAAgB,KACd3vG,SAASs0C,KAAKm7D,UAAUof,OAAO,mBAAoBF,IAEnD9oB,EAAAA,GAAAA,IAAe,MACR8oB,GAAeD,EAAexpB,YACjCyK,EAAAA,GAAAA,IAAgB,KACd3rF,OAAO6wD,SAAS,CAAEC,IAAK,WASjC,OAFA45C,EAAeh3C,iBAAiB,SAAUq5B,GAEnC,KACL2d,EAAe/2C,oBAAoB,SAAUo5B,OAIjD9gC,EAAAA,GAAAA,IAAU,KACJryE,GACFqtH,GAAS,CAAEvwG,OAAQtf,KAEpB,CAACA,EAAQwC,EAAWqtH,MAEvBh7C,EAAAA,GAAAA,IAAU,KACH26C,GACHlqF,GAAiB,CAAE1kC,OAAQZ,KAE5B,CAACA,EAAQwC,EAAWgtH,KAEvB36C,EAAAA,GAAAA,IAAU,KACJ70E,GAAU4uH,GAAsB7nB,IAClC/2F,GAAa,CAAEhQ,YAEhB,CAAC4uH,EAAoB5uH,EAAQ+mG,GAAS/2F,KAEzC,MAAM,WACJ0jH,GAAU,YAAEC,GAAW,cAAEC,IC5WtB,SACLx6B,EACAy6B,EACApsC,EACAqsC,EACAC,GAEA,MAAO34D,EAAU44D,EAAcC,IAAkBnvC,EAAAA,GAAAA,MAC1CovC,EAAeC,IAAoBz+C,EAAAA,GAAAA,IAAiB,IACpD0+C,EAAqBC,IAA0B3+C,EAAAA,GAAAA,IAAiB,GAEjE4+C,GAAkB/6C,EAAAA,GAAAA,GAAiBl6E,KACvCk1G,EAAAA,GAAAA,IAAgB,KACd,IAAKnb,EAAWvmE,QACd,OAGF,MAAM0hG,EAAUl1H,EAAQ,GAAGA,MAAY,GACvC+5F,EAAWvmE,QAAQusE,MAAM//F,MAAQk1H,EAC7BR,GACF36B,EAAWvmE,QAAQusE,MAAMo1B,YAAYT,EAAiBQ,OAa5D,SAASX,KACPrf,EAAAA,GAAAA,IAAgB,KACd3vG,SAASs0C,KAAKm7D,UAAUa,OAAO,qBAEnC,CAgDA,OA5DA0J,EAAAA,GAAAA,IAAgB,KACTxlB,EAAWvmE,SAAYihG,GAI5BQ,EAAgBR,IACf,CAACC,EAAiB36B,EAAY06B,EAAcQ,KA0B/Cz/C,EAAAA,GAAAA,IAAU,KACR,IAAKzZ,EAAU,OAEf,MAAMq5D,EAAmB74D,IACvB,MAAM84D,EAAWn1H,KAAKq4G,KAAKwc,EAAsBx4D,EAAE+4D,QAAUT,GAC7DI,EAAgBI,IAGlB,SAASE,IACPC,IACAhB,EAASz6B,EAAWvmE,QAASiiG,YAC/B,CAEA,SAASD,IACPjB,IACAhvH,SAAS23E,oBAAoB,YAAak4C,GAAiB,GAC3D7vH,SAAS23E,oBAAoB,UAAWq4C,GAAU,GAClDhwH,SAAS23E,oBAAoB,OAAQq4C,GAAU,GAC/CX,GACF,CAMA,OAJArvH,SAAS03E,iBAAiB,YAAam4C,GAAiB,GACxD7vH,SAAS03E,iBAAiB,UAAWs4C,GAAU,GAC/ChwH,SAAS03E,iBAAiB,OAAQs4C,GAAU,GAErCC,GACN,CAACT,EAAqBF,EAAe96B,EAAYy6B,EAAUz4D,EAAU64D,EAAgBK,IAEjF,CAAEZ,WA9CT,SAAoB93D,GAClBA,EAAE6X,kBAEF8gC,EAAAA,GAAAA,IAAgB,KACd3vG,SAASs0C,KAAKm7D,UAAUvrG,IAAI,sBAG9BqrH,EAAiBv4D,EAAE+4D,SACnBN,EAAuBj7B,EAAWvmE,QAASiiG,aAC3Cd,GACF,EAoCqBL,YAlCrB,SAAqB/3D,GACnBA,EAAE6X,iBACF6gD,OAAgBpsH,GAChBu/E,GACF,EA8BkCmsC,gBACpC,CDuRMmB,CAAUpF,EAAgBvzD,GAAM4zD,GAAmB,CACrD/wH,gBAAiBm9D,IACf6zD,GAAsBhxH,EAAiB,uBAErC+1H,IAAkBz7C,EAAAA,GAAAA,GAAiB3d,IACvC,MAAM,MAAEn3C,GAAUm3C,EAAEq5D,cAAgB,CAAC,EAG/BC,EAAkBC,EAAAA,IAAc1wG,GAASA,EAAMhkB,OAAS,GAAKwgB,MAAMxI,KAAKgM,GAG3E/jB,OAAQ00H,GAAuB,kBAAdA,EAAKp0H,MACtBq0H,MAAOD,GAtNd,SAAiBA,GACf,MAAqB,SAAdA,EAAKE,MAAmBF,EAAKp0H,MAAQosB,EAAAA,IAA8B9jB,IAAI8rH,EAAKp0H,KACrF,CAoNuBu0H,CAAQH,IAlN/B,SAAiBA,GACf,MAAqB,SAAdA,EAAKE,MAAmBF,EAAKp0H,MAAQqsB,EAAAA,IAA8B/jB,IAAI8rH,EAAKp0H,KACrF,CAgNwC0xE,CAAQ0iD,IAE5ChF,GAAiB8E,EAAkB7E,GAAAA,EAAcmF,UAAYnF,GAAAA,EAAcoF,YAGvEC,IAAqBn8C,EAAAA,GAAAA,GAAgB,KACzC62C,GAAiBC,GAAAA,EAAcC,QAG3BqF,IAAuBp8C,EAAAA,GAAAA,GAAgB,KAC3Cs3C,IAAoB,KAGhB+E,IAAkBr8C,EAAAA,GAAAA,GAAgB,KACtCs3C,IAAoB,KAGhBgF,IAA0Bt8C,EAAAA,GAAAA,GAAgB,KAC9Cj4D,GAAS,CAAEpgB,GAAIuJ,OAAOjE,OAGlBsvH,IAAyBv8C,EAAAA,GAAAA,GAAgB,KAC7Cq2C,GAAiB,CAAE5vH,OAAQA,EAASwG,SAAUA,IAC9CovH,KACAzR,OAGI4R,IAAoBx8C,EAAAA,GAAAA,GAAgB,KACxCj4D,GAAS,CAAEpgB,GAAIlB,MAGXg2H,IAAuBz8C,EAAAA,GAAAA,GAAgB,KAC3Cu2C,GAAY,CAAE9vH,OAAQA,IAClB0yH,IACFtkH,GAAiB,CACfxO,QACIgiF,GADKkV,EACG,sCAAiD,yCAK7Dm/B,IAAiB18C,EAAAA,GAAAA,GAAgB,KACrChuC,GAAe,CAAEC,QAAS,aAGtB0qF,IAAmB38C,EAAAA,GAAAA,GAAgB,KACvCw2C,GAAW,CAAE/vH,OAAQA,MAGjBm2H,IAAgB58C,EAAAA,GAAAA,GAAgB,KACpC22C,GAAY,CAAE5wG,OAAQtf,MAGlBo2H,IAAwBC,EAAAA,GAAAA,GAAoB1pF,EAAO4gF,GAEnD56F,IAAYkjD,EAAAA,GAAAA,GAChBygD,EAAAA,GAAsB,sBAAwB,sBAG1CC,IAAc1gD,EAAAA,GAAAA,GE1bO,WAAkF,WF6b3G03C,GE7boD,WF8bpDnV,GE9b+E,WF+b/EmV,GAAoBF,GE/bmI,WFgcvJtJ,GEhcoL,WFicpL10D,EAAAA,MAAiBwiE,IAAmBE,KEjc8F,YFoc9HyE,IAA6B3gD,EAAAA,GAAAA,GACjC,sBACCm7B,GAAsB,SAGnBylB,IAAkCC,EAAAA,EAAAA,IACtC90C,GAAS6tC,EAAyBC,GAE9BiH,IAA2BC,EAAAA,EAAAA,IAC/Bh1C,GAAS5/E,EAAMwE,EAAUgwB,GAAQxhB,QAAQ0G,IAGrCm7G,GAA6BJ,IAC9BE,KACCzH,GAA6Bt8D,GAAK,qCAAkC1qD,KACpE0pG,IAA0B79B,EAAAA,GAAAA,GAAC+iD,GAA0B,CAACx3G,OAAQtf,SAAckI,KAC5EqtE,IAAmBg6C,IAAkBruH,KAAOlB,GAAS+zE,EAAAA,GAAAA,GAACgjD,GAAwB,SAAM7uH,IAGpF,oBACJ8uH,GAAmB,mBAAEC,GAAkB,mBACvCC,GAAkB,kBAAEC,GAAiB,iBACrCC,GAAgB,2BAAEC,KAChBnhD,EAAAA,GAAAA,IACF,InIhdW,SAAyCh3E,EAAqB25F,GAC3E,MAAMy+B,EAAcp4H,GAAeq4H,EAAAA,IAC/Bj5H,EAAAA,EACA,EAAIA,EAAAA,EACFk5H,EAmCR,SAA6Bt4H,GAC3B,GAAIA,EAAcI,EAAAA,IAA0C,CAC1D,MAAML,EAAkBM,KAAKC,IAC3BD,KAAKE,IAAkB,IAAdP,EAAoBT,GAC7BD,GAGIi5H,EAAmBl4H,KAAKC,IACd,IAAdN,EACAV,GAGF,OAAOe,KAAKC,IACVN,EAAcD,EAAkBw4H,EAChCl5H,EAEJ,CAEA,GAAIW,EAAcQ,EAAAA,IAAyC,CACzD,MAAMT,EAAkBM,KAAKC,IAC3BD,KAAKE,IAAkB,GAAdP,EAAmBT,GAC5BD,GAGF,OAAOe,KAAKC,IACVN,EAAcD,EACdV,EAEJ,CAEA,OAAIW,EAAcX,EACTA,EAGFW,CACT,CAtE2Bw4H,CAAoBx4H,GACvCy4H,EAAkBz4H,GAAeq4H,EAAAA,IACnC,MAAQj5H,EAAAA,EACR,EAAIA,EAAAA,EAEFs5H,EAAgB/+B,EAClB2+B,EAAmBF,EAAcK,EACjCH,EAAmBF,EACjBO,EAAe34H,EAAcq4H,EAAAA,IAC/Bh4H,KAAKC,IAAIg4H,EAAmBF,EAAaj5H,GACzCm5H,EAAmBF,EAEjBN,EAAsBa,EAAeD,EACrCX,EAAqBW,EAAgBC,EAY3C,MAAO,CACLb,sBACAC,qBACAC,mBAXyBr+B,EACtB8+B,EAAkB,EAAKV,EACxB,EAUFE,kBARwBt+B,EACrB8+B,EAAkB,GAAM,EAAIX,EAC7B,EAOFI,iBAhBuBS,EAAen5H,EAiBtC24H,2BAhBiC34H,EAAqBm5H,EAkB1D,CmI2aUC,CAAgC54H,GAAamzH,IACnD,CAACA,GAAkBnzH,KAGf64H,IAAkBliD,EAAAA,GAAAA,GACtB,wBACCw8C,IAAoB,cACrBA,IAAoB3B,KAAiB1f,GAAsB,eAG7Dh1B,EAAAA,GAAAA,GAAe,CACb5gB,SAAU41C,EACV/0B,OAAQhyD,MAIV+tG,EAAAA,GAAAA,GAAyBrpB,GAEzB,MAAMspB,GAAsBjjH,SACzBi5G,IAAwB92G,KAAkBk7G,KAAqBF,KAA2BD,KACvFD,IAAyB4E,KACzBthD,IAAmBg6C,IAAkBruH,KAAOlB,EAC5Ck4H,GAA6BljH,QACjCm9G,IAA0BF,IAAyBS,IAAkCR,IACjFjE,GAAuBrO,IAAauP,IAAyBiD,IAE7Dt5B,GAAiB9jF,QAAQijH,IAAuBjnB,GAEtD,OACE76B,EAAAA,GAAAA,IAAA,OACEj1E,GAAG,eACHyxB,UAAWA,GACX43D,gBAAiBqoC,GACjBxzB,OAAOC,EAAAA,GAAAA,GACL,4BAA4B23B,KAC5B,2BAA2BC,KAC3B,yBAAyBG,KACzB,iCAAiCC,MACjC,2BAA2BH,OAC3B,0BAA0BC,OAC1B,oBAAoBxoB,IACpByJ,GAAmB,6BAA6BA,KAElD9hC,QAAUiuC,IAAYxlH,EAAqBg3H,QAAoB7tH,EAAU6sE,SAAA,CAExE0vC,KACC1wC,EAAAA,GAAAA,GAAA,OACEphD,UAAU,gBACVuyE,YAAawuB,GACb1O,UAAW4O,GACXuE,cAAexE,MAGnB5/C,EAAAA,GAAAA,GAAA,OACEphD,UAAW4jG,GACXn3B,MAAOg3B,GAAwB,wBAAwBA,UAA0BluH,KAEnF6rE,EAAAA,GAAAA,GAAA,OAAK7yE,GAAG,0BACP8T,QAAQ68G,IAAmBE,MAC1B57C,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEoB,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,kBAAkBylG,YAAa/F,GAAmB2C,QAAkB9sH,EAAU6sE,SAAA,EAC3FhB,EAAAA,GAAAA,GAACs3C,GAAiB,CAEhBrrH,OAAQ6xH,GACRrrH,SAAUurH,GACVxjH,gBAAiByjH,GACjBhS,sBAAuBA,GACvBD,mBAAoBA,GACpBG,qBAAsB6Q,IANjBc,KAQP99C,EAAAA,GAAAA,GAACkwC,GAAY,CACXjkH,OAAQ6xH,GACRrrH,SAAUurH,GACVxjH,gBAAiByjH,GACjBxrB,WAAYA,EACZnhB,SAAUA,EACV26B,sBAAuBA,GACvBD,mBAAoBA,GACpBG,qBAAsB6Q,MAExB56C,EAAAA,GAAAA,IAAC+G,GAAAA,GAAU,CACTlrC,KAAM0lC,EAA8B,OAASk2C,EAA0B,QAAU,OACjFzwC,UAAW6mC,EACXh2B,eAAa,EACbC,oBAAqBA,GACrBoqC,qBAAmB,EACnBC,OAAQzF,GAA0B99C,SAAA,EAElChB,EAAAA,GAAAA,GAAC09B,GAAW,CAEVzxG,OAAQ6xH,GACRrrH,SAAUurH,GACV/wH,KAAMgxH,GACNxrB,WAAYA,EACZ3N,QAASw5B,GACTnrB,mBAAoBspB,GACpBrpB,cAAewpB,GACf5pB,QAASA,GACT6K,wBAAyBA,GACzB34F,kBAAmBA,GACnBy4F,gBAAiBwmB,GACjBvmB,cAAe38F,SAASu4G,IAAqBnV,GAC7ChR,yBAA0BurB,IAbrB,GAAGd,MAAmBE,MAAqBC,OAelD77C,EAAAA,GAAAA,IAAA,OAAKxjD,UAAWolG,GAAgBhjD,SAAA,CAC7Bs9C,KACCt+C,EAAAA,GAAAA,GAACwkD,GAAAA,EAAQ,CACPv3H,KAAK,cACLhB,OAAQ6xH,GACRrrH,SAAUurH,GACVxjH,gBAAiByjH,GACjB7B,cAAeA,GACfqI,WAAY9C,GACZ3uB,QAASA,GACT1hB,SAAUA,EACVozC,gBAAiBC,EAAAA,IACjBC,yBAA0Bh3B,EAAAA,IAC1BlX,QAAQ,uBAGXwjC,GAAuBrO,KACtB7rC,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,wCAAwC4jD,IAAKqL,GAAQpL,MAAQ,WAAQtuE,EAAU6sE,UAC5FoB,EAAAA,GAAAA,IAACM,GAAAA,EAAM,CACLjlB,KAAK,OACL48B,OAAK,EACL1X,MAAM,YACN/jD,UAAU,mCACV2jD,QAASq/C,GAAqB5gD,SAAA,EAE9BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,WACX+hC,EAAAA,GAAAA,GAAA,QAAAgB,SAAO6M,GAAQ,uBAAwB4+B,EAAqB,YAIjE2O,KACCp7C,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,wCAAwC4jD,IAAKqL,GAAQpL,MAAQ,WAAQtuE,EAAU6sE,UAC5FhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLjlB,KAAK,OACL48B,OAAK,EACL1X,MAAM,YACN/jD,UAAU,mCACV2jD,QAASu/C,GAAwB9gD,UAEjChB,EAAAA,GAAAA,GAAA,QAAAgB,SAAO6M,GAAQ,uBAIpBq2C,KACClkD,EAAAA,GAAAA,GAAA,OAAKphD,UAAW6jG,GAA2BzhD,UACzChB,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,2BAA0BoiD,UACvChB,EAAAA,GAAAA,GAAA,QAAAgB,SACG8hD,SAMPxxC,IAAa4sC,IAA0BQ,KAA8BC,MAErE3+C,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,wCAAwC4jD,IAAKqL,GAAQpL,MAAQ,WAAQtuE,EAAU6sE,UAC5FhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLjlB,KAAK,OACL48B,OAAK,EACLnI,QAAM,EACNtzD,UAAU,wCACV2jD,QAAS0/C,GAAqBjhD,SAE7B6M,GAAQ4wC,GAAqB,qBAAuB,wBAI1DntC,GAAYqtC,KACX3+C,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,wCAAwC4jD,IAAKqL,GAAQpL,MAAQ,WAAQtuE,EAAU6sE,UAC5FhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLjlB,KAAK,OACL48B,OAAK,EACLnI,QAAM,EACNtzD,UAAU,wCACV2jD,QAAS0/C,GAAqBjhD,SAE7B6M,GAAQ,0BAIdyD,GAAY6sC,KACXn+C,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,wCAAwC4jD,IAAKqL,GAAQpL,MAAQ,WAAQtuE,EAAU6sE,UAC5FhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLjlB,KAAK,OACL48B,OAAK,EACLnI,QAAM,EACNtzD,UAAU,wCACV2jD,QAAS2/C,GAAelhD,SAEvB6M,GAAQ,gBAIdyD,GAAY8sC,KACXp+C,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,wCAAwC4jD,IAAKqL,GAAQpL,MAAQ,WAAQtuE,EAAU6sE,UAC5FhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLjlB,KAAK,OACL48B,OAAK,EACLnI,QAAM,EACNtzD,UAAU,wCACV2jD,QAAS4/C,GAAiBnhD,SAEzB6M,GAAQ,kBAIdyD,GAAY+sC,KACXr+C,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,wCAAwC4jD,IAAKqL,GAAQpL,MAAQ,WAAQtuE,EAAU6sE,UAC5FhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLjlB,KAAK,OACL48B,OAAK,EACLnI,QAAM,EACNtzD,UAAU,wCACV2jD,QAAS6/C,GAAcphD,SAEtB6M,GAAQ,gBAIf7N,EAAAA,GAAAA,GAACskC,GAAoB,CACnB9pG,gBAAiByjH,GACjB52D,SAAU41C,EACVnY,QAASw5B,MAEXt+C,EAAAA,GAAAA,GAAC4jB,GAAW,CAAC38C,OAAQwyE,KACrBz5C,EAAAA,GAAAA,GAAC2jB,GAA0B,CAAC18C,OAAQyyE,KACpC15C,EAAAA,GAAAA,GAACm5C,GAAgB,CAAClyE,OAAQ0yE,IACzBkL,EAAAA,KAA4B7kD,EAAAA,GAAAA,GAAC8jB,GAAiB,CAAC78C,OAAQ2yE,WAI5D55C,EAAAA,GAAAA,GAAC4kB,GAAqB,CACpBC,eAAgB25B,GAChB15B,QAASw5B,GACTv5B,eAAgBA,SAGpB/kB,EAAAA,GAAAA,GAACo5C,GAAY,CAAC/xD,SAAUpmD,QAAQwjF,QAGnCx4F,IACC+zE,EAAAA,GAAAA,GAAC6jB,GAAqB,CACpB58C,OAAQ41E,GACR5wH,OAAQA,EACRwgH,oBAAqBA,EACrBtpC,QAAS0+C,GACTiD,QAAS/C,MAGb/hD,EAAAA,GAAAA,GAAA,OAAKi6B,eAAa,EAAAj5B,SACfnoE,GAAyBY,IAAI,CAACs4C,EAAwB7hD,KACrD8vE,EAAAA,GAAAA,GAAC+jB,GAAyB,CACxBghC,cAAe70H,EAEf6hD,uBAAwBA,GADnBA,EAAuB5kD,SAOxC,IG/nBM63H,GAAwB,CAC5B16E,cC/FwCq1B,IACxC,MAAM,MAAEslD,GAAUtlD,EACZulD,GAAgBrlD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkB4kD,GAEvE,OAAOC,GAAgBllD,EAAAA,GAAAA,GAACklD,EAAa,IAAKvlD,SAAYxrE,GD4FtD8zC,WEhGqC03B,IACrC,MAAM,MAAEslD,GAAUtlD,EACZwlD,GAAatlD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,cAAe4kD,GAEjE,OAAOE,GAAanlD,EAAAA,GAAAA,GAACmlD,EAAU,IAAKxlD,SAAYxrE,GF6FhDooD,cGjGwCojB,IACxC,MAAM,MAAEslD,GAAUtlD,EACZylD,GAAgBvlD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkB4kD,GAEvE,OAAOG,GAAgBplD,EAAAA,GAAAA,GAAColD,EAAa,IAAKzlD,SAAYxrE,GH8FtD+iC,QIlGuCyoC,IACvC,MAAM,MAAEslD,GAAUtlD,EACZ0lD,GAAexlD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,gBAAiB4kD,GAErE,OAAOI,GAAerlD,EAAAA,GAAAA,GAACqlD,EAAY,IAAK1lD,SAAYxrE,GJ+FpD6wD,kBKnG4C2a,IAC5C,MAAM,MAAEslD,GAAUtlD,EACZ2lD,GAAoBzlD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,qBAAsB4kD,GAE/E,OAAOK,GAAoBtlD,EAAAA,GAAAA,GAACslD,EAAiB,IAAK3lD,SAAYxrE,GLgG9Dm5D,mBMpG6CqS,IAC7C,MAAM,MAAEslD,GAAUtlD,EACZ4lD,GAAqB1lD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,sBAAuB4kD,GAEjF,OAAOM,GAAqBvlD,EAAAA,GAAAA,GAACulD,EAAkB,IAAK5lD,SAAYxrE,GNiGhEkpC,0BOrGgDsiC,IAChD,MAAM,MAAEslD,GAAUtlD,EACZ6lD,GAAwB3lD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,yBAA0B4kD,GAEvF,OAAOO,GAAwBxlD,EAAAA,GAAAA,GAACwlD,EAAqB,IAAK7lD,SAAYxrE,GPkGtE+e,cQtGwCysD,IACxC,MAAM,MAAEslD,GAAUtlD,EACZ8lD,GAAgB5lD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkB4kD,GAEvE,OAAOQ,GAAgBzlD,EAAAA,GAAAA,GAACylD,EAAa,IAAK9lD,SAAYxrE,GRmGtDoa,YSvGsCoxD,IACtC,MAAM,MAAEslD,GAAUtlD,EACZ+lD,GAAc7lD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAAgB4kD,GAEnE,OAAOS,GAAc1lD,EAAAA,GAAAA,GAAC0lD,EAAW,IAAK/lD,SAAYxrE,GToGlDugC,QUxGsCirC,IACtC,MAAM,MAAEslD,GAAUtlD,EACZgmD,GAAc9lD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAAgB4kD,GAEnE,OAAOU,GAAc3lD,EAAAA,GAAAA,GAAC2lD,EAAW,IAAKhmD,SAAYxrE,GVqGlDo5D,qBWzG+CoS,IAC/C,MAAM,MAAEslD,GAAUtlD,EACZimD,GAAuB/lD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyB4kD,GAErF,OAAOW,GAAuB5lD,EAAAA,GAAAA,GAAC4lD,EAAoB,IAAKjmD,SAAYxrE,GXsGpEu3D,SY1GmCiU,IACnC,MAAM,MAAEslD,GAAUtlD,EACZkmD,GAAWhmD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,YAAa4kD,GAE7D,OAAOY,GAAW7lD,EAAAA,GAAAA,GAAC6lD,EAAQ,IAAKlmD,SAAYxrE,GZuG5CsuC,aa3G2Ck9B,IAC3C,MAAM,MAAEslD,GAAUtlD,EACZmmD,GAAmBjmD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,oBAAqBd,GAE7E,OAAOa,GAAmB9lD,EAAAA,GAAAA,GAAC8lD,EAAgB,IAAKnmD,SAAYxrE,GbwG5Dq6D,kBc5G4CmR,IAC5C,MAAM,MAAEslD,GAAUtlD,EACZqmD,GAAoBnmD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,qBAAsBd,GAE/E,OAAOe,GAAoBhmD,EAAAA,GAAAA,GAACgmD,EAAiB,IAAKrmD,SAAYxrE,GdyG9D8xH,sBe7GgDtmD,IAChD,MAAM,MAAEslD,GAAUtlD,EACZumD,GAAwBrmD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,6BAA8Bd,GAE3F,OAAOiB,GAAwBlmD,EAAAA,GAAAA,GAACkmD,EAAqB,IAAKvmD,SAAYxrE,Gf0GtEsoD,gBgB9G0CkjB,IAC1C,MAAM,MAAEslD,GAAUtlD,EACZwmD,GAAkBtmD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,mBAAoB4kD,GAE3E,OAAOkB,GAAkBnmD,EAAAA,GAAAA,GAACmmD,EAAe,IAAKxmD,SAAYxrE,GhB2G1D8wD,kBiB/G4C0a,IAC5C,MAAM,MAAEslD,GAAUtlD,EACZymD,GAAoBvmD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,qBAAsBd,GAE/E,OAAOmB,GAAoBpmD,EAAAA,GAAAA,GAAComD,EAAiB,IAAKzmD,SAAYxrE,GjB4G9Du/D,uBkBhHiDiM,IACjD,MAAM,MAAEslD,GAAUtlD,EACZ0mD,GAAyBxmD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,0BAA2Bd,GAEzF,OAAOoB,GAAyBrmD,EAAAA,GAAAA,GAACqmD,EAAsB,IAAK1mD,SAAYxrE,GlB6GxE6zC,emBjHyC23B,IACzC,MAAM,MAAEslD,GAAUtlD,EACZ2mD,GAAiBzmD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,kBAAmBd,GAEzE,OAAOqB,GAAiBtmD,EAAAA,GAAAA,GAACsmD,EAAc,IAAK3mD,SAAYxrE,GnB8GxD0zC,UoBlHoC83B,IACpC,MAAM,MAAEslD,GAAUtlD,EACZ4mD,GAAY1mD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,aAAcd,GAE/D,OAAOsB,GAAYvmD,EAAAA,GAAAA,GAACumD,EAAS,IAAK5mD,SAAYxrE,GpB+G9C4+D,0BqBnH8C4M,IAC9C,MAAM,MAAEslD,GAAUtlD,EACZ6mD,GAAsB3mD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,uBAAwBd,GAEnF,OAAOuB,GAAsBxmD,EAAAA,GAAAA,GAACwmD,EAAmB,IAAK7mD,SAAYxrE,GrBgHlEmoC,oCsBtH8CqjC,IAC9C,MAAM,MAAEslD,GAAUtlD,EACZ8mD,GAAgC5mD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iCAAkC4kD,GAEvG,OAAOwB,GAAgCzmD,EAAAA,GAAAA,GAACymD,EAA6B,CAACx/E,OAAQg+E,SAAY9wH,GtBmH1FqgE,cuBrHwCmL,IACxC,MAAM,MAAEslD,GAAUtlD,EACZ+mD,GAAgB7mD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,iBAAkBd,GAEvE,OAAOyB,GAAgB1mD,EAAAA,GAAAA,GAAC0mD,EAAa,IAAK/mD,SAAYxrE,GvBkHtDsgE,6BwBtHuDkL,IACvD,MAAM,MAAEslD,GAAUtlD,EACZgnD,GAA+B9mD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,gCAAiCd,GAErG,OAAO0B,GAA+B3mD,EAAAA,GAAAA,GAAC2mD,EAA4B,IAAKhnD,SAAYxrE,GxBmHpFy+B,qByBvH+C+sC,IAC/C,MAAM,MAAEslD,GAAUtlD,EACZinD,GAAuB/mD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyB4kD,GAErF,OAAO2B,GAAuB5mD,EAAAA,GAAAA,GAAC4mD,EAAoB,IAAKjnD,SAAYxrE,GzBoHpEkqD,uB0BxHiDshB,IACjD,MAAM,MAAEslD,GAAUtlD,EACZknD,GAAyBhnD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,0BAA2B4kD,GAEzF,OAAO4B,GAAyB7mD,EAAAA,GAAAA,GAAC6mD,EAAsB,IAAKlnD,SAAYxrE,G1BqHxEmqD,oB2BzH8CqhB,IAC9C,MAAM,MAAEslD,GAAUtlD,EACZmnD,GAAsBjnD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,uBAAwB4kD,GAEnF,OAAO6B,GAAsB9mD,EAAAA,GAAAA,GAAC8mD,EAAmB,IAAKnnD,SAAYxrE,G3BsHlEoxD,c4B1HwCoa,IACxC,MAAM,MAAEslD,GAAUtlD,EACZonD,GAAgBlnD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkB4kD,GAEvE,OAAO8B,GAAgB/mD,EAAAA,GAAAA,GAAC+mD,EAAa,IAAKpnD,SAAYxrE,G5BuHtDg8C,iB6B3H2CwvB,IAC3C,MAAM,MAAEslD,GAAUtlD,EACZqnD,GAAmBnnD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,oBAAqBd,GAE7E,OAAO+B,GAAmBhnD,EAAAA,GAAAA,GAACgnD,EAAgB,IAAKrnD,SAAYxrE,G7BwH5D+iE,8B8B5HwDyI,IACxD,MAAM,MAAEslD,GAAUtlD,EACZsnD,GAAgCpnD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iCAAkC4kD,GAEvG,OAAOgC,GAAgCjnD,EAAAA,GAAAA,GAACinD,EAA6B,IAAKtnD,SAAYxrE,G9ByHtFg4C,kB+B7H4CwzB,IAC5C,MAAM,MAAEslD,GAAUtlD,EACZunD,GAAoBrnD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,qBAAsBd,GAE/E,OAAOiC,GAAoBlnD,EAAAA,GAAAA,GAACknD,EAAiB,IAAKvnD,SAAYxrE,G/B0H9DugE,oBgC9H8CiL,IAC9C,MAAM,MAAEslD,GAAUtlD,EACZwnD,GAAsBtnD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,uBAAwBd,GAEnF,OAAOkC,GAAsBnnD,EAAAA,GAAAA,GAACmnD,EAAmB,IAAKxnD,SAAYxrE,GhC2HlE2lB,qBiC/H+C6lD,IAC/C,MAAM,MAAEslD,GAAUtlD,EACZynD,GAAuBvnD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyB4kD,GAErF,OAAOmC,GAAuBpnD,EAAAA,GAAAA,GAAConD,EAAoB,IAAKznD,SAAYxrE,GjC4HpEkmB,0BkChIoDslD,IACpD,MAAM,MAAEslD,GAAUtlD,EACZ0nD,GAA4BxnD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,6BAA8B4kD,GAE/F,OAAOoC,GAA4BrnD,EAAAA,GAAAA,GAACqnD,EAAyB,IAAK1nD,SAAYxrE,GlC6H9EwgE,kBmCjI4CgL,IAC5C,MAAM,MAAEslD,GAAUtlD,EACZ2nD,GAAoBznD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,qBAAsBd,GAE/E,OAAOqC,GAAoBtnD,EAAAA,GAAAA,GAACsnD,EAAiB,IAAK3nD,SAAYxrE,GnC8H9D48B,gBoClI0C4uC,IAC1C,MAAM,MAAEslD,GAAUtlD,EACZ4nD,GAAkB1nD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,mBAAoBd,GAE3E,OAAOsC,GAAkBvnD,EAAAA,GAAAA,GAACunD,EAAe,IAAK5nD,SAAYxrE,GpC+H1DmyD,yBqCnI6CqZ,IAC7C,MAAM,MAAEslD,GAAUtlD,EACZ6nD,GAAqB3nD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,qBAAsB4kD,GAEhF,OAAOuC,GAAqBxnD,EAAAA,GAAAA,GAACwnD,EAAkB,IAAK7nD,SAAYxrE,GrCgIhEoyD,mBsCpI6CoZ,IAC7C,MAAM,MAAEslD,GAAUtlD,EACZ8nD,GAAqB5nD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,sBAAuB4kD,GAEjF,OAAOwC,GAAqBznD,EAAAA,GAAAA,GAACynD,EAAkB,IAAK9nD,SAAYxrE,ItCkI5DuzH,GAAa/0H,OAAO4G,KAAKyrH,IACzB2C,GAAgBh1H,OAAO4I,QAAQypH,IASrC,IAAexkD,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBx4E,IACCmhC,EAAAA,EAAAA,KAAKjhC,EAAAA,EAAAA,KAAeF,GAAS68H,IAFbrkD,CAPIukD,GACfD,GAAcluH,IAAI,EAAEa,EAAKutH,MAE9B7nD,EAAAA,GAAAA,GAAC6nD,EAAc,CAAW5C,MAAO2C,EAAWttH,IAAvBA,MuCrIzB,GAPyCqlE,IACvC,MAAM,OAAE14B,GAAW04B,EACbmoD,GAAejoD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,gBAAiBp5B,GAErE,OAAO6gF,GAAe9nD,EAAAA,GAAAA,GAAC8nD,EAAY,IAAKnoD,SAAYxrE,GCGtD,GAPyCwrE,IACvC,MAAM,OAAE14B,GAAW04B,EACbooD,GAAeloD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,gBAAiBp5B,GAErE,OAAO8gF,GAAe/nD,EAAAA,GAAAA,GAAC+nD,EAAY,IAAKpoD,SAAYxrE,G,oDCqCtD,MA6GA,IAAeqsE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUoB,aACT,MAAMgC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,IACxB+e,QAASg9G,GAAoBn9H,EAAOilC,aAAe,CAAC,GACtD,uBAAEmsB,IAA2BlxD,EAAAA,EAAAA,KAAeF,IAC5C,cAAEiC,GAAkBjC,EACpBk4F,EAAY90F,IAAQ2e,EAAAA,EAAAA,IAAc3e,IAGtCutB,MAAOo3D,EAAW,eAClBhtB,EAAc,cACdxzB,EAAa,aACbD,IACEpnC,EAAAA,EAAAA,KAAeF,GAAQonC,WAE3B,MAAO,CACL8wD,YACArpB,SAASxuD,EAAAA,EAAAA,KAAmBrgB,EAAQoB,IAASytE,QAC7C5sE,gBACAk7H,kBACAp1C,cACAq1C,YAAariE,EACbrmC,UAAW08B,IAA2BisE,EAAAA,GAAuB/mD,QAC7D/uC,gBACAD,iBAxBckxC,CA7G8B8kD,EAChDplC,YACArpB,UACA0uD,aACAt7H,gBACAk7H,kBACAzoG,YACAqzD,cACAq1C,cACA91F,eACAC,gBACA+wC,UACA9b,eAEA,MAAM,mBAAEghE,IAAuBv+G,EAAAA,EAAAA,MAEzB+0C,GAAO+iB,EAAAA,GAAAA,MACN0mD,EAAmBC,IAAwB5mD,EAAAA,GAAAA,IAAmB,IAE/D6mD,GADwB3wB,EAAAA,GAAAA,GAAsBywB,KACIA,GAExDrgD,EAAAA,GAAAA,GAAe,CACb5gB,WACA6gB,OAAQ/E,IAGV,MAAMslD,GAAYtmD,EAAAA,GAAAA,IAAQ,IACjBzI,EAAUA,EAAQjgE,IAAKivH,GAAWA,EAAOn9G,QAAU,GACzD,CAACmuD,IAEEivD,GAAqB3mD,EAAAA,GAAAA,IAAaxmD,IACtC6sG,EAAmB,CAAE7sG,WACpB,CAAC6sG,IAEEO,GAAezmD,EAAAA,GAAAA,IAAQ,KAE3B,MAAM0mD,GAAY7yH,EAAAA,EAAAA,MAAY22B,MAAM94B,KAC9BmzB,GAAc8hG,EAAAA,EAAAA,IAAmB,CACrCl0H,KAAK+B,EAAAA,EAAAA,IAAO,IACNqxH,GAAmB,MACnB71F,GAAgB,MAChBC,GAAiB,KAEvB5W,MAAOo3D,EACP3lF,KAAM,SAGR,OAAO87H,EAAAA,GAAAA,GACL/hG,EAAYr6B,OAAQ4e,IAClB,MAAM/L,EAAOqpH,EAAUt9G,GAOvB,OACGk9G,EAAUn5H,SAASic,IACjBA,IAAWze,KACT0S,KAASwP,EAAAA,EAAAA,IAAUxP,KAAWujF,GAAavjF,EAAKwpH,yBAI1D,CAAChB,EAAiBp1C,EAAazgD,EAAcC,EAAetlC,EAAe27H,EAAW1lC,IAEnFkmC,GAAiBjnD,EAAAA,GAAAA,IAAY,KAC7BsmD,EAAkB57H,SACpB27H,EAAmB,CAAE7sG,MAAO,KAC5B4sG,EAAWE,KAEZ,CAACA,EAAmBD,EAAoBD,IAE3C,OACEpoD,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,iBAAgBoiD,UAC7BoB,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,uBAAsBoiD,SAAA,EACnChB,EAAAA,GAAAA,GAACkpD,GAAAA,EAAU,CACTC,QAASP,EACTQ,YAAad,EACbe,YAAaz2C,EACb02C,kBAAmBzqE,EAAK,yBACxB0qE,cAAc,4BACdhqG,UAAW0oG,EACXuB,oBAAqBjB,EACrBkB,eAAgBd,EAChBe,cAAY,EACZC,oBAAkB,EAClBC,gBAAiBpB,EACjBqB,eAAa,EACbC,YAAU,EACVC,cAAc,cAGhB/pD,EAAAA,GAAAA,GAACgqD,GAAAA,EAAoB,CACnBj0D,QAAS90D,QAAQqnH,EAAkB57H,QACnCu8G,SAAU1pF,EACVqjD,UAAW/jB,EAAK,yBAChB0jB,QAAS0mD,EAAejoD,SAEvBzhD,GACCygD,EAAAA,GAAAA,GAAC8K,GAAAA,EAAO,CAACnI,MAAM,WAEf3C,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,0BCtIvB,GANwC0hC,IACtC,MAAMsqD,GAAcpqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAEnD,OAAO4pD,GAAcjqD,EAAAA,GAAAA,GAACiqD,EAAW,IAAKtqD,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCG5D,GANsCxB,IACpC,MAAMuqD,GAAYrqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,aAEjD,OAAO6pD,GAAYlqD,EAAAA,GAAAA,GAACkqD,EAAS,IAAKvqD,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCCxD,GAN2BgpD,KACzB,MAAMC,GAAYvqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,aAEjD,OAAO+pD,GAAYpqD,EAAAA,GAAAA,GAACoqD,EAAS,KAAMpqD,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCK7C,GANuCxB,IACrC,MAAM0qD,GAAaxqD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,cAElD,OAAOgqD,GAAarqD,EAAAA,GAAAA,GAACqqD,EAAU,IAAK1qD,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCC1D,GAN6BmpD,KAC3B,MAAMC,GAAc1qD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAEnD,OAAOkqD,GAAcvqD,EAAAA,GAAAA,GAACuqD,EAAW,KAAMvqD,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,K,wCCTjD,MCYMqpD,IAAwBjwG,EAAAA,EAAAA,IAAUrb,GAAOA,IAAM,KAAK,GAE1D,IAAIurH,IAA8B,EAwGlC,SAASC,GAAoBC,GAC3B,OAAQA,GACN,IAAK,UACH,OAAOC,EAAAA,GAAaC,WACtB,IAAK,QACH,OAAOD,EAAAA,GAAaE,SACtB,IAAK,UACH,OAAOF,EAAAA,GAAaG,UACtB,IAAK,UACH,OAAOH,EAAAA,GAAaI,aACtB,QACE,OAAOJ,EAAAA,GAAaK,YAE1B,C,gBCsEA,SAASC,GACPC,EACAhC,GAEA,MAAOtiH,EAAaukH,IAAWC,EAAAA,GAAAA,GAC7BF,EACAhC,OACAh1H,EACAm3H,EAAAA,KAKF,MAAO,CAACzkH,EAAaukH,KAFJvkH,IAAgBsiH,GAAWtiH,EAAY,KAAOsiH,EAAQ,IAGzE,CAEA,SAASoC,GACPC,EACAC,EACAN,EACAvuH,EACA6kB,EACAhvB,GAEA,MAAMi5H,GAAgB7mD,EAAAA,GAAAA,OAEtBud,EAAAA,GAAAA,GAAc,KACZspC,EAAc5sG,aAAU3qB,GACvB,CAAC1B,KAEJ2vF,EAAAA,GAAAA,GAAc,KACRqpC,IAAsBD,GAAsB5uH,GAAgB6kB,IAC9DiqG,EAAc5sG,SAAU6sG,EAAAA,EAAAA,IACtB/uH,EACA6kB,EACA+pG,KAGH,CAAC5uH,EAAc6kB,EAAUgqG,EAAmBD,IAE/C,MAAO3kH,EAAaukH,IAAWC,EAAAA,GAAAA,GAC7BF,EACAO,EAAc5sG,aACd3qB,EACuB,UAAvBq3H,EAAiC1nG,EAAAA,GAAqBY,EAAAA,KAKxD,MAAO,CAAC7d,EAAaukH,KAFJvkH,IAAgB6kH,EAAc5sG,SAAWjY,EAAY,KAAO6kH,EAAc5sG,QAAQ,IAGrG,C,wFC5PA,SAA4C,WCmM5C,IAAe0hD,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUgC,SAAQ61C,WACjB,MAAMkpF,EAAWlpF,EAAKqxB,QAAS/uD,EAAAA,EAAAA,KAAWna,EAAQ63C,EAAKqxB,aAAU5/D,EAC3DlG,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQgC,GAC1Bg/H,EAAiB59H,IAAQqtH,EAAAA,EAAAA,IAAiBrtH,EAAM,gBAEhDnB,EAAgBjC,EAAOiC,cACvBmuC,EAAcnuC,GAAgB2S,EAAAA,EAAAA,KAAW5U,EAAQiC,QAAiBqH,EAClE23H,EAAyB7wF,GAAa3I,YACtChV,EAA2BzyB,EAAOyyB,0BAA0BC,SAElE,MAAO,CACLquG,WACAC,iBACA/+H,gBACAg/H,yBACAxuG,6BAhBc+lD,CAxJF0oD,EAChBl/H,SACA61C,OACA2oD,QACAugC,WACA9+H,gBACA++H,iBACAvuG,2BACAwuG,yBACA/7B,0BAEA,MAAM,kBAAE7jD,IAAsBpiC,EAAAA,EAAAA,MAExBg7D,GAAMD,EAAAA,GAAAA,MAENmnD,GAAannD,EAAAA,GAAAA,MAEbhmB,GAAOgiB,EAAAA,GAAAA,KAEPorD,EAAYp/H,IAAWC,GAAiB++H,EAExCK,GAAcC,EAAAA,GAAAA,IAAyBzpF,EAAKA,MAC5CixB,EAAWjxB,EAAKA,KAChB0pF,EAAmC,mBAAlBz4D,EAAS1mE,KAA4B0mE,OAAWx/D,EACjEk4H,EACAD,GAAgBE,mBACXztE,EAAK,kBAEVnc,EAAKxnC,UAAYkxH,EACZvtE,EAAK,kBAAmB,CAAE1e,OAAQisF,EAAejsF,SAEtD+rF,EACKrtE,EAAK,8BAA+B,CAAE0tE,OAAOtrD,EAAAA,GAAAA,IAAqBpiB,EAAMqtE,UADjF,EAMIM,EAAcJ,GAAgBE,mBAAqB,QAAU,QAE7D,kBACJnoC,EAAiB,kBAAE4J,EAAiB,wBACpCqC,EAAuB,kBAAEhM,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBzf,GAErBkpB,GAAoBxoB,EAAAA,GAAAA,GAAgB,IAAMV,EAAIhmD,SAC9CmvE,GAAiBzoB,EAAAA,GAAAA,GAAgB,IAAMV,EAAIhmD,QAASiyF,QAAQ,mBAC5D7iB,GAAiB1oB,EAAAA,GAAAA,GAAgB,IACrC30E,SAASyuE,cAAc,aAAaA,cAAc,qCAE9C6uB,GAAY3oB,EAAAA,GAAAA,GAAgB,KAAM,CAAG4oB,YAAY,KAEjDhI,GAAc5gB,EAAAA,GAAAA,GAAgB,KAClCt5B,EAAkB,CAChBr/C,SACA61C,WAIE8qD,EAAc9qD,EAAKuxB,eAAiB23D,EAAYa,GAAAA,GAAqBb,EAErEh7H,GAAU87H,EAAAA,GAAAA,IAAmBhqF,EAAKA,MAElCiqF,GAAwBxqD,EAAAA,GAAAA,IAAQ,KACpC,MAAM,SAAEyqD,EAAQ,QAAEC,IAAYC,EAAAA,GAAAA,IAAkBpqF,EAAKA,OAAS,CAAC,EAE/D,IAAKkqF,IAAaC,EAChB,OAGF,MAAME,EAAiB,CAACH,EAASI,YAAaJ,EAASK,WACjDryB,EAAegyB,EAAShyB,aAE9B,OACE56B,EAAAA,GAAAA,GAACktD,GAAAA,EAAuB,CACtBtuG,UDtHuF,WCuHvFuuG,iBAAkBJ,EAClBnyB,aAAcA,EACdwyB,YAAaP,EAAQj8H,WAGxB,CAAC8xC,EAAKA,OAET,GAAK9xC,EAEL,OACEwxE,EAAAA,GAAAA,IAAA,OACE0C,IAAKA,EACLlmD,WAAWkjD,EAAAA,GAAAA,GDnIM,WCmIsB,eACvCupB,MAAOA,EACP9oB,QAAS6jB,EACT5B,cAAeJ,EACf+M,YAAaf,EAAwBpvB,SAAA,CAEpC2rD,GACCA,IAAyB3sD,EAAAA,GAAAA,GAACuM,GAAAA,EAAM,CAAC3tD,UAAWunE,GAAgBphF,KAAMyoF,EAAY/vC,KAAK,UACpF/a,EAAKxnC,WAAY8kE,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,iBAAiBrf,UAAWunE,MACzDnmB,EAAAA,GAAAA,GAAA,OACE8E,IAAKknD,EACLptG,UD9ImH,WC+InHysE,MAAO,4BAAgErqB,SAEtEpwE,IACCovE,EAAAA,GAAAA,GAAC0oB,GAAAA,EAAW,CACV6G,8BAA+BQ,EAC/BT,8BAA+BS,EAC/BxH,aAAcyjC,EACdp7H,QAASA,EACT6sD,KA9Gc,GA+Gd4vE,sBAAoB,MAKzB3qF,EAAKuN,YACJ+vB,EAAAA,GAAAA,GAAA,OAAKphD,UD9JuD,WC8J1BoiD,UAChChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,0BAGdouF,IACCrsD,EAAAA,GAAAA,GAACstD,GAAAA,EAAU,CACT3qD,MAAO6pD,EACP/zH,KAAM4zH,SAGal4H,IAAtB45F,IACC/tB,EAAAA,GAAAA,GAAC+C,GAAAA,EAAI,CACH97B,OAAQk9C,EACRsK,OAAQV,EACRnvE,UAAU,0BACVskD,WAAS,EACTkrB,YAAU,EACVF,eAAgBA,EAChBF,kBAAmBA,EACnBC,eAAgBA,EAChBE,UAAWA,EACXhrB,QAASkhB,EACT5J,oBAAqB6J,EAAsBtjB,UAE3ChB,EAAAA,GAAAA,GAACutD,GAAAA,EAAa,CACZ1gI,OAAQA,EACR61C,KAAMA,EACNupF,UAAWA,EACX3uG,yBAA0BA,EAC1BwuG,uBAAwBA,Y,wCC/JpC,MAmDA,IAAetrD,EAAAA,GAAAA,IAnDoBgtD,EACjCxvH,QACAyvH,WAAW,gBACXC,cACA39B,sBACAxtB,UACAj+D,YAEA,MAAMwgE,GAAMD,EAAAA,GAAAA,MAENyrB,GAAiBq9B,EAAAA,GAAAA,IAAkB7oD,EAAKirB,GACxC6e,GAAegf,EAAAA,EAAAA,IAA4B5vH,GAE3CivG,GAAexjB,EAAAA,GAAAA,IAASqc,EAAAA,EAAAA,IAAoB9nG,EAAO,YAAasyF,GAChE5X,GAAuBm1C,EAAAA,GAAAA,GAA6B5gB,GAEpDt8G,EAAQqN,EAAMxN,QAAQG,MAEtBy1F,GAAc5gB,EAAAA,GAAAA,GAAgB,KAClCjD,EAAQj+D,KAGV,OACE89D,EAAAA,GAAAA,IAAA,OACE0C,IAAKA,EACL33E,GAAI,GAAGsgI,IAAWnpH,IAClBsa,UAAU,oBACV2jD,QAAS6jB,EAAYplB,SAAA,EAErBhB,EAAAA,GAAAA,GAAA,OACEurB,IAAKqjB,EACLhwF,UAAU,kBACV4sE,IAAI,GACJ0jB,WAAYwe,EACZI,SAAS,QACTtpC,cAAekpC,EAAcrjC,GAAAA,OAAYl2F,KAE3C6rE,EAAAA,GAAAA,GAAA,OACEurB,IAAK0hB,EACLruF,WAAWkjD,EAAAA,GAAAA,GAAe,aAAc,kBAAmB4W,GAC3D8S,IAAI,GACJ0jB,WAAYwe,EACZI,SAAS,QACTtpC,cAAekpC,EAAcrjC,GAAAA,OAAYl2F,IAE1CxD,IAASqvE,EAAAA,GAAAA,GAAA,QAAMphD,UAAU,iBAAgBoiD,SAAErwE,EAAM6/F,MAAQ,OAAQu9B,EAAAA,GAAAA,IAAoBp9H,EAAMgiC,YAC3F+6F,IAAe1tD,EAAAA,GAAAA,GAAA,QAAMphD,UAAU,mB,oDC1EtC,SAAiH,WC2LjH,IAAe4hD,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAAqB,CAACx4E,GAAU8rB,YAClD,MAAM1oB,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQ8rB,EAAM9pB,QAChC6gI,EAAcz/H,GAAMy/H,aAEpB,sBAAEM,GAA0BnjI,EAAO2pB,WAAa,CAAC,EACjD5nB,EAAQ,UAAW+pB,GAASA,EAAMs3G,MAClCC,GAAgBj2E,EAAAA,EAAAA,KAAoBptD,EAAQ8rB,EAAM9pB,QAClDqO,EAAWgzH,GAAe7xH,KAAM8xH,GAAgBA,EAAYhhI,KAAOwpB,EAAMxpB,IAG/E,MAAO,CACLugI,cACAxyH,WACAkzH,OALiBxhI,KAAWohI,IAA0BE,GAAexhI,QAAU,GAAKshI,KARpE3qD,CAtJpB,UAAoB,MAClB1sD,EAAK,YAAE+2G,EAAW,UAAEt4D,EAAS,SAAEl6D,EAAQ,OAAEkzH,IAEzC,MAAM,gBACJz4D,EAAe,uBACf04D,EAAsB,qBACtBC,EAAoB,uBACpBC,EAAsB,iBACtBl0H,IACEyP,EAAAA,EAAAA,MAEE+0C,GAAO+iB,EAAAA,GAAAA,KACP2mB,GAAe1jB,EAAAA,GAAAA,MAEfmpB,GAAoBxoB,EAAAA,GAAAA,GAAgB,IAAM+iB,EAAazpE,SACvDmvE,GAAiBzoB,EAAAA,GAAAA,GAAgB,IAAM30E,SAASs0C,MAChD+oD,GAAiB1oB,EAAAA,GAAAA,GAAgB,IAAM30E,SAASyuE,cAAc,yCAC9D6uB,GAAY3oB,EAAAA,GAAAA,GAAgB,KAAM,CAAG4oB,YAAY,EAAMogC,SAAS,KAEhE3hI,EAAS8pB,GAASA,EAAM9pB,OACxB6jC,EAAgB/Z,GAAS,YAAaA,EACtC/pB,EAAQ8jC,GAAiB/Z,EAAMs3G,MAC/BhxH,EAAY0Z,GAAS,cAAeA,EACpChmB,EAAQ+/B,EAAiB/Z,EAAOnmB,QAAQG,WAAQwD,EAChDw+B,EAAWhiC,IAASo9H,EAAAA,GAAAA,IAAoBp9H,EAAMgiC,UAC9C87F,EAAY/9F,GAAgBg+F,EAAAA,EAAAA,IAAkB/3G,QAASxiB,EAEvDw6H,GADallC,EAAAA,GAAAA,GAASglC,IACG99H,GAAOK,WAAW49H,SAEjD9tD,EAAAA,GAAAA,IAAU,MACJnqD,GAAW+Z,GAAiBzzB,GAC9BoxH,EAAuB,CAAExhI,OAAQ8pB,EAAM9pB,UAExC,CAACoQ,EAAWyzB,EAAe/Z,IAE9B,MAAM,kBACJwtE,EAAiB,kBAAE4J,EAAiB,wBACpCqC,EAAuB,kBAAEhM,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBgE,GAAe37F,GAEpCw5F,GAAcpkB,EAAAA,GAAAA,IAAY,KAC9BrM,EAAgB,CACd9oE,OAAQ8pB,EAAM9pB,OACdyK,QAASqf,EAAMxpB,GACf+nE,cAAc,EACdzmE,WAAW,EACX2mE,eAED,CAACA,EAAWz+C,EAAMxpB,GAAIwpB,EAAM9pB,SAEzB0hH,GAAkB/oC,EAAAA,GAAAA,GAAiB3d,KACvCgnE,EAAAA,GAAAA,GAAoChnE,GACpCuoC,EAAwBvoC,KAGpBinE,GAAuBtpD,EAAAA,GAAAA,GAAiB3d,KAC5CwiC,EAAAA,GAAAA,GAAUxiC,GAEVymE,EAAqB,CAAEzhI,SAAQyK,QAASqf,EAAMxpB,GAAIqqD,aAAa,IAC/Dn9C,EAAiB,CACfxO,QAASgzD,EAAK,mCAEhBwlC,MAGI0qC,GAAqBvpD,EAAAA,GAAAA,GAAiB3d,KAC1CwiC,EAAAA,GAAAA,GAAUxiC,GAEVymE,EAAqB,CAAEzhI,SAAQyK,QAASqf,EAAMxpB,GAAIqqD,aAAa,IAC/Dn9C,EAAiB,CACfxO,QAASgzD,EAAK,uCAEhBwlC,MAGI2qC,GAAqBxpD,EAAAA,GAAAA,GAAgB,KACzC+oD,EAAuB,CAAE1hI,SAAQyK,QAASqf,EAAMxpB,KAChDk3F,MAGF,OACEjiB,EAAAA,GAAAA,IAAA,OACE0C,IAAKyjB,EACL3pE,WAAWkjD,EAAAA,GAAAA,GDzHM,WCyHsB,eACvCqvB,YAAaod,EACbhsC,QAAS6jB,EACT5B,cAAeJ,EAAkBpjB,SAAA,CAEhC/jE,IACCmlE,EAAAA,GAAAA,IAAA,QAAApB,SAAA,EACEhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAClkD,UDhIwE,WCgIzCqf,KAAK,kBACzC4gB,EAAK,mBAGT3jD,IAAY8kE,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAClkD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GDpIsF,YCoI9CloD,KAAK,cACzFvN,GAAiBzvB,QAAQ0V,EAAMkB,OAAOD,cACrCwqD,EAAAA,GAAAA,IAAA,QAAMxjD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GDtIyH,YCsIlFnlB,SAAA,EACrEhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,QACVtnB,EAAMkB,MAAMD,cAGhB+a,IAAYqtC,EAAAA,GAAAA,GAAA,QAAMphD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GD3IoI,YC2I/FnlB,SAAEruC,KACpFyvC,EAAAA,GAAAA,IAAA,OAAKxjD,UD5IiC,WC4IPoiD,SAAA,CAC5B2tD,IACC3uD,EAAAA,GAAAA,GAAA,OAAKurB,IAAKojC,EAAUnjC,IAAI,GAAG5sE,UD9I0B,WC8IDswF,WAAW,IAEhEx+E,IAAiBsvC,EAAAA,GAAAA,GAACivD,GAAAA,EAAgB,CAACt4G,MAAOA,IAC1C+2G,IAAe1tD,EAAAA,GAAAA,GAAA,QAAMphD,UAAU,sBAEXzqB,IAAtB45F,IACC3rB,EAAAA,GAAAA,IAACW,GAAAA,EAAI,CACH97B,OAAQk9C,EACRsK,OAAQV,EACRC,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChBC,UAAWA,EACXvvE,WAAWkjD,EAAAA,GAAAA,GD3J2L,WC2JxJ,sBAC9CoB,WAAS,EACTC,QAASkhB,EACT5J,oBAAqB6J,EACrB8J,YAAU,EAAAptB,SAAA,CAET5L,IACC4K,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACz3D,KAAK,UAAU03D,QAASusD,EAAqB9tD,SACpDniB,EAAK,8BAGRuW,IACA4K,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACz3D,KAAK,UAAU03D,QAASwsD,EAAmB/tD,SAClDniB,EAAK,sCAGRuW,IAAcl6D,GAAYkzH,IAC1BpuD,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACz3D,KAAK,MAAM03D,QAASysD,EAAmBhuD,SAC9CniB,EAAK,+BAGRuW,GAAal6D,IACb8kE,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CAACz3D,KAAK,QAAQ03D,QAASysD,EAAmBhuD,SAChDniB,EAAK,qCAOpB,I,sCCfA,MAAMqwE,GAAmB,CACvB,CAAEjiI,KAAM,QAASqN,IAAK,mBACtB,CAAErN,KAAM,YAAaqN,IAAK,mBAC1B,CAAErN,KAAM,QAASqN,IAAK,mBACtB,CAAErN,KAAM,QAASqN,IAAK,oBAivBxB,SAAS60H,GAAkBC,EAAmBp8B,EAAkB5vF,EAAyBisH,GACvF,OACEjtD,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,eAAcoiD,SAAA,EAC3BhB,EAAAA,GAAAA,GAACsvD,GAAAA,EAAW,CAACziI,OAAQuiI,EAAWG,aAAcv8B,EAASq8B,eAAgBA,KACvErvD,EAAAA,GAAAA,GAACwvD,GAAAA,EAAS,CAACC,aAAcL,EAAWhsH,cAAeA,MAGzD,CAEA,UAAeo9D,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GACCoB,SAAQwG,WAAU6+E,eAElB,MAAM9xE,GAAOC,EAAAA,EAAAA,KAAW5U,EAAQoB,GAC1BgC,GAAOmE,EAAAA,EAAAA,KAAWvH,EAAQoB,GAC1Bgf,GAAeC,EAAAA,EAAAA,KAAmBrgB,EAAQoB,GAC1C2lC,GAAexsB,EAAAA,EAAAA,KAAmBva,EAAQoB,GAC1C8P,GAAetH,EAAAA,EAAAA,KAAmB5J,EAAQoB,IAE1C,mBAAEyjI,IAAuBtxF,EAAAA,GAAAA,GAAqBvzC,IAE5Cs6B,YAAawqG,EAAe,cAAEpuG,IAAkByC,EAAAA,EAAAA,KAA+Bn5B,IAAW,CAAC,GAC7F,SAAE42B,GAAcF,GAAiBouG,GAAmBpuG,EAAcouG,IAAqB,CAAC,EAExFC,EAAc3uH,QAAQhT,GAAMgG,SAAWxB,GAAYA,IAAaD,EAAAA,KAE9DqB,KAAMg1H,EAAWl5F,aAAcvM,GAAqBv4B,EAAO8hC,OAC3D94B,KAAMg8H,GAAchlI,EAAO+I,MAE7BwP,GAAgB7M,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU5H,EAAOiC,eAE1DooD,EAAUjnD,IAAQuyB,EAAAA,EAAAA,IAAYvyB,GAC9B80F,EAAY90F,IAAQ2e,EAAAA,EAAAA,IAAc3e,GAClC+uG,EAAQx9F,IAAQwP,EAAAA,EAAAA,IAAUxP,GAC1BswH,GAAiBF,IAAgBxsH,IACjC8xC,GAAY6tC,IAAagtC,EAAAA,EAAAA,IAAY9hI,MAAYA,GAAMge,YACvDytD,EAAUzuD,GAAcyuD,QACxBM,EAAmB/uD,GAAc+uD,iBACjCg2D,EAAmBF,GAAiB7hI,IACpCA,EAAKgiI,aAAgBhlH,IAAiBA,EAAailH,gBACnDC,EAAgBL,GAAiB7hI,KACjCqtH,EAAAA,EAAAA,IAAiBrtH,EAAM,iBAAoB80F,KAAcs4B,EAAAA,EAAAA,IAAkBptH,EAAM,gBAChFA,EAAK8uG,WACNqzB,EAAmBN,GAAiB7hI,KAASqtH,EAAAA,EAAAA,IAAiBrtH,EAAM,aAAeA,EAAK8uG,WACxFnO,GAAkBC,EAAAA,EAAAA,KAAsBhkG,IACxC,kBAAEwlI,IAAsBC,EAAAA,EAAAA,KAAwBzlI,EAAQoB,IAAW,CAAC,GACpE,eAAEskI,IAAmBC,EAAAA,EAAAA,KAAqB3lI,EAAQoB,IAAW,CAAC,EAC9D2U,GAAuBC,EAAAA,EAAAA,KAA2BhW,GAElDka,EAAOvF,GAAQvR,EACf4jC,EAAeD,GAAgB3mB,EAE/BwlH,EAAoBjxH,IAASA,EAAK+wB,UAAWvhB,EAAAA,EAAAA,IAAUxP,KAAU4D,GAClEnC,QAAQ2wB,GAAcs5D,kBACrB16D,GAAcC,EAAAA,EAAAA,KAAsB5lC,EAAQoB,GAE5CykI,EAAqB9+F,GAAcgpC,SAAS+1D,gBAC5CC,EAAkB/lI,EAAO8hC,MAAM0P,oBAAoBpwC,GAEnD4kI,EAAgB9rH,IAASvF,GAAM+wB,SAAYxrB,EAAKuyD,kBAAoBzlC,GAAci/F,oBAClF1tH,EACAuzC,EAAck6E,GAAgB15E,EAAAA,EAAAA,KAAkBtsD,EAAQka,EAAK5X,SAAMgH,EACnEgkD,EAAWxB,GAAa0B,WACxB04E,EAAiBp6E,GAAan7C,UAC9Bw1H,EAAar6E,GAAa9iD,KAC1Bo9H,EAAkBt6E,GAAa6B,WAE/B04E,EAAcjwH,QAAQ4wB,GAAcs/F,iBAAmB/tH,EACvDguH,GAAYrmI,EAAAA,EAAAA,KAAeF,GAAQglD,WAAWC,cAAc7jD,GAE5DolI,GAAmBh1B,EAAAA,EAAAA,KAAuBxxG,EAAQoB,GAExD,MAAO,CACL2sC,OAAOq0C,EAAAA,EAAAA,KAAYpiF,GACnBk4F,YACAia,QACAjhG,eACA0lB,WACAkuG,kBACAc,oBACAI,gBACAf,gBACAY,qBACAV,mBACAG,gBACAC,mBACAtjI,cAAejC,EAAOiC,cACtBkjH,oBAAoBhvD,EAAAA,EAAAA,KAAyBn2D,EAAQymF,GACrD1qE,aAAc3Y,GAAM2Y,aACpBgoF,kBACAi6B,YACAzlG,mBACAysG,YACA13E,WACA+4E,cACAvpF,MAAOypF,GAAWzpF,MAClBopF,iBACAE,kBACAD,aACAxzB,gBAAiBvvG,GAAMy/H,YACvB9xE,gBAAgB7wD,EAAAA,EAAAA,KAAeF,GAAQ+wD,eACvCF,uBAAuB3wD,EAAAA,EAAAA,KAAeF,GAAQ6wD,sBAC9Cg0E,qBACA4B,gBAAiBjB,EACjBkB,YAAahB,EACbK,kBACAhwH,uBACAgvH,cACAxsH,gBACAsiB,SAAU76B,EAAO66B,SACjB8rG,mBAAmB/yG,EAAAA,GAAAA,GAAmB5zB,EAAQ,0BAC1CilI,GAAiBp2D,GAAW,CAAEA,UAASM,uBACvCy2D,GAAqBjxH,GAAQ,CAAEiyH,cAAejhG,GAAa57B,KAC/Dy8H,qBAxGchuD,CApvBuBquD,EACzCzlI,SACAo7D,WACA50D,WACAk/H,eACA/4F,QACAy4F,mBACAtuC,YACAia,QACAlwG,gBACAiP,eACA0lB,WACA02B,WACA44E,iBACAE,kBACAD,aACArB,kBACAc,oBACAI,gBACAf,gBACAY,qBACAQ,cACAvpF,QACAipF,kBACAZ,mBACAG,gBACAC,mBACAqB,gBACA/3D,UACAM,mBACA6uD,YACAzlG,mBACAysG,YACA7f,qBACAppG,eACAgoF,kBACA4O,kBACA5hD,iBACA8zE,qBACA4B,kBACAC,cACA3wH,uBACA4wH,oBACA5B,cACAxsH,gBACAs4C,wBACAh2B,WACAksG,2BAEA,MAAM,yBACJC,GAAwB,gBACxBC,GAAe,gBACf5oC,GAAe,SACf37E,GAAQ,0BACRwkH,GAAyB,gBACzBhiE,GAAe,gBACfG,GAAe,aACfx4D,GAAY,6BACZs6H,GAA4B,uBAC5BC,GAAsB,mBACtBC,GAAkB,iBAClBt/G,GAAgB,2BAChBu/G,GAA0B,uBAC1BC,GAAsB,kBACtBC,GAAiB,mBACjB9iF,GAAkB,uBAClB+iF,KACExoH,EAAAA,EAAAA,MAEEy+E,IAAe1jB,EAAAA,GAAAA,MACfD,IAAgBC,EAAAA,GAAAA,MAEhBgJ,IAAUjM,EAAAA,GAAAA,KACV/iB,IAAOgiB,EAAAA,GAAAA,MAEN0xD,GAAgBC,KAAqB7wD,EAAAA,GAAAA,MAEtCytD,GAAYhsH,EAAgB1M,OAAOjE,GAAYxG,EAC/Cs8D,GAAkB6mE,KAActiI,IAAkBsW,EAElD4lE,IAAO7G,EAAAA,GAAAA,IAAQ,KACnB,MAAM15D,EAAkB,GA4CxB,OA3CI8/C,KAAoBnlD,GACtBqF,EAAInS,KAAK,CAAErJ,KAAM,UAAWqN,IAAK,2BAG/Bu2H,GACFpoH,EAAInS,KAAK,CAAErJ,KAAM,UAAWqN,IAAK,sBAG/Bu2H,GAAiBtoE,IACnB9/C,EAAInS,KAAK,CAAErJ,KAAM,iBAAkBqN,IAAK,6BAGtC42H,GACFzoH,EAAInS,KAAK,CAAErJ,KAAM,QAASqN,IAAK,oBAG7Bw1H,GACFrnH,EAAInS,KAAK,CAAErJ,KAAM,UAAWqN,IAAKyoF,EAAY,wBAA0B,sBAGrE2tC,GACFjoH,EAAInS,KAAK,CAAErJ,KAAM,eAAgBqN,IAAK,yBAGxCmO,EAAInS,QAAQ44H,IAGPU,GACHnnH,EAAInS,KAAK,CAAErJ,KAAM,QAASqN,IAAK,oBAG7Bm2H,GACFhoH,EAAInS,KAAK,CAAErJ,KAAM,cAAeqN,IAAK,2BAGnCyoF,GAAauuC,GAAiB5kI,QAChC+b,EAAInS,KAAK,CAAErJ,KAAM,kBAAmBqN,IAAK,8BAGvC0iG,GAASu0B,GAAa7kI,QACxB+b,EAAInS,KAAK,CAAErJ,KAAM,cAAeqN,IAAK,0BAGhCmO,EAAIhP,IAAKg5H,IAAG,CACjBxlI,KAAMwlI,EAAIxlI,KACVsN,MAAOskD,GAAK4zE,EAAIn4H,SAEjB,CACDiuD,GAAiBnlD,EAAeytH,EAAeK,EAAapB,EAAeY,EAAoBd,EAC/Fa,EAAmB1tC,EAAWia,EAAOs0B,GAAiB5kI,OAAQ6kI,GAAa7kI,OAAQmyD,KAG/E6zE,IAAavwD,EAAAA,GAAAA,IAAQ,KACzB,IAAKvmB,EACH,OAAO,EAGT,MAAMt3C,EAAQ0kE,GAAKzkE,UAAU,EAAGtX,UAAWA,IAAS2uD,GACpD,OAAkB,IAAXt3C,EAAe,EAAIA,GACzB,CAACs3C,EAAgBotB,MAEb2pD,GAAuBC,GAA+BC,KAAwB9hD,EAAAA,GAAAA,IAAQ,IAEtF9H,GAAW6pD,KAAgBnxD,EAAAA,GAAAA,IAAS+wD,KAE3C5xD,EAAAA,GAAAA,IAAU,KACR,IAAKllB,EAAgB,OACrB,MAAMt3C,EAAQ0kE,GAAKzkE,UAAU,EAAGtX,UAAWA,IAAS2uD,IAErC,IAAXt3C,GACJwuH,GAAaxuH,IACZ,CAACs3C,EAAgBotB,KAEpB,MAAMxB,IAAkBxF,EAAAA,GAAAA,IAAa19D,IACnCsuH,KACAE,GAAaxuH,IACZ,KAEHw8D,EAAAA,GAAAA,IAAU,KACJ4vD,IAAuBE,GACzByB,GAAkB,CAAE14G,MAAO1tB,KAE5B,CAACA,EAAQ2kI,EAAiBF,KAE7B5vD,EAAAA,GAAAA,IAAU,KACJiiB,IAAcuuC,GAAmB5rG,GACnCysG,GAA2B,CAAElmI,YAE9B,CAACA,EAAQ82F,EAAWuuC,EAAiB5rG,KAExCo7C,EAAAA,GAAAA,IAAU,KACJk8B,IAAUu0B,GAAe7rG,GAC3B0sG,GAAuB,CAAE7mH,OAAQtf,KAElC,CAACA,EAAQ+wG,EAAOu0B,EAAa7rG,IAEhC,MAAOqtG,GAAgBC,KAAqBrxD,EAAAA,GAAAA,IAASh6B,IAC/C,oBAAEsrF,GAAmB,eAAEC,KAAmBC,EAAAA,GAAAA,KAE1CC,IAAY5tD,EAAAA,GAAAA,GAAiB9iC,GACjC,GAAGA,EAAK7iC,QAAQ6iC,EAAKqxB,UAAUrxB,EAAKA,KAAKv1C,MAErCkmI,IAAUlxD,EAAAA,GAAAA,IAAQ,IAAM4wD,IAAgBt5H,IAAI25H,IAAY,CAACL,KAEzDO,GAAqBrqD,GAAYD,GAAKt8E,OAAS,EAAIs8E,GAAKt8E,OAAS,EAAIu8E,GACrE0hD,GAAU3hD,GAAKsqD,IAAoBrmI,KACnCsmI,IAAwBvxD,EAAAA,GAAAA,IAAY,KACxCknB,GAAgB,CAAE39E,OAAQtf,KACzB,CAACA,IACEunI,IAAwBxxD,EAAAA,GAAAA,IAAY,EAAGz/D,eAC3C0vH,GAAuB,CAAEplI,OAAQZ,EAAQsW,cACxC,CAACtW,IACEwnI,IAA2BzxD,EAAAA,GAAAA,IAAY,EAAGz/D,eAC9C2vH,GAAmB,CAAErlI,OAAQZ,EAAQsW,cACpC,CAACtW,IACEynI,IAAkB1xD,EAAAA,GAAAA,IAAY,KAClCzyB,GAAmB,CAAE1iD,OAAQZ,KAC5B,CAACA,IACE0nI,IAAwB3xD,EAAAA,GAAAA,IAAY,KACxC8vD,GAAgB,CAAE7lI,YACjB,CAACA,EAAQ6lI,MAEZngD,EAAAA,GAAAA,GAAsB,EAAEiiD,MACtB,IAAKjsF,IAAUisF,EAEb,YADAZ,GAAkBrrF,GAIpB,MAAMksF,EAAcD,EAAUn6H,IAAI25H,IAC5BU,EAAansF,EAAMluC,IAAI25H,IACLS,EAAYx3H,KAAK,CAAClP,EAAImX,IAAUnX,IAAO2mI,EAAWxvH,IAGxE2uH,GAAoB,KAClBD,GAAkBrrF,KAGpBqrF,GAAkBrrF,IAEnB,CAACA,EAAOsrF,KAEX,MAAOc,GAAYltH,GAAaukH,GAAS4I,INtY5B,UAA+B,gBAC5ClC,EAAe,gBACf5oC,EAAe,eACf+qC,EAAc,YACdC,EAAW,mBACXhC,EAAkB,cAClBiC,EAAa,QACbxJ,EAAO,gBACPgF,EAAe,iBACfyE,EAAgB,cAChB3C,EAAa,UACb5I,EAAS,iBACTzlG,EAAgB,UAChBysG,EAAS,aACTjzH,EAAY,SACZ6kB,EAAQ,SACRhvB,EAAQ,SACR0lD,EAAQ,QACRk7E,EAAO,eACPtC,EAAc,gBACdE,EAAe,gBACfK,EAAe,YACfC,IAyBA,MAAMwC,EAAyB,YAAZpJ,GAA0BgF,EAA4BA,EAAVhF,EAEzDlC,GAAYtmD,EAAAA,GAAAA,IAAQ,KACxB,GAAKiyD,GAAqBvL,GAAczlG,EAIxC,OAAOixG,EAAAA,EAAAA,IACLD,EAAiB36H,IAAI,EAAG8R,YAAaA,GACrCs9G,EACAzlG,IAED,CAACgxG,EAAkBvL,EAAWzlG,IAE3BuN,GAAUwxC,EAAAA,GAAAA,IAAQ,KACtB,GAAKsvD,GAAkB5B,EAIvB,OAAO9G,EAAAA,GAAAA,GAAY0I,GAAe,IACjC,CAAC5B,EAAW4B,KAER6C,EAAmBC,EAAgBC,GAA2BtJ,GACnE4G,EAAiBrJ,IAGZgM,EAAkBC,EAAcC,GAAyBpJ,GAC9D,QAASwI,EAAYE,EAAgBr3H,EAAc6kB,EAAUhvB,IAGxDmiI,EAAqBC,EAAkBC,GAA6BvJ,GACzE,YAAawI,EAAYE,EAAgBr3H,EAAc6kB,EAAUhvB,IAG5DsiI,EAAiBC,EAAcC,GAAyB1J,GAC7D,QAASwI,EAAYE,EAAgBr3H,EAAc6kB,EAAUhvB,IAGxDyiI,EAAkBC,EAAcC,GAAyB7J,GAC9D,QAASwI,EAAYE,EAAgBr3H,EAAc6kB,EAAUhvB,IAGxD4iI,EAAkBC,EAAeC,GAA0BhK,GAChE,QAASwI,EAAYE,EAAgBr3H,EAAc6kB,EAAUhvB,IAGxD+iI,EAAuBC,EAAoBC,GAA+BxK,GAC/EhiC,EAAiBv4D,GAGbglG,GAAiBxzD,EAAAA,GAAAA,IAAQ,KAC7B,IAAKhqB,GAAUzrD,OAAQ,OAAOyrD,EAC9B,MAAMy9E,EAAoB,IAAI9gI,IAAIi8H,GAClC,OAAO54E,EAASn2C,QAAQtS,KAAK,CAACC,EAAGC,KAC/B,MAAMimI,EAAYD,EAAkBrgI,IAAI5F,GAClCmmI,EAAYF,EAAkBrgI,IAAI3F,GACxC,OAAIimI,IAAcC,GAAmB,GAChCD,GAAaC,EAAkB,EAC7BlmI,EAAID,KAEZ,CAACwoD,EAAU44E,KAEPgF,EAAkBC,EAAgBC,GAA2B/K,GAClEgJ,EAAayB,IAIbO,EACAC,EACAC,GACElL,GACFgH,EAAoBjB,GAGtB,IAAIpqH,GACAukH,GACA4I,IAAgB,EAEpB,OAAQD,GACN,IAAK,UACHltH,GAAcytH,EACdlJ,GAAUmJ,EACVP,GAAgBQ,EAChB,MACF,IAAK,cACH3tH,GAAc2uH,EACdpK,GAAUqK,EACVzB,GAAgB0B,EAChB,MACF,IAAK,QACH7uH,GAAc4tH,EACdrJ,GAAUsJ,EACVV,GAAgBW,EAChB,MACF,IAAK,YACH9tH,GAAc+tH,EACdxJ,GAAUyJ,EACVb,GAAgBc,EAChB,MACF,IAAK,QACHjuH,GAAckuH,EACd3J,GAAU4J,EACVhB,GAAgBiB,EAChB,MACF,IAAK,QACHpuH,GAAcquH,EACd9J,GAAU+J,EACVnB,GAAgBoB,EAChB,MACF,IAAK,QACHvuH,GAAcwuH,EACdjK,GAAUkK,EACVtB,GAAgBuB,EAChB,MACF,IAAK,UACH1uH,GAAckvH,EACd3K,GAAU4K,EACVhC,GAAgBiC,EAChB,MACF,IAAK,iBACHpvH,GAAcqvH,EACd9K,GAAU+K,EACVnC,GAAgBoC,EAChB,MACF,IAAK,kBACHvvH,GAAcyqH,EACd,MACF,IAAK,cACHzqH,GAAc0qH,EACd,MACF,IAAK,QACH1qH,GAAcwsH,EACdjI,GAAU+I,EACV,MACF,IAAK,UACHH,IAAgB,EAIpB,MAAO,CAACD,EAAYltH,GAAaukH,GAAS4I,GAC5C,CM2M4DqC,CAAsB,CAC9EvE,gBAAiB6B,GACjBM,eAAgBlC,GAChBmC,YAAaV,GACbtB,mBAAoBuB,GACpBU,cAAeT,GACfxqC,gBAAiBqqC,GACjB5I,WACAgF,kBACAyE,iBAAkB16D,EAClB+3D,gBACA5I,YACAzlG,mBACAysG,YACAjzH,aAAcb,EACd0lB,WACAhvB,WACA0lD,WACAk7E,WACAtC,iBACAE,kBACAK,kBACAC,gBAEI+E,GAAc/tE,IAAkC,YAAfwrE,IACjClD,GAAgC,YAAfkD,IACH,YAAfA,KACEjE,GAAgC,UAAfiE,GAClB3qD,GAAYJ,GAAKzkE,UAAU,EAAGtX,UAAWA,IAAS8mI,KAExDwC,EAAAA,GAAAA,GAAqC,YAAfxC,GAA2BltH,QAA0B1S,GAE3E,MAAMqiI,IAA6BhxD,EAAAA,GAAAA,GAAgB,KACjDqtD,QAGI,aAAExxB,IPtaK,SACb9Y,EACAoiC,EACAgH,EACAC,EACAl2E,GAAwB,EACxBi3E,GAAwB,EACxB6D,IAGA7kD,EAAAA,GAAAA,GAAsB,EAAE8kD,MACtB,GAAKA,GAAeA,IAAgB9L,GAAWgI,GAA2BhI,GAAWjvE,EAAwB,CAC3G,MAAMsqC,EAAYuC,EAAazpE,QACzB43G,EAAS1wC,EAAU1mB,cAA8B,YACvDk3D,IACIxwC,EAAU6P,UAAY6gC,EAAO3gC,YAC/B67B,EAAqBlH,GAAoBC,IACzCF,IAA8B,GAC9B1kC,EAAAA,GAAAA,IAAc,CACZC,YACAC,QAASywC,EACTt6E,SAAU,QACVmnD,cA7BkB,MA+BpBxtG,WAAW,KACT00H,IAA8B,GA/BD,KAkCnC,GACC,CAACE,EAASiH,EAAsBrpC,EAAc7sC,EAC/Ci3E,EAAuB6D,KAGzB7kD,EAAAA,GAAAA,GAAsB,EAAEglD,MACtB,GAAIhF,IAAiB/G,EAAAA,GAAa8G,SAAWC,IAAiBgF,EAC5D,OAGF,MAAM3wC,EAAYuC,EAAazpE,QAC/B,IAAKknE,EACH,OAGF,MAAM4wC,EAAY5wC,EAAU1mB,cAA8B,aACrDs3D,GAAaA,EAAU7gC,UAAY/P,EAAU6P,YAIlD40B,IAA8B,GAE9B1kC,EAAAA,GAAAA,IAAc,CACZC,YACAC,QAASD,EAAUoc,kBACnBhmD,SAAU,QACVy6E,YAAsC,EAAzB7wC,EAAU2P,eAGzB5/F,WAAW,KACT00H,IAA8B,GAhEG,OAkElC,CAACkH,EAAcppC,IAElB,MAAMuuC,GAAwBtxD,EAAAA,GAAAA,GAAgB,KAC5C,MAAMwgB,EAAYuC,EAAazpE,QAC/B,IAAKknE,EACH,OAGF,MAAM4wC,EAAY5wC,EAAU1mB,cAA8B,YAC1D,IAAKs3D,EACH,OAGF,IAAI96F,EAAsB8uF,EAAAA,GAAa8G,QACnClmI,KAAKq4G,KAAK7d,EAAU6P,YAAc+gC,EAAU7gC,YAC9Cj6D,EAAQ4uF,GAAoBC,IAG9BiH,EAAqB91F,KAqBvB,OAjBAglC,EAAAA,GAAAA,IAAU,KACJ2pD,IAIJqM,KACC,CAACA,EAAuBnM,IAWpB,CAAEtpB,cARY77B,EAAAA,GAAAA,GAAgB,KAC/BilD,IAIJD,GAAsBsM,KAI1B,COkU2BC,CACvBxuC,GACAwrC,GACApC,EACAC,EACAl2E,EACAi3E,GACA6D,KAGI,mBAAEQ,GAAkB,qBAAEC,ICxbf,SACb1uC,EACA2uC,EAAuB,uCAgDvB,OA7CAp2D,EAAAA,GAAAA,IAAU,KACR,SAASq2D,IACP,MAAMnxC,EAAYuC,EAAazpE,QACzBs4G,EAAepxC,EAAU1mB,cAA8B43D,GACvDR,EAAS1wC,EAAU1mB,cAA8B,YACvD,GAAI83D,GAAgBV,EAAQ,CAC1B,MAAMW,EAAYrxC,EAAU2P,aAAe+gC,EAAO/gC,aAbzB,GAezB6K,EAAAA,GAAAA,IAAgB,KACd42B,EAAa/rC,MAAMisC,UAAY,GAAGD,OAEtC,CACF,CAMA,OAJAF,IAEAtiH,OAAO0zD,iBAAiB,SAAU4uD,GAAc,GAEzC,KACLtiH,OAAO2zD,oBAAoB,SAAU2uD,GAAc,KAEpD,CAAC5uC,EAAc2uC,IAwBX,CAAEF,oBArBkBxxD,EAAAA,GAAAA,GAAgB,MAEzCkxB,EAAAA,GAAAA,IAAe,KACb,MAAM1Q,EAAYuC,EAAazpE,QAC/B,GAAkC,WAA9BknE,EAAUqF,MAAMksC,UAAwB,OAE5C,MAAMC,EAAiBxxC,EAAU+6B,YAAc/6B,EAAUyxC,aAEzDj3B,EAAAA,GAAAA,IAAgB,KACdxa,EAAUqF,MAAMksC,UAAY,SAC5BvxC,EAAUqF,MAAMqsC,aAAe,GAAGF,YAWXP,sBANAzxD,EAAAA,GAAAA,GAAgB,KAC3C,MAAMwgB,EAAYuC,EAAazpE,QAC/BknE,EAAUqF,MAAMksC,UAAY,SAC5BvxC,EAAUqF,MAAMqsC,aAAe,MAInC,CDqYuDC,CAAmBpvC,KAEjEqvC,GAAaC,IRlcCC,MACrB,MAAOF,EAAaG,IAAkBp2D,EAAAA,GAAAA,IAAS,GAM/C,MAAO,CAACi2D,GAJkB51D,EAAAA,GAAAA,IAAY,KACpC+1D,EAAgBj5G,GAAYA,EAAU,IACrC,MQ6bqCg5G,IAEhChoC,QAASkoC,KAAgChoC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS1H,GACT8L,WArR0B,MAwRtB4jC,IAAuBzyD,EAAAA,GAAAA,GAAgB,KAC3CyxD,KACAY,OAGIK,IAA4B1yD,EAAAA,GAAAA,GAAgB,KAChDwsD,GAA6B,CAAE/1E,uBAAwBisE,EAAAA,GAAuB1gG,gBAIhFs5C,EAAAA,GAAAA,IAAU,KACR+wD,GAAyB,CAAE5zH,UAAW0sH,MACrC,CAACkH,GAA0BlH,GAASl4H,IAEvC,MAAM0lI,IAAoB3yD,EAAAA,GAAAA,GAAiB1zE,IACzCi+D,GAAgB,CACd9jE,OAAQmjI,GACR38H,SAAUD,EAAAA,GACVV,YACA2uD,OAAQuP,EAAAA,GAAkBi7D,gBAIxBmN,IAA2B5yD,EAAAA,GAAAA,GAAiBlhE,IAChDyrD,GAAgB,CACdN,gBAAiBmhE,GAAiBzwG,QAASkhG,GAASA,GAAM7wH,QAAQE,OAC7D2wH,GAAM7wH,QAAQG,OAAOhE,OAAOsU,SACjCw/C,OAAQuP,EAAAA,GAAkBw9D,aAC1Bn+D,WAAY/qD,MAIV+zH,IAAkB7yD,EAAAA,GAAAA,GAAiB1zE,IACvCo+D,GAAgB,CAAEjkE,OAAQmjI,GAAWt9H,gBAGjCwmI,IAAoB9yD,EAAAA,GAAAA,GAAiBr4E,IACzCogB,GAAS,CAAEpgB,SAGPorI,IAAqB/yD,EAAAA,GAAAA,GAAiB35E,IAC1C6L,GAAa,CAAEzL,OAAQJ,EAAQI,OAAQ6F,UAAWjG,EAAQsB,OAGtDqrI,IAAgChzD,EAAAA,GAAAA,GAAgB,KACpDgtD,QAAkBr+H,MAGpBw9E,EAAAA,GAAAA,GAAsB,EAAE8mD,MACtB,QAA0BtkI,IAAtBskI,GAAiD,IAAdxvD,IAAmBwvD,IAAsB3I,EAC9E,OAGF,MAAM4I,EAAezvD,IAAa6mD,EAAgB,GAAK,GAEvDgD,GAAatnI,KAAKC,IAAIitI,EAAc1vD,GAAKt8E,OAAS,KACjD,CAACojI,EAAe7mD,GAAWD,KAE9B,MAAM2vD,IAAyBnzD,EAAAA,GAAAA,GAAgB,KAC7C8sD,GAAuB,CAAEzlI,OAAQZ,MAwBnC,IAAI2sI,IArBJ93D,EAAAA,GAAAA,IAAU,KACR,GAAK8D,GAAc9lD,SAAYglC,EAAAA,GAI/B,OAAO2jB,EAAAA,GAAAA,IAAc7C,GAAc9lD,QAAS,CAC1C4oD,wBAAyB,WACzBC,QAASA,CAAC9f,EAAGrlD,IACPA,IAAcolE,GAAAA,GAAeC,MAC/BirD,GAAatnI,KAAKC,IAAI6nI,GAAqB,EAAGtqD,GAAKt8E,OAAS,KACrD,GACE8V,IAAcolE,GAAAA,GAAeE,QACtCgrD,GAAatnI,KAAKE,IAAI,EAAG4nI,GAAqB,KACvC,MAMZ,CAACA,GAAoBtqD,GAAKt8E,SAIzB4pI,GACFsC,GAAkB5oB,EAA2C,EA/WrC,IAiXdnpG,IAAgB+pH,IAC1BgI,GAAiBC,EAAAA,KAEnB,MAAMC,IAAmBzrB,EAAAA,GAAAA,GAAkB,CAACphH,EAAQwG,EAAUshI,GAAYT,IAAqBsF,IAwTzFG,GAAe,uDAD6DhF,yBAGlF,OACE3xD,EAAAA,GAAAA,IAAC42D,GAAAA,EAAc,CACbl0D,IAAKyjB,GACL3pE,UAAU,wBACVm6G,aAAcA,GACdroH,MAAOooH,GAAmBjyH,QAAc1S,EACxCyjI,YAAaA,GACbqB,cAAeC,EAAAA,IACfC,iBAAkBL,GAAmC,YAAf/E,GAA2BzI,EAAAA,IAAgBxnG,EAAAA,GAAsB,EAEvGs1G,sBAAoB,EACpBC,YAAU,EACVC,WAAYlO,GACZjnB,SAAU9C,GAAargC,SAAA,EAErBgzD,KAAkBzrE,IAClB4mE,GACEkC,GAAkBlkI,IAAMiiI,GACxBpf,GAAsB8oB,GACtB11H,EACAnC,QAAQowH,KAGVzqH,IACAw7D,EAAAA,GAAAA,IAAA,OACExjD,UAAU,eAAcoiD,SAAA,EAExBhB,EAAAA,GAAAA,GAACmJ,GAAAA,GAAU,CACTrE,IAAKF,GACL3mC,KAAM4vC,GAAQpL,MAAQ,oBAAsB,iBAC5C2G,UAAWA,GACXC,YAAaL,GAAKt8E,OAClB6sI,qBAAmB,EACnB36G,UAAU,0BACV6yF,QAASulB,GACTzS,OAAQ0T,GAAqBj3D,SA3TvC,WACE,GAAmB,YAAf+yD,GACF,OACE/zD,EAAAA,GAAAA,GAACwJ,GAAAA,EAAQ,CAAC5qD,UAAU,gBAAgB6qD,WAAW,QAAQpiB,UAAQ,IAInE,IAAMxgD,KAAgB+pH,IAAqBkI,KAAqB/8H,EAAc,CAC5E,MAAMy9H,EAAYlD,KAAewC,GAC3BW,EAA2Bx4H,QAAuB,YAAf8yH,IAA4B/D,GAErE,OACE5tD,EAAAA,GAAAA,IAAA,OACExjD,UAAU,qBAAoBoiD,SAAA,EAE5Bw4D,IAAcC,IAA4Bz5D,EAAAA,GAAAA,GAAC8K,GAAAA,EAAO,IACnD2uD,IAA4Bz5D,EAAAA,GAAAA,GAAC05D,GAAAA,EAAY,CAACjhI,KAAK,gDAGtD,CAEA,MAAMkhI,EAAqB9yH,KAAgBA,IAAana,OAExD,GAAIitI,GAAqC,UAAf5F,GACxB,OA5CA3xD,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,sBAAqBoiD,SAAA,EAClChB,EAAAA,GAAAA,GAACg7B,GAAAA,EAAuB,CACtBv9C,KAAM,IACNw9C,OAAQC,GAAAA,EAAe0+B,cACvBC,gBAAc,EACdC,QAAM,KAER95D,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,cAAaoiD,SACzBniB,GAAK,sBAERmhB,EAAAA,GAAAA,GAACmrB,GAAAA,EAAI,CACHvsE,UAAU,OACV2jD,QAASo2D,GAAuB33D,SAE/BniB,GAAK,wBAiCZ,GAAI86E,EAAoB,CACtB,IAAIlhI,EAEJ,OAAQs7H,IACN,IAAK,UACHt7H,EAAOu3H,EAAmB,4CAA8C,mBACxE,MACF,IAAK,cACHv3H,EAAOo1E,GAAQ,oBACf,MACF,IAAK,YACHp1E,EAAOo1E,GAAQ,wBACf,MACF,IAAK,QACHp1E,EAAOo1E,GAAQ,wBACf,MACF,IAAK,QACHp1E,EAAOo1E,GAAQ,wBACf,MACF,IAAK,QACHp1E,EAAOo1E,GAAQ,yBACf,MACF,IAAK,UACHp1E,EAAOo1E,GAAQ,mCACf,MACF,IAAK,iBACHp1E,EAAOo1E,GAAQ,sCACf,MACF,QACEp1E,EAAOo1E,GAAQ,0BAGnB,OACE7N,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,qBAAoBoiD,UACjChB,EAAAA,GAAAA,GAAC05D,GAAAA,EAAY,CAACjhI,KAAMA,KAG1B,CAEA,OACEunE,EAAAA,GAAAA,GAAA,OACEphD,UAAW,WAAWm1G,UACtBvxD,IAAKqL,GAAQpL,OAAwB,UAAfsxD,GAAyB,WAAQ5/H,EACvD8lG,eAAa,EAAAj5B,SAEG,UAAf+yD,GACEltH,GAAyBpN,IAAKtM,GAAO4O,EAAa5O,KACjD6yE,EAAAA,GAAAA,GAAC+5D,GAAAA,EAAK,CAEJluI,QAASkQ,EAAa5O,GACtBugI,YAAalwB,GAAmBzhG,EAAa5O,GAAIugI,YACjD39B,oBAAqBioC,GACrBz1D,QAAS41D,IAJJhrI,IAOS,YAAf4mI,IAA2C,mBAAfA,GAC9BltH,GAAyBpN,IAAI,CAACtM,EAAI+C,IAAM8gI,IAAa7jI,KACpD6yE,EAAAA,GAAAA,GAACg6D,GAAU,CACTjV,cAAe70H,EAEfymB,MAAOq6G,EAAW7jI,GAClBioE,UAA0B,mBAAf2+D,IAFN,GAAGA,MAAc5mI,MAKT,cAAf4mI,GACDltH,GAAyBpN,IAAKtM,GAAO4O,EAAa5O,KACjD6yE,EAAAA,GAAAA,GAAC0hD,GAAAA,EAAQ,CAEP7wH,UAAUopI,EAAAA,EAAAA,IAAmBl+H,EAAa5O,IAC1C+sI,UAAQ,EACRC,SAAO,EACPv7G,UAAU,cACVmwE,eAAeC,EAAAA,EAAAA,IAAiBJ,GAAiBqrC,EAAAA,EAAAA,IAAmBl+H,EAAa5O,KACjF4iG,oBAAqBioC,GACrBoC,YAAa7B,GACb1sI,QAASkQ,EAAa5O,GACtBuiI,mBAAoBA,GATfviI,IAYQ,UAAf4mI,GACDltH,GAAyBpN,IAAKtM,GAAO4O,EAAa5O,KACjD6yE,EAAAA,GAAAA,GAACq6D,GAAAA,EAAO,CAENxuI,QAASkQ,EAAa5O,GACtBugI,YAAalwB,GAAmBzhG,EAAa5O,GAAIugI,YACjD39B,oBAAqBioC,GACrBsC,eAAgB/B,IAJXprI,IAOQ,UAAf4mI,GACDltH,GAAyBpN,IAAKtM,GAAO4O,EAAa5O,KACjD6yE,EAAAA,GAAAA,GAACu6D,GAAAA,GAAK,CAEJ3hG,MAAOA,EACP/sC,QAASkQ,EAAa5O,GACtBszD,OAAQ0P,EAAAA,GAAY86D,YACpBprH,KAAM9D,EAAa5O,GAAI0S,KACvB+e,UAAU,cACV47G,OAAQnC,GACR+B,YAAa7B,GACbl1E,aAAcm6C,IAAoBzhG,EAAa5O,GAAIugI,YACnD3+B,eAAeC,EAAAA,EAAAA,IAAiBJ,EAAiB7yF,EAAa5O,GAAIqD,QAAQo0G,QATrEz3G,IAYQ,UAAf4mI,GACDltH,GAAyBpN,IAAKtM,IAC7B,MAAMtB,EAAUkQ,EAAa5O,GAC7B,IAAKtB,EAAS,OACd,MAAMmS,EAAQjC,EAAa5O,KAAOm2D,EAAAA,EAAAA,IAA4Bz3D,GAC9D,OAAOkQ,EAAa5O,KAClB6yE,EAAAA,GAAAA,GAACu6D,GAAAA,GAAK,CAEJ3hG,MAAOA,EACP/sC,QAASkQ,EAAa5O,GACtBiyD,aAAaq7E,EAAAA,GAAAA,GAAc5sD,GAAS9xE,EAAa5O,GAAK0iI,EAAWhH,GACjEpoE,OAAQ0P,EAAAA,GAAY86D,YACpBprH,KAAM9D,EAAa5O,GAAI0S,KACvB+e,UAAU,cACV47G,OAAQnC,GACR+B,YAAa7B,GACbl1E,aAAcm6C,IAAoBzhG,EAAa5O,GAAIugI,YACnD3+B,eAAeC,EAAAA,EAAAA,IAAiBJ,EAAiB5wF,IAV5C7Q,KAcM,YAAf4mI,GACDltH,GAAyBpN,IAAI,CAACtM,EAAI+C,KACjC8vE,SAAAA,GAAAA,GAAC06D,GAAAA,EAAQ,CAEP3V,cAAe70H,EACf0uB,UAAU,+DAEV2jD,QAASA,IAAM+1D,GAAkBnrI,GACjCw5E,gBAhMoBg0D,EAgMmBxtI,EA/L1CwtI,IAAa7tI,GAAkBsjI,EAA+B,CAAC,CACpE71H,MAAOszE,GAAQ,iCACfhjE,KAAM,OACNg8D,QAASA,KACP2rD,GAAkBmI,WAJmCxmI,GA+LJ6sE,UAE3ChB,EAAAA,GAAAA,GAACyyC,GAAAA,EAAe,CAAClnG,OAAQpe,EAAIytI,YAAa5gE,IAAmB7sE,GAAK0tI,eAAa,EAAChoB,WAAS,KAPpF1lH,GA3LjB,IAAgCwtI,IAqMP,gBAAf5G,GACDltH,GAAyBpN,IAAI,CAACtM,EAAI+C,KACjC8vE,EAAAA,GAAAA,GAAC06D,GAAAA,EAAQ,CAEP3V,cAAe70H,EACf0uB,UAAU,6CAEV2jD,QAASA,IAAMh1D,GAAS,CAAEpgB,OAAM6zE,UAEhChB,EAAAA,GAAAA,GAACozC,GAAAA,EAAa,CAACnnH,OAAQkB,KANlBA,IASQ,iBAAf4mI,GACFnD,EAAiBn3H,IAAI,CAACuE,EAAO9N,KAC3B8vE,EAAAA,GAAAA,GAACwtD,GAAY,CAEXxvH,MAAOA,EACP0vH,YAAalwB,EACbzN,oBAAqBioC,GACrBz1D,QAAS61D,GACT9zH,MAAOpU,GALF8N,EAAM6B,OAQE,oBAAfk0H,IACF3xD,EAAAA,GAAAA,IAAA,OAAApB,SAAA,CACIn6D,GAAyBpN,IAAI,CAAC6D,EAAWpN,KACzC8vE,EAAAA,GAAAA,GAAC06D,GAAAA,EAAQ,CAEP3V,cAAe70H,EACf0uB,WAAWkjD,EAAAA,GAAAA,GACT,qCACClhE,GAAwB1Q,IAAMohI,EAAiB5kI,OAAS,GAAK,UAGhE61E,QAASA,IAAMh1D,GAAS,CAAEpgB,GAAImQ,IAAa0jE,UAE3ChB,EAAAA,GAAAA,GAACozC,GAAAA,EAAa,CAAC0nB,WAAW,QAAQ7uI,OAAQqR,EAAWq1G,cAAY,KAT5Dr1G,KAYPsD,IACAwhE,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EAEEoB,EAAAA,GAAAA,IAACM,GAAAA,EAAM,CAAC9jD,UAAU,qBAAqB6+B,KAAK,UAAU8kB,QAASA,IAAM3vD,KAAmBouD,SAAA,CACrF6M,GAAQ,kBACT7N,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,qBAEb+hC,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,eAAcoiD,UAC1B6pB,EAAAA,GAAAA,GAAWhd,GAAQ,kBAAmB2jD,GAAoB,CAAC,2BAvB1DuC,IA4BO,gBAAfA,IACF3xD,EAAAA,GAAAA,IAAA,OAAApB,SAAA,CACIn6D,GAAyBpN,IAAI,CAAC8R,EAAQrb,KACtC8vE,EAAAA,GAAAA,GAAC06D,GAAAA,EAAQ,CAEP3V,cAAe70H,EACf0uB,WAAWkjD,EAAAA,GAAAA,GACT,qCACClhE,GAAwB1Q,IAAMqhI,EAAa7kI,OAAS,GAAK,UAG5D61E,QAASA,IAAMh1D,GAAS,CAAEpgB,GAAIoe,IAAUy1D,UAEvChlE,EAAAA,EAAAA,IAASuP,IACRy0D,EAAAA,GAAAA,GAACyyC,GAAAA,EAAe,CACdlnG,OAAQA,EACRuvH,WAAW,YAGb96D,EAAAA,GAAAA,GAACozC,GAAAA,EAAa,CACZnnH,OAAQsf,EACRuvH,WAAW,YAjBVvvH,KAsBP3K,IACAwhE,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EAEEoB,EAAAA,GAAAA,IAACM,GAAAA,EAAM,CAAC9jD,UAAU,iBAAiB6+B,KAAK,UAAU8kB,QAASA,IAAM3vD,KAAmBouD,SAAA,CACjFniB,GAAK,0BACNmhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,qBAEb+hC,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,eAAcoiD,UAC1B6pB,EAAAA,GAAAA,GAAWhsC,GAAK,6BAA8B,CAAEr7C,MAAOguH,GAAqB,CAC3E/mC,WAAW,EACXC,cAAc,EACdlgF,YAAagnH,YApCbuC,IA0CO,UAAfA,GACDhB,IAAgBt5H,IAAKipC,IAElBs9B,EAAAA,GAAAA,GAAC+rD,GAAS,CACRl/H,OAAQZ,EAERo/F,MAAO6nC,GAAiB,2BAA2BE,GAAU1wF,UAAUvuC,EACvEuuC,KAAMA,EACNqtD,oBAAqBioC,IAHhB5E,GAAU1wF,UAOnBvuC,GAGV,CA0CW89F,MAEHjyB,EAAAA,GAAAA,GAAC8I,GAAAA,EAAO,CAACG,UAAWqqD,GAAoBtqD,KAAMA,GAAME,YAAa1B,QAIpE2oD,IACCnwD,EAAAA,GAAAA,GAACgqD,GAAAA,EAAoB,CACnBprG,WAAWkjD,EAAAA,GAAAA,IAAgBza,GAAY,UACvC0O,QAAS+iE,GACTv2D,QAAS21D,GACTt1D,UAAWiL,GAAQ,yBAAyB7M,UAE5ChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,sBAGdmyF,IACCpwD,EAAAA,GAAAA,GAAC+6D,GAAAA,EAAiB,CAChB9zF,OAAQhmC,QAAQsxH,IAChBhnH,OAAQgnH,GACRpvD,QAASq1D,WEzzBbwC,GAA4B,IAAMt8E,EAAAA,IAAoB,IAEvDu8E,GAAa,SAAbA,GAAa,OAAbA,EAAAA,EAAa,qBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,uBAAbA,EAAAA,EAAa,6BAAbA,EAAAA,EAAa,yBAAbA,EAAAA,EAAa,mBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,yCAAbA,EAAAA,EAAa,qCAAbA,EAAAA,EAAa,qCAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,4BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,kDAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,sDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,wEAAbA,EAAAA,EAAa,4DAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,gDAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,sCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,gCAAbA,EAAAA,EAAa,4CAAbA,CAAa,EAAbA,IAAa,IA2ClB,MAsjBA,IAAe53D,EAAAA,EAAAA,IACb,CAACx4E,GACCoB,SAAQivI,YAAWC,eAAc1oI,eAEjC,MAAMkG,GAAW5N,EAAAA,EAAAA,KAAeF,IACxB2wB,MAAO4/G,IAAuBC,EAAAA,EAAAA,KAA2BxwI,IAAW,CAAC,GACrE2wB,MAAO8/G,IAAmBC,EAAAA,EAAAA,KAAuB1wI,IAAW,CAAC,EAC/DoD,EAAOhC,GAASmG,EAAAA,EAAAA,KAAWvH,EAAQoB,QAAUkI,EAC7CqL,EAAO07H,GAAajvI,IAAU+P,EAAAA,EAAAA,IAAS/P,IAAUwT,EAAAA,EAAAA,KAAW5U,EAAQoB,QAAUkI,EAC9E4uF,EAAY90F,IAAQ2e,EAAAA,EAAAA,IAAc3e,GAClCutI,EAAgBvtI,GAAMgG,SAAWgN,QAAQxO,GAAYA,IAAaD,EAAAA,IAClEwB,EAAQwnI,GAAgBxmI,EAAAA,EAAAA,KAAYnK,EAAQoB,EAASwG,QAAa0B,EAClEsnI,EAAeD,GAAiBxnI,IAAS0nI,EAAAA,EAAAA,IAAkBztI,EAAM+F,GACjEgpG,EAAQx9F,IAAQwP,EAAAA,EAAAA,IAAUxP,GAC1B+oD,EAAkBt8D,GAASD,EAAAA,EAAAA,KAAqBnB,EAAQoB,QAAUkI,EAClEwnI,EAAa3+B,GAASx9F,GAAMm8H,WAE5B1/B,EAAgBz8F,IAAQo8H,EAAAA,EAAAA,IAAiBp8H,GACzCysH,EAAYhrH,SAASk6H,GAAgBD,GAAajvI,IAAU4vI,EAAAA,EAAAA,KAAgBhxI,EAAQoB,IAEpF6vI,EAAkB76H,QAAQhV,GAAU0M,EAAS2uB,WAAWzqB,SAAS5Q,IAASk8B,eAC1E4zG,GAAqBP,GAAiBvvI,GACxCif,EAAAA,EAAAA,KAAmBrgB,EAAQoB,IAAS8vI,uBACpC5nI,EACEi1B,EAAoBn9B,EACtB0M,EAAS2uB,WAAWzqB,SAAS5Q,IAASm8B,YAAYF,YAAS/zB,EAEzD6nI,EAAoBrjI,EAASk3C,WAAWljD,OACxCsvI,IAAmBhwI,IAASiwI,EAAAA,EAAAA,KAA8BrxI,EAAQoB,GAClEkwI,IAAwBlwI,IAASmwI,EAAAA,EAAAA,KAAmCvxI,EAAQoB,GAElF,MAAO,CACLggI,YACAhwB,gBACA8/B,oBACAh5C,YACAia,QACAw+B,gBACAC,eACAlwH,OAAQ/L,GAAMrS,GACdojC,OAAQ/wB,GAAM+wB,OACd6qG,qBACAE,iBACAQ,kBACA1yG,oBACAm/B,kBACAob,4BAA6BhrE,EAASgrE,4BACtCg4D,aACAK,oBACAC,mBACAE,0BAlDN,CAtjB+CE,EAC7CpwI,SACAwG,WACA6pI,eACApB,YACAC,eACAoB,eACAC,sBACAC,oBACAC,2BACAC,oBACAC,kBACAC,cACAC,gBACAC,kBACAC,iBACAC,sBACAtL,eACAuL,mBACAjhC,gBACA1wF,SACAglB,SACA07F,YACAlpC,YACAq4C,qBACAE,iBACAQ,kBACAC,oBACA3yG,oBACAu6C,8BACAq5B,QACAw+B,gBACAC,eACAlzE,kBACAozE,aACAK,oBACAC,mBACAE,wBACAh5D,UACAg6D,qBAEA,MAAM,sBACJC,EAAqB,kBACrBC,EAAiB,iBACjBC,EAAgB,qBAChB3oB,EAAoB,iBACpB4oB,EAAgB,yBAChBC,EAAwB,yBACxBC,EAAwB,mBACxBC,EAAkB,wBAClBC,IACE7zH,EAAAA,EAAAA,OAEG8zH,EAAoBC,EAAkBC,KAAqB/sD,EAAAA,GAAAA,MAC5D,SAAEO,KAAaC,EAAAA,EAAAA,OAGnBwsD,SAAUC,GACVlvE,uBAAwBmvE,GACxBlvE,qBAAsBmvE,GACtBlvE,oBAAqBmvE,GACrBlvE,uBAAwBmvE,GACxBlvE,oBAAqBmvE,IACnBrC,EAEEsC,IAAmBC,EAAAA,GAAAA,MAEnBC,IAAwBh5D,EAAAA,GAAAA,GAAgB,KAC5Cg4D,EAAyB,CAAEvxI,OAAQA,EAASi8B,OAAQkB,IACpD+zG,EAAesB,EAAAA,GAAkBC,cAG7BC,IAA0Bn5D,EAAAA,GAAAA,GAAgB,KAC9Ci4D,EAAyB,CAAExxI,OAAQA,EAAS22B,KAAMwG,EAAmBxG,OACrEu6G,EAAesB,EAAAA,GAAkBG,SACjCd,OAGIe,IAAiCr5D,EAAAA,GAAAA,GAAiBhqD,IACtD4hH,EAAsB,CAAE5hH,YAGpBsjH,IAA6Bt5D,EAAAA,GAAAA,GAAiBhqD,IAClD6hH,EAAkB,CAAE7hH,YAGhB06F,IAAmB1wC,EAAAA,GAAAA,GAAgB,KACvCmvC,EAAqB,CAAEppG,aAGnBwzH,IAAkBv5D,EAAAA,GAAAA,GAAgB,KACjCv5E,GAAWwG,GAChBirI,EAAmB,CAAEzxI,SAAQ0J,QAASF,OAAOhD,OAGzCusI,IAAyBx5D,EAAAA,GAAAA,GAAgB,KAC7C83D,MAGI2B,IAAyBz5D,EAAAA,GAAAA,GAAgB,KAC7C+3D,MAGIt7D,IAAcuD,EAAAA,GAAAA,GAAgB,KAClCrC,GAAS5a,MAGJirB,GAAsB0rD,KAA2Bv9D,EAAAA,GAAAA,KAAU26D,IAElEx7D,EAAAA,GAAAA,IAAU,KACR/qE,WAAW,KACTmpI,IAAyB5C,IACxBtB,KACF,CAACsB,IAEJ,MAAMzuD,IAAUjM,EAAAA,GAAAA,KACV/iB,IAAOgiB,EAAAA,GAAAA,KACPoY,GAAaiiD,EACjBvJ,IAAiB/G,EAAAA,GAAa8G,QAC5BuJ,GAAcvJ,QACZC,IAAiB/G,EAAAA,GAAaK,YAChCgQ,GAAchQ,YACZ0G,IAAiB/G,EAAAA,GAAaC,WAChCoQ,GAAcpQ,WACZ8G,IAAiB/G,EAAAA,GAAaE,SAChCmQ,GAAcnQ,SACZ6G,IAAiB/G,EAAAA,GAAaG,UAChCkQ,GAAclQ,UACZ4G,IAAiB/G,EAAAA,GAAaI,aAChCiQ,GAAcjQ,cACX,EACH8R,EACF7B,GAAc1Q,YACZqS,EACF3B,GAAckE,cACZtC,EACF5B,GAAc7Q,UACZ6S,EACFhC,GAAcmE,cACZjE,EACF+B,IAAqBuB,EAAAA,GAAkBY,QACrCpE,GAAcqE,cACZpC,IAAqBuB,EAAAA,GAAkBc,gBACzCtE,GAAcuE,sBACZtC,IAAqBuB,EAAAA,GAAkBgB,WACzCxE,GAAcyE,iBACZxC,IAAqBuB,EAAAA,GAAkBkB,mBACzC1E,GAAc2E,yBACZ1C,IAAqBuB,EAAAA,GAAkBoB,iBACzC5E,GAAc6E,uBACZ5C,IAAqBuB,EAAAA,GAAkBsB,mBACzC9E,GAAc+E,yBACZ9C,IAAqBuB,EAAAA,GAAkBwB,kBACzChF,GAAciF,wBACZhD,IAAqBuB,EAAAA,GAAkB0B,oBACzClF,GAAcmF,0BACZlD,IAAqBuB,EAAAA,GAAkB4B,2BACzCpF,GAAcqF,iCACZpD,IAAqBuB,EAAAA,GAAkB8B,qBACzCtF,GAAcuF,2BACZtD,IAAqBuB,EAAAA,GAAkBgC,mBACzCxF,GAAcyF,yBACZxD,IAAqBuB,EAAAA,GAAkBkC,gBACzC1F,GAAc2F,uBACZ1D,IAAqBuB,EAAAA,GAAkBoC,mBACzC5F,GAAc6F,0BACZ5D,IAAqBuB,EAAAA,GAAkBsC,aACzC9F,GAAc+F,mBACZ9D,IAAqBuB,EAAAA,GAAkBG,QACzC3D,GAAcgG,cACZ/D,IAAqBuB,EAAAA,GAAkBC,WACzCzD,GAAciG,iBACZhE,IAAqBuB,EAAAA,GAAkB0C,eACzClG,GAAcmG,qBACZlE,IAAqBuB,EAAAA,GAAkB4C,UACzCpG,GAAcqG,gBACZpE,IAAqBuB,EAAAA,GAAkB8C,WACzCtG,GAAcuG,iBACZtE,IAAqBuB,EAAAA,GAAkBgD,aACzCxG,GAAcyG,mBACZxE,IAAqBuB,EAAAA,GAAkBkD,mBACzC1G,GAAc0G,wBACZxtI,EACFooI,EACFtB,GAAc2G,WACZpF,EACFvB,GAAc4G,kBACZpF,EACFxB,GAAc6G,gBACZnF,EACF1B,GAAc8G,gBACZhF,EACF9B,GAAchR,YACZ+S,EACF/B,GAAc/Q,UACZwS,EACFzB,GAAc+G,4BACZ7tI,EAEE8tI,IAAsBx8B,EAAAA,GAAAA,GAAiBxsB,IAAY,KAAU,EAsB7DipD,IAAyE//D,EAAAA,GAAAA,IAAQ,IAC9E,EAAGwS,YAAW1tC,aACnB+4B,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLgvE,QAASZ,GACT7zB,KAAK,UACLklB,MAAM,cACN/jD,UAAWqoB,EAAS,SAAW,GAC/Bs7B,QAASoS,EACT/R,UAAW/jB,GAAK,qBAAqBmiB,UAErChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,WAGd,CAACqzC,GAAUzyB,KA+RRsjF,GAAe7wD,KAClB/oB,IACC0wB,KAAegiD,GAAchQ,aAC1BhyC,KAAegiD,GAAcnQ,UAC7B7xC,KAAegiD,GAAcpQ,YAC7B5xC,KAAegiD,GAAclQ,WAC7B9xC,KAAegiD,GAAcmE,eAC7BnmD,KAAegiD,GAAc4G,mBAC7B5oD,KAAegiD,GAAc6G,iBAC7B3G,GAIDiH,IAAkBtgE,EAAAA,GAAAA,GACtB,sBACAqgE,IAAgB,cACf3uD,IAAwB7P,IAAgC,iBAGrD8R,IAAY5Q,EAAAA,GAAAA,MAGlB,OAFA6Q,EAAAA,GAAAA,GAAgBD,KAGdrT,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,cAAckmD,IAAK2Q,GAAUzU,SAAA,EAC1ChB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACL9jD,UAAU,eACV1b,OAAK,EACLy/D,MAAM,cACNllB,KAAK,UACL8kB,QAASN,GACTW,UAA0BiL,GAAfs0D,GAAuB,cAAyB,gBAAgBnhE,UAE3EhB,EAAAA,GAAAA,GAAA,OAAKphD,UAAWwjH,QAElBpiE,EAAAA,GAAAA,GAACmJ,GAAAA,GAAU,CACTlrC,KAAOu1C,IAAwB7P,EAA+B,OAAS,YACvEyF,UAAW64D,GAAoBjhE,SAjUrC,WACE,IAA6B,IAAzBihE,GAIJ,OAAQA,IACN,KAAKhH,GAAc1Q,YACjB,OAAOvqD,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,iBACxC,KAAKotD,GAAcmE,cACjB,OAAOp/D,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQkV,EAAY,wBAA0B,qBAC9E,KAAKk4C,GAAcqE,cACjB,OAAOt/D,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,UACxC,KAAKotD,GAAcuE,sBACjB,OAAOx/D,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQkV,EAAY,oBAAsB,qBAC1E,KAAKk4C,GAAcyE,iBACjB,OAAO1/D,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,gBACxC,KAAKotD,GAAc+E,yBACjB,OAAOhgE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,2BACxC,KAAKotD,GAAcyF,yBACjB,OAAO1gE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,yBACxC,KAAKotD,GAAc2F,uBACjB,OAAO5gE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,qBACxC,KAAKotD,GAAc6F,0BACjB,OAAO9gE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,gBACxC,KAAKotD,GAAc6E,uBACjB,OAAO9/D,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,wBACxC,KAAKotD,GAAciF,wBACjB,OAAOlgE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,kBACxC,KAAKotD,GAAcmF,0BACjB,OAAOpgE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,yBACxC,KAAKotD,GAAcqF,iCACjB,OAAOtgE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,yBACxC,KAAKotD,GAAcuF,2BACjB,OAAOxgE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,sBACxC,KAAKotD,GAAcgG,cACjB,OAAOjhE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,4BACxC,KAAKotD,GAAciG,iBACjB,OAAOlhE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAoB6M,GAAlBiuD,EAA0B,WAAsB,aAChF,KAAKb,GAAcuG,iBACjB,OACEp/D,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,iBAC/BzL,EAAAA,GAAAA,IAAA,WAASxjD,UAAU,QAAOoiD,SAAA,CACvB53C,IAAsBA,EAAkBd,YACvC03C,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLy/D,MAAM,cACNllB,KAAK,UACLmlB,UAAWiL,GAAQ,QACnBtL,QAASi8D,GAAsBx9D,UAE/BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,WAGd7U,GAAqBA,EAAkBd,YACtC85C,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLy/D,MAAM,SACNllB,KAAK,UACLmlB,UAAWiL,GAAQ,UACnBtL,QAASs7D,EAAiB78D,UAE1BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,cAEb+hC,EAAAA,GAAAA,GAACyuC,GAAAA,EAAa,CACZxnE,OAAQ22F,EACRz6D,QAAS26D,GACTvjI,MAAOszE,GAAQ,cACfp1E,KAAMo1E,GAAQ,kBACd2oC,sBAAoB,EACpB9H,aAAc7gC,GAAQ,UACtB8gC,eAAgBgwB,cAO9B,KAAK1D,GAAcyG,mBACjB,OAAO1hE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAc6M,GAAZkV,EAAoB,oBAA+B,oBACnF,KAAKk4C,GAAcmG,qBACjB,OAAOphE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,qCACxC,KAAKotD,GAAckE,cACjB,OACEn/D,EAAAA,GAAAA,GAACyW,GAAAA,EAAW,CACVlgD,MAAO6kG,EACPrkD,YAAalJ,GAAQ,sBACrBw0D,iBAAe,EACfprD,SAAU4nD,KAGhB,KAAK5D,GAAc7Q,UACjB,OACEpqD,EAAAA,GAAAA,GAACyW,GAAAA,EAAW,CACVlgD,MAAO+kG,EACPvkD,YAAalJ,GAAQ,mBACrBw0D,iBAAe,EACfprD,SAAU6nD,KAGhB,KAAK7D,GAAc2G,WACjB,OAAO5hE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQkV,EAAY,qBAAuB,sBAC3E,KAAKk4C,GAAc4G,kBACjB,OAAO7hE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,wBACxC,KAAKotD,GAAc6G,gBACjB,OAAO9hE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,sBACxC,KAAKotD,GAAc8G,gBACjB,OAAO/hE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,YACxC,KAAKotD,GAAc+G,uBACjB,OAAOhiE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,4BACxC,KAAKotD,GAAchQ,YACjB,OAAOjrD,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,iBACxC,KAAKotD,GAAc2E,yBACjB,OAAO5/D,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,wBACxC,KAAKotD,GAAcpQ,WACnB,KAAKoQ,GAAc+F,mBACjB,OAAOhhE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,kBACxC,KAAKotD,GAAclQ,UACjB,OAAO/qD,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQt9C,EAAS,qBAAuB,0BACxE,KAAK0qG,GAAcjQ,aACjB,OACE5oD,EAAAA,GAAAA,IAAA,OAAKxjD,UAAU,SAAQoiD,SAAA,EACrBhB,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,uBAC/B7N,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,WAAUoiD,SAAE6M,GAAQ,QAASywD,GAAiBgE,EAAAA,WAGnE,KAAKrH,GAAcqG,gBACjB,OAAOthE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,eACxC,KAAKotD,GAAchR,YACjB,OAAOjqD,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,cACxC,KAAKotD,GAAc/Q,UACjB,OAAOlqD,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,eACxC,KAAKotD,GAAcnQ,SACjB,OACE1oD,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAEniB,GAAK,qBAC3Bo9E,GAAoBhwI,IACnB+zE,EAAAA,GAAAA,GAAA,WAASphD,UAAU,QAAOoiD,UACxBoB,EAAAA,GAAAA,IAAC6T,GAAAA,EAAY,CACXC,QAASgsD,GACTl/D,UAAU,QACVE,WAAW,EAAMlC,SAAA,EAEjBhB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAwB,WAAlBmzH,GAA6B,cAAgB,kBAEnDz7D,QAASA,IAAMo7D,EACb,CAAE9wI,OAAQZ,EAAQU,OAAQ,CAAEoxI,SAA4B,WAAlBC,GAA6B,UAAY,YAC/Eh9D,SAEDniB,GAAuB,WAAlBm/E,GAA6B,kBAAoB,qBAGzDh+D,EAAAA,GAAAA,GAAC6M,GAAAA,EAAa,KAEd7M,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAMozH,GAA8B,QAAU,cAE9C17D,QAASA,IAAMo7D,EACb,CAAE9wI,OAAQZ,EAAQU,OAAQ,CAAEmiE,wBAAyBmvE,MACrDj9D,SAEDniB,GAAK,0BAGRmhB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAMqzH,GAA4B,QAAU,cAE5C37D,QAASA,IAAMo7D,EACb,CAAE9wI,OAAQZ,EAAQU,OAAQ,CAAEoiE,sBAAuBmvE,MACnDl9D,SAEDniB,GAAK,wBAGRmhB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAMszH,GAA2B,QAAU,cAE3C57D,QAASA,IAAMo7D,EACb,CAAE9wI,OAAQZ,EAAQU,OAAQ,CAAEqiE,qBAAsBmvE,MAClDn9D,SAEDniB,GAAK,sBAGPs9E,IACC/5D,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAC6M,GAAAA,EAAa,KACd7M,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAMuzH,GAA8B,QAAU,cAE9C77D,QAASA,IAAMo7D,EACb,CAAE9wI,OAAQZ,EAAQU,OAAQ,CAAEsiE,wBAAyBmvE,MACrDp9D,SAEDniB,GAAK,0BAGRmhB,EAAAA,GAAAA,GAACsC,GAAAA,EAAQ,CACPz3D,KAAMwzH,GAA2B,QAAU,cAE3C97D,QAASA,IAAMo7D,EACb,CAAE9wI,OAAQZ,EAAQU,OAAQ,CAAEuiE,qBAAsBmvE,MAClDr9D,SAEDniB,GAAK,iCASxB,KAAKo8E,GAAc0G,mBACjB,OAAO3hE,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SAAE6M,GAAQ,cACxC,QACE,OACEzL,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,MAAIphD,UAAU,QAAOoiD,SA9PpB6M,GADLtlB,EACa,gBAGbizE,EACa,gBAGbz4C,EACa,oBAGbx3E,EACayxF,EAAQ,qBAAuB,sBAGjC,sBAkPP56B,EAAAA,GAAAA,IAAA,WAASxjD,UAAU,QAAOoiD,SAAA,CACvBi7B,IACCj8B,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLy/D,MAAM,cACNllB,KAAK,UACLmlB,UAAWiL,GAAQ,cACnBtL,QAAS2zC,GAAiBl1C,UAE1BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,eAGdguF,IAAcuP,IACbx7D,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLy/D,MAAM,cACNllB,KAAK,UACLmlB,UAAWiL,GAAQ,QACnBtL,QAASy8D,GAAuBh+D,UAEhChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,WAGd09F,IACC37D,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLy/D,MAAM,cACNllB,KAAK,UACLmlB,UAAWiL,GAAQ,QACnBtL,QAASy8D,GAAuBh+D,UAEhChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,WAGdw9F,IACCz7D,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLy/D,MAAM,cACNllB,KAAK,UACLmlB,UAAWiL,GAAQ,aACnBtL,QAASw8D,GAAgB/9D,UAEzBhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,WAGd89F,IACC/7D,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLx/D,OAAK,EACLy/D,MAAM,cACNllB,KAAK,UACLmlB,UAAWiL,GAAQ,cACnBtL,QAAS08D,GAAuBj+D,UAEhChB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,kBAO3B,CAwCOskG,U,oDC5rBT,UAAgB,KAAO,WAAW,UAAY,WAAW,iBAAiB,WAAW,cAAgB,WAAW,QAAU,WAAW,KAAO,WAAW,MAAQ,WAAW,KAAO,WAAW,gBAAkB,WAAW,OAAS,WAAW,KAAO,WAAW,MAAQ,WAAW,SAAW,WAAW,cAAgB,WAAW,yBAA2B,WAAW,qBAAuB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,mBAAqB,WAAW,QAAU,WAAW,aAAe,WAAW,eAAiB,WAAW,aAAe,WAAW,YAAc,WAAW,KAAO,WAAW,UAAY,Y,oDCmDvoB,MAAMC,GAAqD,CACzD,EAAGC,GACH,EAAGC,GACH,GAAIC,IAGAC,GAAoE,CACxE12D,cAAc,EACd22D,WAAY,OACZ12D,YAAa,GAGT22D,GAA4C,CAChD52D,cAAc,EACdzhE,SAAU,0BACVo4H,WAAY,OACZE,qBAAqB,GAuWvB,IAAeviE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBx4E,IACC,MACMy9C,GADWv9C,EAAAA,EAAAA,KAAeF,GACCy9C,gBAC3B06F,GAAsBC,EAAAA,EAAAA,IAAuCp4I,GAC7DoB,EAASq8C,GAAmBA,EAAgBr8C,OAC5CgC,EAAOhC,GAASmG,EAAAA,EAAAA,KAAWvH,EAAQoB,QAAUkI,EAC7C4uF,EAAY90F,IAAQ2e,EAAAA,EAAAA,IAAc3e,GAClCi1I,EAA2Br4I,EAAO2pB,WAAW0uH,yBAEnD,MAAO,CACL56F,kBACA06F,sBACA/2I,OAAQA,EACRi3I,2BACAngD,cAfc1f,CApWI0+D,EACtBz5F,kBACA06F,sBACA/2I,SACAi3I,2BACAngD,gBAEA,MAAM,SACJx1E,EAAQ,iBAAE41H,EAAgB,qBAAEC,EAAoB,kBAAEC,EAAiB,iBAAEhpI,IACnEyP,EAAAA,EAAAA,MACE+0C,GAAO+iB,EAAAA,GAAAA,KACPgD,GAAgBC,EAAAA,GAAAA,MAEhBy+D,EAAWh7F,GAAiBH,YAC5B3F,EAAS8gG,EAAWh7F,EAAgBH,iBAAch0C,EAIlDovI,IAFkBj7F,GAAmBA,GAAiBD,QAAQ7kC,QAC9D8kC,GAAiBO,cAAcrlC,QACa8kC,GAAiBO,cAC9DP,GAAiBO,cAAcF,MAAMj8C,OAAS,GAE7C,aACJ82I,EAAY,aACZC,EAAY,OACZp7F,EAAM,cACNq7F,EAAa,gBACbC,IACExhE,EAAAA,GAAAA,IAAQ,IACL3/B,GAUEohG,EAAAA,GAAAA,GAAqBphG,GATnB,CACLghG,aAAc,EACdC,cAAc,EACdp7F,OAAQ,EACRq7F,cAAe,EACfC,gBAAiB,EACjBE,iBAAkB,IAIrB,CAACrhG,IAEEshG,GAAgB3hE,EAAAA,GAAAA,IAAQ,KAC5B,GAAK3/B,EAEL,MAAO,CACLsH,MAAO05F,EACPn7F,SACA07F,mBAAoBvhG,EAAOuhG,mBAC3BJ,kBACAE,iBAAkBrhG,EAAOqhG,mBAE1B,CAACrhG,EAAQ6F,EAAQm7F,EAAcG,IAE5B36D,GAAO7G,EAAAA,GAAAA,IAAQ,IACfohE,EACK,CACL,CACEt2I,KAAM,YACNsN,MAAOskD,EAAK,sBAAuBvW,GAAiBD,QAAQ7kC,MAAO,MAErE,CACEvW,KAAM,kBACNsN,MAAOskD,EAAK,qBAAsBvW,GAAiBO,cAAcrlC,MAAO,OAIvE,GACN,CAAC+/H,EAAuB1kF,EAAMvW,GAAiBD,QAAQ7kC,MAAO8kC,GAAiBO,cAAcrlC,QAE1FkvH,GAAavwD,EAAAA,GAAAA,IAAQ,IAClB75B,GAAiBD,QAAUC,EAAgBD,QAAQM,KAAKj8C,OAAS,EAAI,EAAI,EAC/E,CAAC47C,KAEG2gC,EAAW6pD,IAAgBnxD,EAAAA,GAAAA,IAAS+wD,GAErCY,EAAqBrqD,EAAYD,EAAKt8E,OAAS,EAAIs8E,EAAKt8E,OAAS,EAAIu8E,EAErE0hD,EAAU3hD,EAAKsqD,IAAqBrmI,KAEpCm8E,EAAYJ,EAAKzkE,UAAU,EAAGtX,UAAWA,IAAS09H,GAElDqZ,GAAsB7hE,EAAAA,GAAAA,IAAQ,KAClC,IAAK75B,EAAiB,OAEtB,MAAMK,EAAO46F,EAAqC,cAAZ5Y,EAClCriF,EAAgBD,OAASC,EAAgBO,aAAgBP,EAAgBD,OAC7E,IAAKM,GAAMnlC,MAAO,OAElB,MAAMygI,EAAoBt7F,EAAKA,KAAKpgC,OAAO,CAACgkH,EAAOpiF,IAC1CoiF,GAASpiF,EAAM+5F,YAAc,GACnC,GAGGC,EADax7F,EAAKnlC,MACSygI,EAEjC,OAAOE,EAAc,EAAIA,OAAchwI,GACtC,CAACovI,EAAuBj7F,EAAiBqiF,IAEtCyZ,GAAkB5+D,EAAAA,GAAAA,GAAiB0+D,IACvClkE,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAAOk+C,SAASrjE,UAC9BoB,EAAAA,GAAAA,IAAA,OAAKxjD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GAAOm+C,cAAen+C,GAAOo+C,0BAA0BvjE,SAAA,EACpFhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,QAAQrf,UAAWunE,GAAOq+C,qBACrCxkE,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAAOs+C,mBAAmBzjE,SAAEkjE,UAK5CQ,GAAsBl/D,EAAAA,GAAAA,GAAiBr7B,IAC3C,GAAKA,EAAMw6F,gBAAmBx6F,EAAMhD,OAIpC,OACE64B,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAAOk+C,SAASrjE,UAC9BoB,EAAAA,GAAAA,IAAA,OAAKxjD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GAAOm+C,eACnCn6F,EAAMw6F,gBAAkBx+C,GAAOy+C,qBAChCz+C,GAAOo+C,yBACPp+C,GAAO0+C,qBAAqB7jE,SAAA,EAE5BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,OAAOrf,UAAWunE,GAAOq+C,qBACpCxkE,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAAOs+C,mBAAmBzjE,SACvCniB,EAAK1U,EAAMw6F,eACR,mBAAqB,yBAO7BG,GAAqBt/D,EAAAA,GAAAA,GAAiBj6D,IACrCA,GAMLgC,EAAS,CAAEpgB,GAAIoe,IACf63H,KANE/oI,EAAiB,CACfxO,QAASgzD,EAAK,uCAQdkmF,GAAkBv/D,EAAAA,GAAAA,GAAiBr7B,IAGvC,IAAI66F,EAYJ,OAdiB/jI,QAAQkpC,GAAOrJ,SAI9BkkG,EAAa,IACRpC,GACHroI,MAAOskD,EAAK,QAAS1U,EAAMrJ,SAI1BqJ,EAAM5+B,SACTy5H,EAAalC,KAIb9iE,EAAAA,GAAAA,GAAC06D,GAAAA,EAAQ,CACP97G,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GAAO8+C,UAAW,uBAC5C1iE,QAASA,IAAMuiE,EAAmB36F,EAAM5+B,QAAQy1D,UAEhDhB,EAAAA,GAAAA,GAACyyC,GAAAA,EAAe,CACd7zF,UAAWunE,GAAO3mF,KAClB+L,OAAQ4+B,EAAM5+B,OACdy5H,WAAYA,EACZxiG,OAAQqc,EAAK,iBAAiBqmF,EAAAA,GAAAA,GAAiBrmF,EAAsB,IAAhB1U,EAAMg7F,UAC3DC,eAAa,EACbvK,eAAa,EACbwK,QAAM,EACNC,YAAU,EACVC,YAAap7F,EAAM+5F,WAAaE,EAAgBj6F,EAAM+5F,iBAAc/vI,EACpEqxI,aAAcd,EAAoBv6F,SAMpCs7F,GAAsBjgE,EAAAA,GAAAA,GAAgB,KAC1C69D,EAAkB,CAAEp3I,aAGhBk/H,GAAiB3lD,EAAAA,GAAAA,GAAiB3d,IACtCA,EAAE6X,iBACFyjE,EAAiB,CAAEz6F,QAAqB,oBAAZiiF,MAGxB+a,GAA+BlgE,EAAAA,GAAAA,GAAiBh+B,IACpD67F,EAAkB,CAAEp3I,SAAQu7C,sBAsB9B,OACE46B,EAAAA,GAAAA,IAAA,OAAKxjD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GAAO8wB,KAAM,+BAA+Bj2C,SAAA,EACvEsiE,IAAYtjE,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,IACrBmiE,GAAYQ,IACX1hE,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEoB,EAAAA,GAAAA,IAAA,OAAKxjD,UAAWunE,GAAOw/C,QAAQ3kE,SAAA,EAC7BhB,EAAAA,GAAAA,GAAC4lE,GAAAA,EAAe,CACdC,SAAUhnF,EAAK,cAAe2kF,GAC9BsC,UAAWrC,EAAe5kF,EAAK,cAAe2kF,EAAe,QAAKrvI,EAClEiS,SAAUs9H,EACVqC,mBAAmBC,EAAAA,GAAAA,IAAc39F,GACjCm8F,kBAAkB,WAEpBxkE,EAAAA,GAAAA,GAACimE,GAAAA,EAAkB,CAACrnH,UAAWunE,GAAO9wC,MAAOM,WAAYmuF,EAAe72I,KAAK,aAE9E62I,EAAcD,mBACbzhE,EAAAA,GAAAA,IAAA,OAAKxjD,UAAWunE,GAAOw/C,QAAQ3kE,SAAA,EAC7BhB,EAAAA,GAAAA,GAAA,MAAIphD,UAAWunE,GAAO+/C,cAAe1jE,IAAK3jB,EAAK4jB,MAAQ,WAAQtuE,EAAU6sE,SACtEniB,EAAK,+BAEPilF,GAAeD,kBAAkBpqI,IAAK+tC,IACrC,MAAM2+F,EAAkB,UAAW3+F,EAEnC,OACEw4B,EAAAA,GAAAA,GAAC06D,GAAAA,EAAQ,CAEP97G,UAAU,sBAEV2jD,QAASA,IAAMmjE,EAA6Bl+F,GAAiBw5B,UAE7DoB,EAAAA,GAAAA,IAAA,OAAKxjD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GAAO3jD,OAAQ,oBAAoBw+B,SAAA,EAChEhB,EAAAA,GAAAA,GAAA,OAAAgB,SACGmlE,GAEGnmE,EAAAA,GAAAA,GAAA,OACEurB,IAAK66C,GACLxnH,UAAWunE,GAAOkgD,aAClB76C,IAAK3sC,EAAK,eAGZmhB,EAAAA,GAAAA,GAAA,OACEurB,IAAKi3C,GAAkBh7F,EAAgBzE,SAAWy/F,GAAkB,GACpE5jH,UAAWunE,GAAOkgD,aAClB76C,IAAK3sC,EAAK,iBAIlBujB,EAAAA,GAAAA,IAAA,OAAKxjD,UAAWunE,GAAO57C,KAAKy2B,SAAA,EAC1BhB,EAAAA,GAAAA,GAAA,MAAAgB,SACGmlE,EACGtnF,EAAK,+BAAgCrX,EAAgB1G,OACrD+d,EAAK,qCAAsCrX,EAAgB68F,aAEjErkE,EAAAA,GAAAA,GAAA,KAAGphD,UAAWunE,GAAOmgD,MAAMtlE,SAEvBmlE,EAAkBtnF,EAAK,8BAA+BrX,EAAgB68F,UAClExlF,EAAK,wBAAyBrX,EAAgBzE,cAIxDi9B,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAAOk+C,SAASrjE,UAC9BoB,EAAAA,GAAAA,IAAA,OAAKxjD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GAAOm+C,cACpCn+C,GAAOo+C,yBACPp+C,GAAO0+C,qBAAqB7jE,SAAA,EAE5BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,QAAQrf,UAAWunE,GAAOq+C,qBACrCxkE,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAAOs+C,mBAAoBjiE,IAAK3jB,EAAK4jB,MAAQ,WAAQtuE,EAAU6sE,SAC5EmlE,EAAkB3+F,EAAgBa,OAC/Bb,EAAgB68F,UAAYnB,GAA4BqD,EAAAA,gBA3C/D/+F,EAAgBr6C,OAmD3B6yE,EAAAA,GAAAA,GAAA,KAAGphD,UAAU,kBAAiBoiD,SAAmBniB,EAAK,+BAAnB,kBAGvCujB,EAAAA,GAAAA,IAAA,OAAKxjD,UAAWunE,GAAOw/C,QAAQ3kE,SAAA,CAC5BuiE,GACCnhE,EAAAA,GAAAA,IAAA,OACExjD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GAAOqgD,aAAcrgD,GAAO31F,SAASwwE,SAAA,EAE/DhB,EAAAA,GAAAA,GAACmJ,GAAAA,GAAU,CACTrE,IAAKF,EACL3mC,KAAM4gB,EAAK4jB,MAAQ,oBAAsB,iBACzC2G,UAAWA,EACXC,YAAaL,EAAKt8E,OAClB6sI,qBAAmB,EAAAv4D,SA5GnC,WACE,IAAIylE,EAOJ,GANgB,cAAZ9b,EACF8b,EAAen+F,GAAiBD,QAAQM,KACnB,oBAAZgiF,IACT8b,EAAen+F,GAAiBO,cAAcF,OAG5C89F,GAAiBA,GAAc/5I,OAInC,OACEszE,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAAOw/C,QAAQ3kE,SAC5BylE,GAAchtI,IAAK0wC,GAAU46F,EAAgB56F,KAGpD,CA6FiB8nD,MAEHjyB,EAAAA,GAAAA,GAAC8I,GAAAA,EAAO,CAACG,UAAWqqD,EAAoBtqD,KAAMA,EAAME,YAAa4pD,QAGnE1wD,EAAAA,GAAAA,IAAAC,GAAAA,GAAA,CAAArB,SAAA,EACEhB,EAAAA,GAAAA,GAAA,MAAIphD,UAAWunE,GAAO+/C,cAAe1jE,IAAK3jB,EAAK4jB,MAAQ,WAAQtuE,EAAU6sE,SACtEniB,EAAK,sBAAuBvW,GAAiBD,QAAQ7kC,UAEtD8kC,GAAiBD,QAAQM,MAAMj8C,SAC/BszE,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAAOugD,UAAU1lE,SAC9BniB,EAAKkkC,EAAY,iBAAmB,yBAGxCz6C,GAAiBD,QAAQM,MAAMlvC,IAAK0wC,GAAU46F,EAAgB56F,OAGlElpC,QAAQ+iI,KACP5hE,EAAAA,GAAAA,IAACs4D,GAAAA,EAAQ,CAEP97G,UAAWunE,GAAOwgD,SAClB19B,SAAU3gE,GAAiBS,kBAC3Bw5B,QAAS4oD,EAAenqD,SAAA,CAEvB14B,GAAiBS,mBAChBi3B,EAAAA,GAAAA,GAAC8K,GAAAA,EAAO,CAAClsD,UAAWunE,GAAOygD,mBAE3B5mE,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,OAAOrf,UAAWunE,GAAO0gD,OAErChoF,EAAK,YAAamlF,EAAqB,OAVpC,iBAcVhkE,EAAAA,GAAAA,GAAC8mE,GAAAA,EAAS,CAACloH,UAAWunE,GAAOw/C,QAAS/iH,KAAM4f,EAAQukG,SAAUC,WAAS,EAACzsI,MAAOskD,EAAK,qBACnFmkF,IACC5gE,EAAAA,GAAAA,IAAA,OAAKxjD,UAAWunE,GAAOw/C,QAAQ3kE,SAAA,EAC7BhB,EAAAA,GAAAA,GAAC06D,GAAAA,EAAQ,CAEP7vH,KAAK,OACL03D,QAASkjE,EACT7mH,UAAWunE,GAAO8gD,eAAejmE,SAEhCniB,EAAK,8BALF,cAONmhB,EAAAA,GAAAA,GAAA,KAAGphD,UAAU,kBAAiBoiD,SAC3BniB,EACCkkC,EAAY,wBAA0B,+BAFP,0BC9YjD,GAN8CpjB,IAC5C,MAAMkiE,GAAoBhiE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,qBAEzD,OAAOwhE,GAAoB7hE,EAAAA,GAAAA,GAAC6hE,EAAiB,IAAKliE,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCExE,GAPmDxB,IACjD,MAAM,OAAE14B,GAAW04B,EACbunE,GAAyBrnE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,0BAA2Bp5B,GAEzF,OAAOigG,GAAyBlnE,EAAAA,GAAAA,GAACknE,EAAsB,IAAKvnE,SAAYxrE,G,gBCX1E,UAAgB,KAAO,WAAW,MAAQ,WAAW,OAAS,WAAW,MAAQ,WAAW,QAAU,WAAW,QAAU,WAAW,gBAAkB,WAAW,YAAc,WAAW,YAAc,WAAW,QAAU,WAAW,eAAiB,WAAW,YAAc,WAAW,WAAa,YC4B5S,IAAIgzI,GACAC,GAWJ,MAAMC,GAA6B,CACjCC,cAAe,kCACfC,aAAc,kCAEVC,GAAsB70I,OAAO4G,KAAK8tI,IAuOxC,IAAe7mE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBx4E,IACC,MAAM8N,GAAW5N,EAAAA,EAAAA,KAAeF,IAE9Bg/B,UACEmrB,OAAO,YACL7V,KAGFt0C,EACEi+C,EAAyBnwC,EAASmwC,uBAClC78C,EAAS68C,GAA0BA,EAAuB78C,OAC1DgC,EAAOhC,GAASmG,EAAAA,EAAAA,KAAWvH,EAAQoB,QAAUkI,EAC7CghD,GAAOjqC,EAAAA,EAAAA,KAAmBrgB,EAAQoB,IAAUmpD,eAC5C2nD,EAAY97F,QAAQhT,GAAM8uG,WAE1BpnD,EAAah9C,EAASg9C,WAAW8xF,aAEjCC,EAAoC78I,EAAO2pB,WAAWkzH,kCAE5D,MAAO,CACLz7I,OAAQA,EACRkpD,OACAQ,aACAonD,YACA2qC,oCACAvoG,gBA1BckkC,CA5NW2+D,EAC7B/1I,SACAkpD,OACAQ,aACAonD,YACA2qC,oCACAvoG,kBAEA,MAAM,kCAAEwoG,EAAiC,kCAAEC,EAAiC,iBAAErsD,IAAqBzxE,EAAAA,EAAAA,MAC7F+jE,GAAUjM,EAAAA,GAAAA,KACV/iB,GAAOgiB,EAAAA,GAAAA,KAEP0nB,GAAe1jB,EAAAA,GAAAA,OACdmuB,EAASgsB,IAAcr9C,EAAAA,GAAAA,KAAS,GACjCkmE,GAAehjE,EAAAA,GAAAA,IAAiB,IAChCo6C,GAAcC,EAAAA,GAAAA,MACb4oB,EAA8BC,EAA4BC,IAA+Bj3D,EAAAA,GAAAA,IAAQ,IACjGk3D,EAA6BC,EAA+BC,IAAkCp3D,EAAAA,GAAAA,KAC/Fq3D,EAAmBzyF,GAAY0yF,UAAUD,iBACzCE,EAAsB3yF,GAAY0yF,UAAUC,oBAC5CC,EAAcxrC,GAAa2qC,GAAqCzmI,QAAQmnI,IACzEE,GAELxnE,EAAAA,GAAAA,IAAU,KACJ70E,IACF07I,EAAkC,CAAE96I,OAAQZ,IAC5CsvF,MAED,CAACtvF,EAAQ07I,KAEZ7mE,EAAAA,GAAAA,IAAU,KACR,iBAvDJ3hE,iBAME,OALKgoI,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CAiDYqB,GAEDx1C,GAKDzK,EAAazpE,SACf5R,MAAMxI,KAAK6jF,EAAazpE,QAAQkiD,UAAUj0E,QAAS07I,IACjDA,EAAMr9B,UAAY,GAClBq9B,EAAMnoC,UAAUvrG,IAAIoxF,GAAOuiD,UAI/Bb,EAAa/oH,QAAU,GAElB62B,GAAe4yC,EAAazpE,UAIjC0oH,GAAoBz6I,QAAQ,CAACkxC,EAAM35B,KACjC,MAAMqkI,EAAQhzF,EAAW1X,GACQ,iBAAV0qG,GAERd,EAAa/oH,QAAQxvB,SAAS2uC,KAIxC0qG,GAMLvB,GAAYwB,OAAOrgD,EAAazpE,QAASkiD,SAAS18D,GAAuB,CACvE/J,MAAOszE,EAASw5D,GAAsDppG,OACnE0qG,IAGLd,EAAa/oH,QAAQxoB,KAAK2nC,GAE1BsqD,EAAazpE,QAASkiD,SAAS18D,GAAOg8F,UAAUa,OAAOhb,GAAOuiD,SAZ5Db,EAAa/oH,QAAQxoB,KAAK2nC,MAe9BghF,MAzCED,GAAW,EA0Cd,EA9CD,IA+CC,CAAChsB,EAASr9C,EAAYk4B,EAAS5hF,EAAQkpD,EAAM8pE,IAoChD,MAAM4pB,GAAU1mE,EAAAA,GAAAA,IAAQ,KACtB,MAAM2mE,EAAWj7D,EAAQ,aACzB,OAAOhvB,EACL,mBACA,CACEj8B,MACEw/C,EAAAA,GAAAA,IAAC+oB,GAAAA,EAAI,CAAC+tB,WAAS,EAAC32C,QAASwlE,EAA2B/mE,SAAA,CACjD8nE,GACD9oE,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,aAIjB,CACEwsD,WAAW,KAGd,CAAC5rC,EAAMgvB,IAEJk7D,GAAc5mE,EAAAA,GAAAA,IAAQ,KAC1B,MAAM2mE,EAAWj7D,EAAQ,aACzB,OAAOhvB,EACL,8BACA,CACEj8B,MACEw/C,EAAAA,GAAAA,IAAC4mE,GAAAA,EAAQ,CAACr1H,IAAKk6D,EAAQ,gCAAiCp1E,KAAMqwI,EAAS9nE,SAAA,CACpE8nE,GACD9oE,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAC7kC,KAAK,aAIjB,CACEwsD,WAAW,KAGd,CAAC5rC,EAAMgvB,IAEJo7D,GAAkCzjE,EAAAA,GAAAA,GAAgB,KAClDrmC,EACFyoG,EAAkC,CAChC37I,WAGFi8I,MAIJ,OAAKl1C,GAAYr9C,GAKfysB,EAAAA,GAAAA,IAAA,OAAKxjD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GAAO8wB,KAAM,gBAAiBjkB,GAAW7M,GAAO+iD,OAAOloE,SAAA,EACpFhB,EAAAA,GAAAA,GAAA,OAAKphD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GAAOw/C,QAASx/C,GAAO0iD,SAAS7nE,SAAE6nE,KAEjE7oE,EAAAA,GAAAA,GAACimE,GAAAA,EAAkB,CACjBtwF,WAAYA,EACZwzF,WAAS,EACTl8I,KAAK,eACLsN,MAAOszE,EAAQ,wBACfj/D,UACEoxD,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAAOijD,WAAWpoE,SAAE6M,EAAQ,oCAI9Cg6D,EAAa/oH,QAAQpyB,SAAUszE,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KAEzCnB,EAAAA,GAAAA,GAAA,OAAK8E,IAAKyjB,EAAc3pE,UAAWunE,GAAOw/C,QAAQ3kE,SAC/CwmE,GAAoB76I,OAAOsU,SAASxH,IAAKkvI,IACxC3oE,EAAAA,GAAAA,GAAA,OAAiBphD,WAAWkjD,EAAAA,GAAAA,GAAeqkB,GAAOwiD,MAAOxiD,GAAOuiD,SAAtDC,OAIdvmE,EAAAA,GAAAA,IAAA,OAAKxjD,UAAWunE,GAAOw/C,QAAQ3kE,SAAA,CAC5B6M,EAAQ,kCA3Gf,WACE,MAAOw7D,EAAgBC,GAAkBlB,EAAmBA,EAAiBmB,QAAQ,GAAGvgI,MAAM,KAAO,CAAC,IAC/FwgI,EAAgBC,GAAkBrB,GACpCzyF,GAAY+zF,SAAWtB,EAAmBzyF,EAAW+zF,SAASH,QAAQ,GAAGvgI,MAAM,KAAO,CAAC,GAE5F,OACEo5D,EAAAA,GAAAA,IAAA,OAAKxjD,UAAWunE,GAAOwjD,gBAAgB3oE,SAAA,EACrCoB,EAAAA,GAAAA,IAAA,OAAKxjD,UAAWunE,GAAOyjD,QAAQ5oE,SAAA,EAC7BhB,EAAAA,GAAAA,GAAC8C,GAAAA,EAAI,CAAClkD,UAAWunE,GAAO0jD,YAAa5rG,KAAK,aAC1CmkC,EAAAA,GAAAA,IAAA,KAAGxjD,UAAWunE,GAAO2jD,YAAY9oE,SAAA,CAC9BqoE,EACAC,GACClnE,EAAAA,GAAAA,IAAA,QAAMxjD,UAAWunE,GAAO4jD,YAAY/oE,SAAA,CAAC,IAElCsoE,UAEDn1I,QAGP,KACDiuE,EAAAA,GAAAA,IAAA,QAAMxjD,UAAWunE,GAAO6jD,QAAQhpE,SAAA,CAAC,MAE9BwoE,EACAC,GACCrnE,EAAAA,GAAAA,IAAA,QAAMxjD,UAAWunE,GAAOsjD,eAAezoE,SAAA,CAAC,IAErCyoE,UAEDt1I,OAIZ,CA6EO81I,IAEDjqE,EAAAA,GAAAA,GAAC0C,GAAAA,EAAM,CACLjlB,KAAK,UACLxwD,KAAK,SACLs1E,QAAS0mE,EACThgC,UAAWs/B,EAAYvnE,SAEtB6M,EAAQ,2BAGX7N,EAAAA,GAAAA,GAAA,OAAKphD,UAAWunE,GAAOijD,WAAWpoE,SAAE+nE,QAGtC/oE,EAAAA,GAAAA,GAACknE,GAAsB,CACrBjgG,OAAQ6gG,EACR3kE,QAAS6kE,KAEXhoE,EAAAA,GAAAA,GAACyuC,GAAAA,EAAa,CACZy7B,eAAa,EACbjjG,OAAQghG,EACR9kE,QAASglE,EACTx5B,eAAgBw5B,EAChBz5B,aAAc7vD,EAAK,MAAMmiB,UAEzBhB,EAAAA,GAAAA,GAAA,KAAAgB,UAAI6pB,EAAAA,GAAAA,GAAWhd,EAAQ,oCAAqC,CAAC,eArD1D7N,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,OCzMnB,GANuCxB,IACrC,MAAMiiE,GAAa/hE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,cAElD,OAAOuhE,GAAa5hE,EAAAA,GAAAA,GAAC4hE,EAAU,IAAKjiE,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCG1D,GAN4CxB,IAC1C,MAAMmiE,GAAkBjiE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,mBAEvD,OAAOyhE,GAAkB9hE,EAAAA,GAAAA,GAAC8hE,EAAe,IAAKniE,KAAYK,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCCpE,GAN+BgpE,KAC7B,MAAMhL,GAAgBt/D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAErD,OAAO8+D,GAAgBn/D,EAAAA,GAAAA,GAACm/D,EAAa,KAAMn/D,EAAAA,GAAAA,GAACmB,GAAAA,EAAO,KCsD/CipE,GAAqB,IAAM1rF,EAAAA,IAC3B2rF,GAAqB13I,OAAO4G,KAAK+wI,EAAAA,IAAoB59I,OAAS,EAC9D69I,GAA2B53I,OAAO4G,KAAKklI,EAAAA,IAAmB/xI,OAAS,EAEzE,SAAS89I,KACP,MAAMC,EAAc55I,SAASyuE,cAAc,mCACvCmrE,GACFA,EAAY92G,MAEhB,CAEA,MA0VA,IAAe6sC,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUymF,eACT,MAAM,OAAErlF,EAAM,SAAEwG,IAAagF,EAAAA,EAAAA,KAAyB5M,IAAW,CAAC,EAE5D6/I,GAAuBC,EAAAA,EAAAA,KAA2B9/I,IAClD,WACJy8B,EAAU,4BAAEq8C,EAA2B,eAAE/nB,EAAc,uBAAE4R,IACvDziE,EAAAA,EAAAA,KAAeF,GACb+/I,EAAuB3+I,EAASq7B,EAAWzqB,SAAS5Q,IAASs7D,gBAAapzD,EAE1Eo0D,EAAkBt8D,GAASD,EAAAA,EAAAA,KAAqBnB,EAAQoB,QAAUkI,EAClEiP,EAAgBnX,GAASsK,EAAAA,EAAAA,IAAiBtK,EAAQwG,EAAU5H,EAAOiC,oBAAiBqH,EAE1F,MAAO,CACL8kF,YAAY4xD,EAAAA,EAAAA,KAA4BhgJ,EAAQymF,GAChDrlF,SACAwG,WACAq4I,eAAgB7pI,QAAQhV,GAAUy+I,GAClC/mE,8BACAinE,uBACAhvF,iBACA4R,yBACAjF,kBACAnlD,kBAvBcigE,CA1V2B0nE,EAC7C9xD,aACAhtF,SACAwG,WACA6+E,WACAw5D,iBACAnnE,8BACAinE,uBACAhvF,iBACA4R,yBACAjF,kBACAnlD,oBAEA,MAAM,eACJ4nI,EAAc,iBACd1N,EAAgB,sBAChBF,EAAqB,kBACrBC,EAAiB,iBACjB4N,EAAgB,eAChBC,EAAc,6BACdlZ,EAA4B,yBAC5BwL,EAAwB,iBACxBD,EAAgB,wBAChB4N,EAAuB,sBACvBC,EAAqB,oBACrBC,EAAmB,4BACnBC,EAA2B,oBAC3BC,EAAmB,sBACnBC,EAAqB,oBACrBC,EAAmB,qBACnBrI,EAAoB,0BACpBsI,EAAyB,4BACzBC,IACE7hI,EAAAA,EAAAA,MAEEy+E,GAAe1jB,EAAAA,GAAAA,OAEbv5E,MAAOH,IAAgBslH,EAAAA,GAAAA,MACxBkhB,EAAcia,IAAmBjqE,EAAAA,GAAAA,IACtCpZ,IAAoBnlD,EAAgBwnH,EAAAA,GAAaI,aAAeJ,EAAAA,GAAa8G,UAExEwL,EAAkB2O,IAAuBlqE,EAAAA,GAAAA,IAA4B88D,EAAAA,GAAkBY,UACvFyM,EAAsBC,IAA2BpqE,EAAAA,GAAAA,OACjDqqE,EAAyBC,IAA8BtqE,EAAAA,GAAAA,MACxDuqE,EAAiBva,IAAiB/G,EAAAA,GAAa8G,QAE/CzqF,OAAwB9yC,IAAf8kF,EACTiiD,EAAYjiD,IAAeqxD,EAAAA,GAAmB6B,SAC9ChR,EAAeliD,IAAeqxD,EAAAA,GAAmBjgB,WACjDkS,EAAetjD,IAAeqxD,EAAAA,GAAmB1I,WACjDpF,EAAsBvjD,IAAeqxD,EAAAA,GAAmBzI,kBACxDpF,EAAoBxjD,IAAeqxD,EAAAA,GAAmBxI,gBACtDnF,EAAoB1jD,IAAeqxD,EAAAA,GAAmBvI,gBACtDrF,EAA2BzjD,IAAeqxD,EAAAA,GAAmBtI,uBAC7DpF,EAAkB3jD,IAAeqxD,EAAAA,GAAmBnL,cACpDtC,EAAc5jD,IAAeqxD,EAAAA,GAAmBlgB,UAChD0S,GAAgB7jD,IAAeqxD,EAAAA,GAAmB/f,YAClD0S,GAAsBhkD,IAAeqxD,EAAAA,GAAmBlL,cACxDrC,GAAkB9jD,IAAeqxD,EAAAA,GAAmBrgB,YACpD+S,GAAiB/jD,IAAeqxD,EAAAA,GAAmBpgB,UACnDkiB,GAAejhJ,GAAeI,EAAAA,KAE7BioF,GAAsB0rD,KAA2Bv9D,EAAAA,GAAAA,KAAU16B,GAE5Dg7F,IAAsBx8B,EAAAA,GAAAA,GAAiBxsB,GAAY,GAAO6xD,KAAoB,GAEpFuB,EAAAA,GAAAA,GAAgB,CACd9jD,eACA+jD,SAAU,gDACT,CAACrzD,EAAYikD,EAAkBjxI,EAAQwG,IAE1C,MAAMuhC,IAAQwxC,EAAAA,GAAAA,GAAgB,CAAC+mE,GAAiB,KAC9C,OAAQtzD,GACN,KAAKqxD,EAAAA,GAAmBlL,cACtBpN,EAA6B,CAAE/1E,uBAAwBisE,EAAAA,GAAuBskB,SAC9E,MACF,KAAKlC,EAAAA,GAAmB6B,SACtB,GAAID,GAAkBK,IAAmBhkF,EAAiB,CACxDqjF,EAAgBhhB,EAAAA,GAAa8G,SAC7B,KACF,CACAsZ,EAAe,CAAEr3I,OAAO,GAAS,CAAE0vF,gBAAgB,IACnD,MACF,KAAKinD,EAAAA,GAAmBjgB,WACtB,OAAQ6S,GACN,KAAKuB,EAAAA,GAAkBY,QACrB/B,IACA,MACF,KAAKmB,EAAAA,GAAkBc,gBACvB,KAAKd,EAAAA,GAAkBgB,WACvB,KAAKhB,EAAAA,GAAkBoB,iBACvB,KAAKpB,EAAAA,GAAkBgO,UACvB,KAAKhO,EAAAA,GAAkBsB,mBACvB,KAAKtB,EAAAA,GAAkBkB,mBACvB,KAAKlB,EAAAA,GAAkBsC,aACvB,KAAKtC,EAAAA,GAAkBG,QACvB,KAAKH,EAAAA,GAAkB4C,UACvB,KAAK5C,EAAAA,GAAkBgD,aACvB,KAAKhD,EAAAA,GAAkB0B,oBACrB0L,EAAoBpN,EAAAA,GAAkBY,SACtC,MACF,KAAKZ,EAAAA,GAAkB4B,2BACvB,KAAK5B,EAAAA,GAAkBwB,kBACvB,KAAKxB,EAAAA,GAAkB8B,qBACrBsL,EAAoBpN,EAAAA,GAAkBoB,kBACtCkM,OAAwB53I,GACxB83I,OAA2B93I,GAC3B,MACF,KAAKsqI,EAAAA,GAAkBkD,mBACrBkK,EAAoBpN,EAAAA,GAAkBgB,YACtC,MACF,KAAKhB,EAAAA,GAAkBkC,gBACvB,KAAKlC,EAAAA,GAAkBoC,mBACvB,KAAKpC,EAAAA,GAAkB0C,eACvB,KAAK1C,EAAAA,GAAkBgC,mBACrBoL,EAAoBpN,EAAAA,GAAkBsB,oBACtC,MACF,KAAKtB,EAAAA,GAAkBC,WACvB,KAAKD,EAAAA,GAAkB8C,WACrBsK,EAAoBpN,EAAAA,GAAkBG,SACtCyM,EAAoB,CAAEp/I,OAAQA,EAASi8B,YAAQ/zB,IAC/CqpI,EAAyB,CAAEvxI,OAAQA,EAASi8B,YAAQ/zB,IAIxD,MAEF,KAAKm2I,EAAAA,GAAmBzI,kBACtBsJ,IACA,MACF,KAAKb,EAAAA,GAAmBxI,gBACtBsJ,IACA,MACF,KAAKd,EAAAA,GAAmB1I,WACtBrE,IACA,MACF,KAAK+M,EAAAA,GAAmBvI,gBACtBqB,IACA,MACF,KAAKkH,EAAAA,GAAmBtI,uBACtB2J,IACA,MACF,KAAKrB,EAAAA,GAAmBnL,cACtBqL,KACApN,EAAsB,CAAE5hH,WAAOrnB,IAC/B,MACF,KAAKm2I,EAAAA,GAAmBlgB,UACtBogB,KACAnN,EAAkB,CAAE7hH,WAAOrnB,IAC3B,MAEF,KAAKm2I,EAAAA,GAAmB/f,YACtB0gB,IACA,MACF,KAAKX,EAAAA,GAAmBrgB,YACtBuhB,IACA,MACF,KAAKlB,EAAAA,GAAmBpgB,UACtBuhB,OAKAiB,IAAyBlnE,EAAAA,GAAAA,GAAgB,CAACm1D,EAAUgS,KACxDZ,EAAwBpR,GACxBsR,EAA2BU,KAGvBC,IAA6BpnE,EAAAA,GAAAA,GAAiBijD,IAClDyiB,EAAe,CAAEj/I,OAAQA,EAASw8H,gBA+HpC,OA5HA3nD,EAAAA,GAAAA,IAAU,IAAO75B,GAAUh7C,GAAS+7E,EAAAA,GAAAA,GAAsBh0C,SAAS7/B,EAAY,CAAC8yC,EAAQjT,GAAO/nC,KAE/F60E,EAAAA,GAAAA,IAAU,KACR/qE,WAAW,KACTmpI,IAAyBj4F,IACxBmjG,KACF,CAACnjG,KAEJ65B,EAAAA,GAAAA,IAAU,KACJ8pE,IACFiB,EAAoBjB,GACpBU,OAA4Bn3I,KAE7B,CAACy2I,KAEJ9pE,EAAAA,GAAAA,IAAU,KACHllB,GAEL2vF,KACC,CAAC3vF,KAEJklB,EAAAA,GAAAA,IAAU,KACJtT,IACFx5B,KACA03G,EAA0B,CAAEn1G,WAAOpiC,MAEpC,CAACq5D,KAGJsT,EAAAA,GAAAA,IAAU,KACJ75B,GAAUmlG,IACZp4G,MAGD,CAACo4G,MAGJ1pC,EAAAA,GAAAA,GAA4B,EAAEmqC,EAAYC,MACpCD,IAAe5gJ,GAAU6gJ,IAAiBr6I,IAC5Cm5I,EACErjF,IAAoBnlD,EAAgBwnH,EAAAA,GAAaI,aAAeJ,EAAAA,GAAa8G,SAE/Ema,EAAoBpN,EAAAA,GAAkBY,WAEvC,CAACpzI,EAAQwG,EAAU2Q,EAAemlD,KAErC0f,EAAAA,GAAAA,GAAe,CACb5gB,SAAUyjF,IACR7xD,IAAeqxD,EAAAA,GAAmB6B,UAC/BlzD,IAAeqxD,EAAAA,GAAmBjgB,YAClCpxC,IAAeqxD,EAAAA,GAAmBlL,eAClCnmD,IAAeqxD,EAAAA,GAAmBrgB,aAClChxC,IAAeqxD,EAAAA,GAAmBpgB,WACvChiD,OAAQA,IAAMl0C,IAAM,MAwEpBouC,EAAAA,GAAAA,IAAA,OACEj1E,GAAG,sBACHyxB,UAAYksH,OAA+B32I,EAAd,YAAwB6sE,SAAA,CAEpDorE,KACCpsE,EAAAA,GAAAA,GAAA,OAAKphD,UAAU,mBAAmB2jD,QAASvuC,MAE7CouC,EAAAA,GAAAA,IAAA,OAAKj1E,GAAG,cAAa6zE,SAAA,EACnBhB,EAAAA,GAAAA,GAACq8D,GAAW,CACVpwI,OAAQA,EACRwG,SAAUA,EACV6pI,aAAcr1F,EACdi0F,UAAWA,EACXC,aAAcA,EACdoB,aAAcA,EACdI,kBAAmBA,EACnBD,yBAA0BA,EAC1BF,oBAAqBA,EACrBC,kBAAmBA,EACnBG,gBAAiBA,EACjBC,YAAaA,EACbC,cAAeA,GACfC,gBAAiBA,GACjBC,eAAgBA,GAChBC,oBAAqBA,GACrBtL,aAAcA,EACduL,iBAAkBA,EAClB/5D,QAASnvC,GACTmpG,eAAgB0O,KAElB7rE,EAAAA,GAAAA,GAACmJ,GAAAA,GAAU,CACTrE,IAAKyjB,EACLtqD,KAAOu1C,IAAwB7P,EAA+B,OAAS,WACvE0F,YAAaghE,GAAqBE,GAClCnhE,UAAW+xD,EAAekP,GAAqBnN,EAAmB+E,GAClEhoD,eAAa,EACbC,oBACG+nD,KAAwBqI,EAAAA,GAAmBzI,mBACvCI,KAAwBqI,EAAAA,GAAmBxI,gBAC5CwI,EAAAA,GAAmB1I,gBAAaztI,EACrC6sE,SA7GT,SAAuB3Z,GACrB,IAA6B,IAAzB46E,GAIJ,OAAQA,IACN,KAAKqI,EAAAA,GAAmBlL,cACtB,OACEp/D,EAAAA,GAAAA,GAACmoD,GAAc,CAEbl8H,OAAQA,EACRo7D,SAAUpgB,GAAUogB,EACpB+gE,WAAYwkB,GACZzpE,QAASnvC,IAJJ,oBAAoB/nC,KAO/B,KAAKq+I,EAAAA,GAAmB6B,SACtB,OACEnsE,EAAAA,GAAAA,GAAC0xD,GAAO,CAENzlI,OAAQA,EACRwG,SAAUA,EACVk/H,aAAcA,EACdrgD,SAAUA,EACVjqB,SAAUpgB,GAAUogB,EACpBuqE,qBAAsBga,GANjB,WAAW3/I,KAAWwG,KASjC,KAAK63I,EAAAA,GAAmBjgB,WACtB,OACErqD,EAAAA,GAAAA,GAACqqD,GAAU,CAETp+H,OAAQA,EACR62F,cAAeo6C,EACf8O,wBAAyBA,EACzBF,qBAAsBA,EACtBzkF,SAAUpgB,GAAUogB,EACpB81E,eAAgB0O,EAChBkB,mBAAoBL,GACpBvpE,QAASnvC,IARJ,cAAc/nC,KAAWixI,KAYpC,KAAKoN,EAAAA,GAAmB1I,WACtB,OAAO5hE,EAAAA,GAAAA,GAAC4hE,GAAU,CAAC31I,OAAQA,IAC7B,KAAKq+I,EAAAA,GAAmBvI,gBACtB,OAAO/hE,EAAAA,GAAAA,GAAC+hE,GAAe,IACzB,KAAKuI,EAAAA,GAAmBtI,uBACtB,OAAOhiE,EAAAA,GAAAA,GAACgiE,GAAsB,IAChC,KAAKsI,EAAAA,GAAmBzI,kBACtB,OAAO7hE,EAAAA,GAAAA,GAAC6hE,GAAiB,CAAC51I,OAAQA,EAASo7D,SAAUpgB,GAAUogB,IACjE,KAAKijF,EAAAA,GAAmBxI,gBACtB,OAAO9hE,EAAAA,GAAAA,GAAC8hE,GAAe,CAAC71I,OAAQA,EAASo7D,SAAUpgB,GAAUogB,IAC/D,KAAKijF,EAAAA,GAAmBnL,cACtB,OAAOn/D,EAAAA,GAAAA,GAACm/D,GAAa,CAACh8D,QAASnvC,GAAOqzB,SAAUpgB,GAAUogB,IAC5D,KAAKijF,EAAAA,GAAmBlgB,UACtB,OAAOpqD,EAAAA,GAAAA,GAACoqD,GAAS,CAACjnD,QAASnvC,GAAOqzB,SAAUpgB,GAAUogB,IACxD,KAAKijF,EAAAA,GAAmB/f,YACtB,OAAOvqD,EAAAA,GAAAA,GAACuqD,GAAW,CAACpnD,QAASnvC,GAAOqzB,SAAUpgB,GAAUogB,IAC1D,KAAKijF,EAAAA,GAAmBrgB,YACtB,OAAOjqD,EAAAA,GAAAA,GAACiqD,GAAW,CAAC9mD,QAASnvC,GAAOqzB,SAAUpgB,GAAUogB,IAC1D,KAAKijF,EAAAA,GAAmBpgB,UACtB,OAAOlqD,EAAAA,GAAAA,GAACkqD,GAAS,CAAC/mD,QAASnvC,GAAOqzB,SAAUpgB,GAAUogB,IAI5D,aCjWF,IAAemZ,EAAAA,GAAAA,IANwBwsE,EAAG/lG,aACxC,MAAMgmG,GAAcptE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,eAAgBp5B,GAEnE,OAAOgmG,GAAcjtE,EAAAA,GAAAA,GAACitE,EAAW,SAAM94I,ICGzC,GATqDwrE,IACnD,MAAM,yBAAExhB,GAA6BwhB,EAC/ButE,GAA2BrtE,EAAAA,GAAAA,GAC/BC,GAAAA,GAAQO,MAAO,4BAA6BliB,GAG9C,OAAO+uF,GAA2BltE,EAAAA,GAAAA,GAACktE,EAAwB,IAAKvtE,SAAYxrE,GCC9E,GAP0CwrE,IACxC,MAAM,IAAE9lD,GAAQ8lD,EACVwtE,GAAgBttE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkBxmD,GAEvE,OAAOszH,GAAgBntE,EAAAA,GAAAA,GAACmtE,EAAa,IAAKxtE,SAAYxrE,GCGxD,GAP+CwrE,IAC7C,MAAM,OAAEjyD,GAAWiyD,EACbytE,GAAqBvtE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,sBAAuB3yD,GAEjF,OAAO0/H,GAAqBptE,EAAAA,GAAAA,GAACotE,EAAkB,IAAKztE,SAAYxrE,GCAlE,GANyBk5I,EAAGpmG,aAC1B,MAAMqmG,GAAUztE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,WAAYp5B,GAE3D,OAAOqmG,GAAUttE,EAAAA,GAAAA,GAACstE,EAAO,SAAMn5I,G,gBCWjC,MAEMo5I,GAAkB,IAAIz4I,IACtB04I,GAAmB,IAAI14I,IA8E7B,IAAe0rE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBx4E,IAGQ,CACL+jG,iBAHsB7jG,EAAAA,EAAAA,KAAeF,GAAQ+jG,kBAF/BvrB,CA5EoBoqE,EACtC7+C,sBAEA,MAAM,yBAAE8+C,EAAwB,iBAAErzI,IAAqByP,EAAAA,EAAAA,MAEjDs2F,GAAeC,EAAAA,GAAAA,GAVQ,KAUgC,GAEvDstC,GAAwBnoE,EAAAA,GAAAA,GAAiB/qD,IAC7C+yH,GAAiBz4I,IAAI0lB,GACrB2lF,EAAa,KACPotC,GAAiB/vF,OACnBiwF,EAAyB,CAAE9qF,YAAa11C,MAAMxI,KAAK8oI,MACnDA,GAAiB9zH,cAKvBonD,EAAAA,GAAAA,IAAU,KACHnuE,OAAO4G,KAAKq1F,GAAiBliG,OAKlCiG,OAAO4I,QAAQqzF,GAAiB7hG,QAAQ,EAAE84G,EAAWhjD,MACnD,GAAI0qF,GAAgBh4I,IAAIswG,GACtB,OAEF0nC,GAAgBx4I,IAAI8wG,GAEpB,MAAM,KAAEpoD,EAAI,SAAEuF,EAAUF,OAAQ8qF,GAAgB/qF,EAE1CkjD,EAAYj1D,GAAAA,GAA0B+0D,GAE5C,GAAIE,EAGF,OAFA8nC,EAAAA,GAAAA,GAAS9nC,EAAW/iD,QACpB2qF,EAAsB9nC,GAIxB,GAAIpoD,EAAOqwF,EAAAA,KAAoBC,EAAAA,KAAsBC,EAAAA,GAKnD,OAJA3zI,EAAiB,CACfxO,QAAS,6EAEX8hJ,EAAsB9nC,GAIxB,MAAMooC,EAAiBA,MACIljJ,EAAAA,EAAAA,MAAeiL,EAAAA,EAAAA,OAAa44F,gBAC/BiX,IACpB/0D,GAAAA,GAA2Bm9F,IAI/Bn9F,GAAAA,GAAkB+0D,EAAW+nC,GAAa,EAAMK,GAAgB/lF,EAAAA,GAAAA,MAAoBx4C,KAAMpM,IACxF,GAAIsqI,IAAgB78F,EAAAA,GAAem9F,YAAa,CAC9C,MAAMv6H,EAAM,IAAIM,IAAI3Q,EAAQuR,OAAOhkB,SAASs9I,SAC5Cx6H,EAAIiB,aAAavO,IAAI,WAAY+nI,mBAAmBprF,IACpD,MAAMqrF,EAAiBx5H,OAAOC,KAAKnB,EAAIyB,YACvCi5H,GAAgB9lE,iBAAiB,eAAgB,KAC/CluE,EAAiB,CACfxO,QAAS,2EAGf,MAAWyX,IACTuqI,EAAAA,GAAAA,GAASvqI,EAAQ0/C,GAGnB2qF,EAAsB9nC,OAjDxB0nC,GAAgB7zH,SAoDjB,CAACk1E,OCjFN,GAPiDjvB,IAC/C,MAAM,eAAE5jB,GAAmB4jB,EACrB2uE,GAAuBzuE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,wBAAyBtkB,GAErF,OAAOuyF,GAAuBtuE,EAAAA,GAAAA,GAACsuE,EAAoB,IAAK3uE,SAAYxrE,GCGtE,GAPmDwrE,IACjD,MAAM,OAAE14B,GAAW04B,EACb4uE,GAAyB1uE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,0BAA2Bp5B,GAEzF,OAAOsnG,GAAyBvuE,EAAAA,GAAAA,GAACuuE,EAAsB,IAAK5uE,SAAYxrE,G,4BCQ1E,MAuEA,IAAeqsE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUi/D,iBACT,MAAM,OAAE79D,GAAW69D,GAAc,CAAC,EAC5B77D,EAAOhC,IAAUmG,EAAAA,EAAAA,KAAWvH,EAAQoB,GACpCgf,EAAehf,GAASif,EAAAA,EAAAA,KAAmBrgB,EAAQoB,QAAUkI,EAGnE,MAAO,CACL2wF,QAHc7jF,QAAQhT,KAAS+rH,EAAAA,EAAAA,IAAiB/rH,OAAMkG,OAAWA,EAAW8W,KAL9Do4D,CA5DyBmrE,EAAG1kF,aAAY2kF,YAAW3pD,cACrE,MAAM,UAAE4pD,EAAS,gBAAEjsF,IAAoB34C,EAAAA,EAAAA,MACjC+0C,GAAO+iB,EAAAA,GAAAA,MACP,IAAEjuD,EAAG,OAAE1nB,EAAM,UAAE6F,GAAcg4D,GAAc,CAAC,EAC5C7iB,EAAShmC,QAAQ0S,GAEjBg7H,GAAoBC,EAAAA,GAAAA,GAAqB3iJ,IAC/C2zG,EAAAA,GAAAA,GAAY,KACV+uC,EAAkB,CAAE1hJ,KAAM,iBACzBg6C,GAAU69C,EApBmB,SAoBmB3wF,GAEnD,MAAM06I,GAAgB7sE,EAAAA,GAAAA,IAAahoD,IACjC,GAAK/tB,GAAW6F,EAChB,IACE,MAAM2kB,EAAO2uB,KAAK6sB,MAAMj4C,EAAMvD,MACP,gBAAnBA,EAAKwD,YACPwoC,EAAgB,CAAEviD,WAAYjU,EAAQ2N,WAAY,CAAC9H,GAAYsO,aAAa,IAC5EsuI,KAGqB,eAAnBj4H,EAAKwD,YACPwoC,EAAgB,CAAEviD,WAAYjU,EAAQ2N,WAAY,CAAC9H,KACnD48I,IAEJ,CAAE,MAAO7mF,GACP,GAED,CAAC57D,EAAQyiJ,EAAW58I,EAAW2wD,IAE5BqsF,GAAa9sE,EAAAA,GAAAA,IAAahoD,IAC9BA,EAAMqlG,cAAcxrF,SACnB,IAOH,OALAitC,EAAAA,GAAAA,IAAU,KACRjsD,OAAO0zD,iBAAiB,UAAWsmE,GAC5B,IAAMh6H,OAAO2zD,oBAAoB,UAAWqmE,IAClD,CAACA,KAGF7uE,EAAAA,GAAAA,GAAC+uE,GAAAA,EAAK,CACJnwH,UAAU,YACVqoB,OAAQA,EACRk8B,QAASurE,EACTn0I,MAAOk0I,EACPO,gBAAc,EAAAhuE,SAEb/5B,IACC+4B,EAAAA,GAAAA,GAAA,UACEphD,UAAU,aACVqwH,OAAQH,EACRvjD,IAAK53E,EACLpZ,MAAOskD,EAAK,cACZqwF,QAAQ,yDACRC,MAAM,oBCrEhB,GAP4CxvE,IAC1C,MAAM,OAAE14B,GAAW04B,EACbyvE,GAAkBvvE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,mBAAoBp5B,GAE3E,OAAOmoG,GAAkBpvE,EAAAA,GAAAA,GAACovE,EAAe,IAAKzvE,SAAYxrE,GCG5D,GAP4CwrE,IAC1C,MAAM,OAAE14B,GAAW04B,EACb0vE,GAAkBxvE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,mBAAoBp5B,GAE3E,OAAOooG,GAAkBrvE,EAAAA,GAAAA,GAACqvE,EAAe,IAAK1vE,SAAYxrE,GCA5D,GAN+Bm7I,EAAGroG,aAChC,MAAM01C,GAAgB9c,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkBp5B,GAEvE,OAAO01C,GAAgB3c,EAAAA,GAAAA,GAAC2c,EAAa,SAAMxoF,GCM7C,GAPqDwrE,IACnD,MAAM,MAAEp8D,GAAUo8D,EACZ4vE,GAA2B1vE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,4BAA6B98D,GAE7F,OAAOgsI,GAA2BvvE,EAAAA,GAAAA,GAACuvE,EAAwB,IAAK5vE,SAAYxrE,GCG9E,GAP0CwrE,IACxC,MAAM,OAAE14B,GAAW04B,EACb6vE,GAAgB3vE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkBp5B,GAEvE,OAAOuoG,GAAgBxvE,EAAAA,GAAAA,GAACwvE,EAAa,IAAK7vE,SAAYxrE,GCGxD,GAP6CwrE,IAC3C,MAAM,OAAE14B,GAAW04B,EACb8vE,GAAmB5vE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,oBAAqBp5B,GAE7E,OAAOwoG,GAAmBzvE,EAAAA,GAAAA,GAACyvE,EAAgB,IAAK9vE,SAAYxrE,GCG9D,GAPoDwrE,IAClD,MAAM,OAAE14B,GAAW04B,EACb+vE,GAA0B7vE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQimD,MAAO,2BAA4B9+E,GAE3F,OAAOyoG,GAA0B1vE,EAAAA,GAAAA,GAAC0vE,EAAuB,IAAK/vE,SAAYxrE,GCG5E,GAP0CwrE,IACxC,MAAM,IAAEhsD,GAAQgsD,EACVgwE,GAAgB9vE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQO,MAAO,iBAAkB1sD,GAEvE,OAAOg8H,GAAgB3vE,EAAAA,GAAAA,GAAC2vE,EAAa,IAAKhwE,SAAYxrE,GCXxD,IAAgB,KAAO,YC2CjBy7I,GAAkB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAE1EC,GAAY,IAAIC,OAAO,qjCAyK7B,IAAetvE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBx4E,IAAuBmhC,EAAAA,EAAAA,KAAKjhC,EAAAA,EAAAA,KAAeF,GAAS,CAAC,aADpCw4E,CAtKM0sE,EAAG9lF,eAC3B,MAAM+lF,GAAYnrE,EAAAA,GAAAA,MACZorE,GAAcprE,EAAAA,GAAAA,IAAmB,IACjCqrE,GAAkBrrE,EAAAA,GAAAA,KAAO,GACzBz5E,GAAaqlH,EAAAA,GAAAA,KACbwO,GAAcC,EAAAA,GAAAA,MACd,SAAE5tC,IAAaC,EAAAA,EAAAA,MAEf4+D,EAAwB7+D,EAAW,GAAK,KACxC,iBACJpnB,EAAgB,IAAEyb,EAAG,MAAEr6E,EAAK,KAAE8kJ,EAAI,OAAEhmD,EAAM,MAAEiB,EAAQ,WAClDphC,GAAY,CAAC,EAEXomF,GAAmB7qE,EAAAA,GAAAA,GAAgB,CAAC8qE,EAAWC,EAAW7lI,EAASylI,KACvE,IAAK,IAAIjgJ,EAAI,EAAGA,EAAIwa,EAAQxa,IAAK,CAC/B,MAAM,SACJksD,EAAQ,SAAEo0F,GACRC,GAA2BplD,EAAOilD,EAAGC,EAAGrgJ,GAEtCutD,EAzBkB,GAyBaizF,GAAuBC,GAEtDC,EAAchB,GAAgBpkJ,KAAK6B,MAAM7B,KAAKsN,SAAW82I,GAAgBljJ,SAC/EujJ,EAAYnxH,QAAQxoB,KAAK,CACvBu6I,IAAKz0F,EACLqB,OACAklB,MAAOiuE,EACPJ,WACAM,QAASrzF,EACTszF,iBAAkC,GAAhBvlJ,KAAKsN,SACvBk4I,SAAU,EACVC,YAAa3jJ,KAAKC,MAClB2jJ,WAAY,EACZC,OAAQlnF,GAAUxf,WAAaj/C,KAAKsN,SAAW,IAEnD,IAGIs4I,GAAe5rE,EAAAA,GAAAA,GAAgB,KACnC,IAAKwqE,EAAUlxH,UAAYoxH,EAAgBpxH,QACzC,OAEF,MAAMuyH,EAASrB,EAAUlxH,QAEnBwyH,EAAMD,EAAOE,WAAW,MAC9B,IAAKD,EACH,OAGF,MAAQhmJ,MAAOkmJ,EAAapnD,OAAQqnD,GAAiBJ,EACrDC,EAAII,UAAU,EAAG,EAAGF,EAAaC,GAEjC,MAAME,EAA+B,GACrC1B,EAAYnxH,QAAQ/xB,QAAQ,CAACojB,EAAGjgB,KAC9B,MAAM,IACJ2gJ,EAAG,SACHL,EAAQ,KACR/yF,EAAI,MACJklB,EAAK,QACLmuE,EAAO,iBACPC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,WACXC,GACE/gI,EACEyhI,GAAQtkJ,KAAKC,MAAQ0jJ,GAAe,IAEpCY,EAAS,CACb/mJ,EAAG+lJ,EAAI/lJ,EAAI0lJ,EAAS1lJ,EAAI8mJ,EACxBhgG,EAAGi/F,EAAIj/F,EAAI4+F,EAAS5+F,EAAIggG,GAGpBE,EAAc,CAClBhnJ,EAAG0lJ,EAAS1lJ,EAAI,KAAQ8mJ,EAAO,GAC/BhgG,EAAG4+F,EAAS5+F,GAAY,IAAPggG,GAGbG,EAAat0F,EAAOjyD,KAAKwmJ,IAAIxmJ,KAAKymJ,IAAIf,EAAaH,IACnDmB,EAAc,EAAIhB,EAAaH,GAAoBvlJ,KAAK2mJ,GAAK,KAE7DC,EAAgBlB,EAAa,EAC7BmB,EAAiB/kJ,KAAKC,MAG5B,GADqBskJ,EAAOjgG,EAAI6/F,EAAethI,EAAEstC,KAG/C,YADAk0F,EAAiBr7I,KAAK6Z,GAIxB,MAAMmiI,EAAc,IACfniI,EACH0gI,IAAKgB,EACLrB,SAAUsB,EACVhB,QAASiB,EACTf,SAAUkB,EACVjB,YAAaoB,EACbnB,WAAYkB,GAGdnC,EAAYnxH,QAAQ5uB,GAAKoiJ,EACzBhB,EAAIiB,UAAY5vE,EACZxyD,EAAEghI,QACJG,EAAIprG,OACJorG,EAAIkB,UAAU3B,EAAI/lJ,EAAG+lJ,EAAIj/F,GACzB0/F,EAAImB,MACDh1F,EA9GmB,GAID,IA2GlBA,EA/GmB,GAID,KA6GrB6zF,EAAIoB,OAAO1B,GACXM,EAAIqB,KAAK9C,IACTyB,EAAIsB,YAEJtB,EAAIuB,YACJvB,EAAIwB,QACFjC,EAAI/lJ,EACJ+lJ,EAAIj/F,EACJ6L,EACAqzF,EACAE,EACA,EACA,EAAIxlJ,KAAK2mJ,IAEXb,EAAIqB,UAGR1C,EAAYnxH,QAAUmxH,EAAYnxH,QAAQnyB,OAAQwjB,IAAOwhI,EAAiBriJ,SAAS6gB,IAC/E8/H,EAAYnxH,QAAQpyB,QACtBgqG,EAAAA,GAAAA,IAAe06C,GAEflB,EAAgBpxH,SAAU,IAoB9B,IAhBAsjE,EAAAA,GAAAA,GAAc,EAAE2wD,MACd,IAAIC,EASJ,OARID,IAAqB7oF,IACvBmmF,EAAiB/kJ,GAASF,EAAWE,MAAO8+F,GAAUh/F,EAAWg/F,QACjE4oD,EAAcj9I,WAAWkpH,EA/IE,KAgJtBixB,EAAgBpxH,UACnBoxH,EAAgBpxH,SAAU,GAC1B43E,EAAAA,GAAAA,IAAe06C,KAGZ,KACL55H,aAAaw7H,KAGd,CAAC9oF,EAAkB+0D,EAAamyB,KAE9BlnF,GAAoB58D,KAAKC,MAAQ28D,EA3JP,IA4J7B,OAGF,MAAM+oF,GAAiB3nD,EAAAA,GAAAA,GACrBrqF,QAAQ0kE,IAAQ,QAAQA,MACxB1kE,QAAQmvI,IAAS,SAASA,MAC1BnvI,QAAQ3V,IAAU,UAAUA,MAC5B2V,QAAQmpF,IAAW,WAAWA,OAGhC,OACEpqB,EAAAA,GAAAA,GAAA,OAAK7yE,GAAG,WAAWyxB,UAAWunE,GAAO8wB,KAAM5rB,MAAO4nD,EAAejyE,UAC/DhB,EAAAA,GAAAA,GAAA,UAAQ8E,IAAKkrE,EAAWpxH,UAAWunE,GAAOkrD,OAAQ/lJ,MAAOF,EAAWE,MAAO8+F,OAAQh/F,EAAWg/F,cASpG,SAASqmD,GACPplD,EAAsB6nD,EAAwBjxC,EAAyB39F,GAEvE,GAAc,YAAV+mF,EAAqB,CACvB,MAAM8nD,EAAW7uI,EAAQ,EACnB83C,EAAW,CACftxD,EAAGooJ,GAAkBC,GAAY,GAAM,KACvCvhG,EAAqB,IAAlBqwD,GAECmxC,EAAU5nJ,KAAKsN,SAAWo6I,EAOhC,MAAO,CACL92F,WACAo0F,SAPe,CACf1lJ,EAAGqoJ,EAAWC,GAAqB,EAAXA,EACxBxhG,GAHeqwD,EAAkByuC,GAAyC,IAAlBzuC,IAU5D,CAYE,MAAO,CACL7lD,SAZe,CACftxD,EAAGU,KAAKsN,SAAWo6I,EACnBthG,GAAG,IAWH4+F,SAPe,CACf1lJ,EAHc4lJ,GAAuBwC,GAIrCthG,GAHeqwD,EAAkBz2G,KAAKsN,SAAW,MAWvD,CAEA,SAAS43I,GAAuBhlJ,EAAc,GAC5C,OAAOF,KAAKsN,SAAWpN,EAAMA,EAAM,CACrC,C,4BCnQA,M,8CC+BM2nJ,GAAY,cAsElB,IAAe7yE,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IACjBx4E,IAEQ,CACLyoJ,UAFevoJ,EAAAA,EAAAA,KAAeF,GAEX0/D,OAJL8Y,CAlEEkwE,EAAGD,eACvB,MAAOE,EAAOC,IAAY9xE,EAAAA,GAAAA,IAAiB,IAErC+xE,GAAUluE,EAAAA,GAAAA,GAAiBmuE,IAC3BH,EAAM9mJ,QANW,GAQrB+mJ,EAAUG,GAAc,IAAIA,EAAWD,MA0CzC,OAvCA7yE,EAAAA,GAAAA,IAAU,KACR,IAAKwyE,EAAU,OAEf,MAAM,OAAEnpF,EAAM,OAAEC,GAAWkpF,GACrB,MAAEhoJ,EAAK,OAAE8+F,GAAWh/F,EAAAA,EAAWC,MAG/BwoJ,EArBmB,KAoBTroJ,KAAKE,IAAIJ,EAAQ6+D,EAAQigC,EAAShgC,EAAQD,EAAQC,GAE5Dub,EAAMvb,EAASypF,EAAc,EAC7BzD,EAAOjmF,EAAS0pF,EAAc,EAEpCH,EAAQ,CACNI,UAAWR,EAAS9oF,aACpBupF,UAAWF,EACXluE,MACAyqE,UAED,CAACkD,KAEJxyE,EAAAA,GAAAA,IAAU,MACRkzE,EAAAA,GAAAA,IACE5xE,EAAAA,GAAAA,IAAA,UAAQt3E,EAAE,IAAI8mD,EAAE,IAAItmD,MAAM,IAAI8+F,OAAO,IAAI,8BAA4B,OAAO6pD,MAAOC,EAAAA,IAAclzE,SAAA,EAC/FhB,EAAAA,GAAAA,GAAA,WAASjrD,KAAMo/H,GAAY7wI,OAAO,eAClC08D,EAAAA,GAAAA,GAAA,qBACEo0E,GAAG,gBACHC,IAAI,YACJ5B,MAtCW,KAuCX6B,iBAAiB,IACjBC,iBAAiB,SAGrBlB,IAGK,MACLmB,EAAAA,GAAAA,GAAoBnB,MAErB,KAGDrzE,EAAAA,GAAAA,GAAA,OAAKphD,WAAWkjD,EAAAA,GAAAA,GDpFG,YCoF0Bm4B,eAAa,EAAAj5B,SACvDwyE,EAAM/5I,IAAK8wD,IACVyV,EAAAA,GAAAA,GAAA,OACEphD,UDvF+B,WCwF/BysE,OAAOC,EAAAA,GAAAA,GACL,iBAAiB/gC,EAAKwpF,cACtB,mBAAmBxpF,EAAKob,QACxB,oBAAoBpb,EAAK6lF,UAG3BqE,eAAgBA,IAAMhB,EAAUG,GAAcA,EAAUjnJ,OAAQ2jJ,GAAMA,IAAM/lF,KADvEA,EAAKupF,iBCyDpB,IAAIY,IAAiB,EAErB,MA8cA,IAAel0E,EAAAA,GAAAA,KAAK6C,EAAAA,EAAAA,IAClB,CAACx4E,GAAUymF,eACT,MAAM,cACJxkF,GACEjC,GAEE,gBACJywC,EAAe,yBACf6iB,EAAwB,eACxBpC,EAAc,iBACd4N,EAAgB,0BAChB3uC,EAAyB,wBACzBiwC,EAAuB,4BACvB0Y,EAA2B,WAC3B7Z,EAAU,kBACV9+D,EAAiB,0BACjB6+D,EAAyB,cACzB78C,EAAa,QACbw8C,EAAO,WACP/C,EAAU,gBACV6X,EAAe,aACfv3B,EAAY,cACZW,EAAa,mBACbyd,EAAkB,wBAClB6N,EAAuB,YACvBxlC,EAAW,QACX2V,EAAO,kBACP6nB,EAAiB,wBACjB1O,IACEvxD,EAAAA,EAAAA,KAAeF,IAEb,yBAAE8pJ,IAA6Bv2G,EAAAA,GAAAA,GAAqBvzC,GAEpD+pJ,EAAc9qF,IAAch6D,EAAAA,EAAAA,KAAkBjF,EAAQi/D,EAAW79D,OAAQ69D,EAAWh4D,WACpF28I,EAAYmG,GAAapkJ,QAAQqkJ,MAAMt6I,OACvC,OAAEtO,IAAWwL,EAAAA,EAAAA,KAAyB5M,IAAW,CAAC,EAClDiqJ,IAA0BjmJ,EAAAA,EAAAA,KAA+BhE,EAAQ,4BACjEm/D,EAAAA,EAAAA,KAA0Bn/D,GAE1BkqJ,EAAqBz4F,GAA0B04F,EAAAA,EAAAA,KAAiBnqJ,EAAQyxD,QAA2BnoD,EACnGqtE,GAAkBtyD,EAAAA,EAAAA,KAA0BrkB,GAElD,MAAO,CACLiC,gBACAmoJ,iBAAkBjqJ,EAClBkqJ,mBAAoBj0I,QAAQhV,GAC5BkpJ,mBAAmBn0F,EAAAA,EAAAA,KAAyBn2D,EAAQymF,GACpD8jE,mBAAmBC,EAAAA,EAAAA,KAAwBxqJ,GAC3CyqJ,mBAAmBC,EAAAA,EAAAA,KAAwB1qJ,GAC3C2qJ,oBAAoBC,EAAAA,EAAAA,KAAyB5qJ,GAC7C6qJ,sBAAsBC,EAAAA,EAAAA,KAA2B9qJ,GACjD+qJ,iBAAkB30I,QAAQ+L,EAActgB,QACxCmpJ,WAAY50I,QAAQuoD,EAAQ98D,QAC5Bi9D,mBACAmsF,sBAAuB70I,QAAQ4oD,GAC/B8Z,8BACA3oD,4BACAiwC,0BACA8qF,oBAAoBp4I,EAAAA,EAAAA,KAAyB9S,GAC7CsyE,kBAAmB3vC,EAAc3iC,EAAOqyE,WAAWC,uBAAoBhpE,EACvE0lH,yBAAyB7vD,EAAAA,EAAAA,KAA0Bn/D,GACnD8pJ,2BACAqB,kBAAmBxoH,EAAcvsB,QAAQpW,EAAOozE,gBAAa9pE,EAC7DmoB,YAAazxB,EAAO8vB,SAASoB,MAAMM,OACnC45H,oBAAqBprJ,EAAO8mB,aAAaoK,MAAMM,OAC/C65H,iBAAkBzvF,GAAYl7C,OAC9B4qI,wBAAyB1vF,GAAYC,gBACrCoD,aACA2kF,YACA2H,yBAA0Bn1I,QAAQq9D,GAClChjC,kBACA+6G,mBAAoB/6G,IAAmB77B,EAAAA,EAAAA,KAAW5U,EAAQywC,EAAgB3hB,OAC1EwkC,2BACAv9C,sBAAsBC,EAAAA,EAAAA,KAA2BhW,GACjDyrJ,mBAAoBvvG,GAAcE,OAClCsvG,oBAAqB7uG,GAAeT,OACpCuvG,yBAA0Bv1I,QAAQkkD,GAClCsxF,0BAA2BzjF,GAAyB/rB,OACpDyvG,aAAc1rF,GAAmBznD,MACjC++B,mBAAoBa,EAAQb,mBAC5Bq0G,mBAAoB11I,QAAQkiC,EAAQH,SACpC+xG,qBACAvnH,cACAuuB,iBACA+4F,yBACApvH,SAAU76B,EAAO66B,SACjB87C,kBACA26B,kBAAmBtxG,EAAOsxG,oBAvFZ94B,CA9cP0Y,EACXzK,WACA2jE,mBACAC,qBACAC,oBACAC,oBACAE,oBACAE,qBACAI,mBACAC,aACA14E,oBACAxT,mBACAmsF,wBACAnyE,8BACA+yE,eACA17H,4BACAiwC,0BACA8qF,qBACAl8B,0BACA86B,2BACAr4H,cACA25H,sBACAD,oBACAE,mBACAC,0BACArsF,aACA2kF,YACA2H,2BACA96G,kBACA+6G,qBACAl4F,2BACApC,iBACAu6F,qBACAC,sBACAC,2BACAC,4BACAn0G,qBACAq0G,qBACAjB,uBACA90I,uBACAm0I,qBACAvnH,cACAsnH,yBACApvH,WACA54B,gBACA00E,kBACA26B,wBAEA,MAAM,SACJy6C,EAAQ,mBACRC,EAAkB,4BAClBC,EAA2B,4BAC3BC,EAA2B,yBAC3BC,GAAwB,2BACxBC,GAA0B,eAC1B/oF,GAAc,iBACdgpF,GAAgB,kBAChBC,GAAiB,kBACjBC,GAAiB,gBACjBC,GAAe,uBACfC,GAAsB,gBACtB17E,GAAe,iBACf27E,GAAgB,cAChBC,GAAa,sBACbC,GAAqB,kBACrBC,GAAiB,qBACjBp8E,GAAoB,uBACpBq8E,GAAsB,iBACtBC,GAAgB,qBAChBC,GAAoB,qBACpBC,GAAoB,yBACpBC,GAAwB,WACxB3jG,GAAU,cACV4jG,GAAa,eACbt6G,GAAc,gBACdu6G,GAAe,iBACf97H,GAAgB,wBAChB+7H,GAAuB,kBACvB5jI,GAAiB,aACjB6jI,GAAY,gBACZC,GAAe,WACfpiI,GAAU,iBACVq6F,GAAgB,wBAChB70C,GAAuB,4BACvB68E,GAA2B,gBAC3Bn9F,GAAe,iBACfo9F,GAAgB,oBAChB/8E,GAAmB,wBACnBg9E,GAAuB,0BACvBC,GAAyB,6BACzBC,GAA4B,mBAC5Bp9E,GAAkB,eAClBq9E,GAAc,sBACdrlG,GAAqB,cACrBslG,GAAa,iBACbC,GAAgB,eAChB/mI,GAAc,qBACdgnI,GAAoB,eACpBC,GAAc,wBACdC,GAAuB,iBACvBx9D,GAAgB,oBAChBy9D,GAAmB,aACnBxuH,GAAY,eACZyuH,GAAc,qBACd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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\nimport {DLP} from \"../../../api/dlp/api.ts\";\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  console.log(sendParams);\n  if (!global.dlpPolicy?.isBlockIfOffline) {\n    const result = await DLP.checkMessage(global, sendParams);\n    if (!result) {\n      if (!sendParams.messagePriceInStars) {\n        sendMessage(global, sendParams);\n      } else {\n        const message = await callApi('sendMessageLocal', sendParams);\n        if (message) {\n          localMessages.push({\n            ...sendParams,\n            localMessage: message,\n          });\n        }\n      }\n    } else {\n      alert(global.dlpPolicy?.blockMessage || 'Messages are blocked by Administrator');\n    }\n  } else {\n    alert(global.dlpPolicy?.blockMessage || 'Messages are blocked by Administrator');\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened.location.href = url;\n      this.preOpened.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, stars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n  };\n\n  payInputStarInvoice(global, inputInvoice, stars, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_RESALE_GIFTS_FILTER_OPTIONS, RESALE_GIFTS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line @stylistic/max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload.isAvailable),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReason', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen,\n  } = getActions();\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  currentUser?: ApiUser;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  accountsTotalLimit: number;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type {\n  ElementRef } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n\n  Settings,\n  Archived,\n\n  NewGroup,\n\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => ref?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention);\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className} ref={ref}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n      {shouldRenderContextMenu && renderContextMenu()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage,\n  ApiRestrictionReason,\n  ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  canTranslate,\n  translationLanguage,\n  shouldAutoTranslate,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestChatTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  useEffect(() => {\n    if (!shouldAutoTranslate || !canTranslate) return;\n    requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n        <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n      ) : isContactRequirePremium && !hasMessages ? (\n        <RequirementToContactMessage peerId={chatId} />\n      ) : (isBot || isNonContact) && !hasMessages ? (\n        <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isChatMonoforum={isChatMonoforum}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderAccountInfo={isBot || isNonContact}\n          nameChangeDate={nameChangeDate}\n          photoChangeDate={photoChangeDate}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n          canPost={canPost}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { isUserId } from '../../util/entities/ids';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{oldLang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {oldLang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {oldLang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {oldLang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      shouldBlockSendInMonoforum,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: ElementRef<HTMLDivElement>,\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPriceInStars) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPriceInStars ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldPreloadPreview\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  isActive: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const getGiftId = useLastCallback((gift: ApiSavedStarGift) => (\n    `${gift.date}-${gift.fromId}-${gift.gift.id}`\n  ));\n  const giftIds = useMemo(() => renderingGifts?.map(getGiftId), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map(getGiftId);\n    const newGiftIds = gifts.map(getGiftId);\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getGiftId(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getGiftId(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n          isSavedDialog,\n          Boolean(monoforumChannel),\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean, isForMonoforum?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} isForMonoforum={isForMonoforum} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog\n      && (isGroup || (isChannel && isChatAdmin(chat))) && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n      monoforumChannel,\n    };\n  },\n)(Profile));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useMarkScrolled({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable({ isAvailable: true });\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable({ isAvailable: false });\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, Boolean(IS_ELECTRON));\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","selectThreadIdFromMessage","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","map","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","paidMessagesStars","fullInfo","selectUserFullInfo","console","log","dlpPolicy","isBlockIfOffline","alert","blockMessage","DLP","checkMessage","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","amount","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","todo","cancelApiProgress","currentDraft","isMonoforum","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","items","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","monoforumPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","getMainUsername","queryId","allowPaidStars","resultId","scheduleDate","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","sendStarPaymentForm","directInfo","formId","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","slug","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","starGifts","idsByCategory","resaleGifts","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","replacePeerSavedGifts","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","reloadPeerSavedGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","addTabStateResetterAction","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","forNewTask","todoListModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","isAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftResalePriceComposerModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","_jsx","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","children","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","_jsxs","_Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","useLastCallback","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","Folders","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","activeKey","renderCount","activeFolder","isFolder","ChatList","folderType","isMainList","canDisplayArchive","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","animationLevel","attachBots","selectTheme","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","IS_MULTIACCOUNT_SUPPORTED","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","settingsScreen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","currentScreen","isChannel","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","handleClick","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","hasMessages","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","updateInsertingPeerIdMention","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","isAvatarPeerUser","handleOpenChat","handleMention","EDITABLE_INPUT_CSS_SELECTOR","handleAvatarClick","avatarRef","contextMenuAnchor","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","canMention","shouldRenderContextMenu","hiddenName","renderAvatar","anchor","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","handleBeforeContextMenu","target","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","renderContent","MessageAppendix","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","isChatMonoforum","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","Message","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","monoforumChannelId","selectMonoforumChannel","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","requestChatTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","renderAudio","audio","performer","fileName","renderVoice","senderName","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","mediaHash","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","artist","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","useWindowSize","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","userName","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","selectIsMonoforumAdmin","shouldBlockSendInMonoforum","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","FrozenAccountModal","DeleteAccountModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","stickerRef","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","ribbonText","resellPriceInStars","total","ribbonColor","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","shouldPreloadPreview","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","renderProfileInfo","profileId","isForMonoforum","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","shouldWarnAboutSvg","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","monoforumChannel","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","getGiftId","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","nonInteractive","noLoop","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","boostInfo","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useMarkScrolled","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","prevChatId","prevThreadId","onChatMemberSelect","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}